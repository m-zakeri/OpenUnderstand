//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from JavaParserLabeled.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace UndContain {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class JavaParserLabeled : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ABSTRACT=1, ASSERT=2, BOOLEAN=3, BREAK=4, BYTE=5, CASE=6, CATCH=7, CHAR=8, 
		CLASS=9, CONST=10, CONTINUE=11, DEFAULT=12, DO=13, DOUBLE=14, ELSE=15, 
		ENUM=16, EXTENDS=17, FINAL=18, FINALLY=19, FLOAT=20, FOR=21, IF=22, GOTO=23, 
		IMPLEMENTS=24, IMPORT=25, INSTANCEOF=26, INT=27, INTERFACE=28, LONG=29, 
		NATIVE=30, NEW=31, PACKAGE=32, PRIVATE=33, PROTECTED=34, PUBLIC=35, RETURN=36, 
		SHORT=37, STATIC=38, STRICTFP=39, SUPER=40, SWITCH=41, SYNCHRONIZED=42, 
		THIS=43, THROW=44, THROWS=45, TRANSIENT=46, TRY=47, VOID=48, VOLATILE=49, 
		WHILE=50, DECIMAL_LITERAL=51, HEX_LITERAL=52, OCT_LITERAL=53, BINARY_LITERAL=54, 
		FLOAT_LITERAL=55, HEX_FLOAT_LITERAL=56, BOOL_LITERAL=57, CHAR_LITERAL=58, 
		STRING_LITERAL=59, NULL_LITERAL=60, LPAREN=61, RPAREN=62, LBRACE=63, RBRACE=64, 
		LBRACK=65, RBRACK=66, SEMI=67, COMMA=68, DOT=69, ASSIGN=70, GT=71, LT=72, 
		BANG=73, TILDE=74, QUESTION=75, COLON=76, EQUAL=77, LE=78, GE=79, NOTEQUAL=80, 
		AND=81, OR=82, INC=83, DEC=84, ADD=85, SUB=86, MUL=87, DIV=88, BITAND=89, 
		BITOR=90, CARET=91, MOD=92, ADD_ASSIGN=93, SUB_ASSIGN=94, MUL_ASSIGN=95, 
		DIV_ASSIGN=96, AND_ASSIGN=97, OR_ASSIGN=98, XOR_ASSIGN=99, MOD_ASSIGN=100, 
		LSHIFT_ASSIGN=101, RSHIFT_ASSIGN=102, URSHIFT_ASSIGN=103, ARROW=104, COLONCOLON=105, 
		AT=106, ELLIPSIS=107, WS=108, COMMENT=109, LINE_COMMENT=110, IDENTIFIER=111;
	public const int
		RULE_compilationUnit = 0, RULE_packageDeclaration = 1, RULE_importDeclaration = 2, 
		RULE_typeDeclaration = 3, RULE_modifier = 4, RULE_classOrInterfaceModifier = 5, 
		RULE_variableModifier = 6, RULE_classDeclaration = 7, RULE_typeParameters = 8, 
		RULE_typeParameter = 9, RULE_typeBound = 10, RULE_enumDeclaration = 11, 
		RULE_enumConstants = 12, RULE_enumConstant = 13, RULE_enumBodyDeclarations = 14, 
		RULE_interfaceDeclaration = 15, RULE_classBody = 16, RULE_interfaceBody = 17, 
		RULE_classBodyDeclaration = 18, RULE_memberDeclaration = 19, RULE_methodDeclaration = 20, 
		RULE_methodBody = 21, RULE_typeTypeOrVoid = 22, RULE_genericMethodDeclaration = 23, 
		RULE_genericConstructorDeclaration = 24, RULE_constructorDeclaration = 25, 
		RULE_fieldDeclaration = 26, RULE_interfaceBodyDeclaration = 27, RULE_interfaceMemberDeclaration = 28, 
		RULE_constDeclaration = 29, RULE_constantDeclarator = 30, RULE_interfaceMethodDeclaration = 31, 
		RULE_interfaceMethodModifier = 32, RULE_genericInterfaceMethodDeclaration = 33, 
		RULE_variableDeclarators = 34, RULE_variableDeclarator = 35, RULE_variableDeclaratorId = 36, 
		RULE_variableInitializer = 37, RULE_arrayInitializer = 38, RULE_classOrInterfaceType = 39, 
		RULE_typeArgument = 40, RULE_qualifiedNameList = 41, RULE_formalParameters = 42, 
		RULE_formalParameterList = 43, RULE_formalParameter = 44, RULE_lastFormalParameter = 45, 
		RULE_qualifiedName = 46, RULE_literal = 47, RULE_integerLiteral = 48, 
		RULE_floatLiteral = 49, RULE_altAnnotationQualifiedName = 50, RULE_annotation = 51, 
		RULE_elementValuePairs = 52, RULE_elementValuePair = 53, RULE_elementValue = 54, 
		RULE_elementValueArrayInitializer = 55, RULE_annotationTypeDeclaration = 56, 
		RULE_annotationTypeBody = 57, RULE_annotationTypeElementDeclaration = 58, 
		RULE_annotationTypeElementRest = 59, RULE_annotationMethodOrConstantRest = 60, 
		RULE_annotationMethodRest = 61, RULE_annotationConstantRest = 62, RULE_defaultValue = 63, 
		RULE_block = 64, RULE_blockStatement = 65, RULE_localVariableDeclaration = 66, 
		RULE_localTypeDeclaration = 67, RULE_statement = 68, RULE_catchClause = 69, 
		RULE_catchType = 70, RULE_finallyBlock = 71, RULE_resourceSpecification = 72, 
		RULE_resources = 73, RULE_resource = 74, RULE_switchBlockStatementGroup = 75, 
		RULE_switchLabel = 76, RULE_forControl = 77, RULE_forInit = 78, RULE_enhancedForControl = 79, 
		RULE_parExpression = 80, RULE_expressionList = 81, RULE_methodCall = 82, 
		RULE_expression = 83, RULE_lambdaExpression = 84, RULE_lambdaParameters = 85, 
		RULE_lambdaBody = 86, RULE_primary = 87, RULE_classType = 88, RULE_creator = 89, 
		RULE_createdName = 90, RULE_innerCreator = 91, RULE_arrayCreatorRest = 92, 
		RULE_classCreatorRest = 93, RULE_explicitGenericInvocation = 94, RULE_typeArgumentsOrDiamond = 95, 
		RULE_nonWildcardTypeArgumentsOrDiamond = 96, RULE_nonWildcardTypeArguments = 97, 
		RULE_typeList = 98, RULE_typeType = 99, RULE_primitiveType = 100, RULE_typeArguments = 101, 
		RULE_superSuffix = 102, RULE_explicitGenericInvocationSuffix = 103, RULE_arguments = 104;
	public static readonly string[] ruleNames = {
		"compilationUnit", "packageDeclaration", "importDeclaration", "typeDeclaration", 
		"modifier", "classOrInterfaceModifier", "variableModifier", "classDeclaration", 
		"typeParameters", "typeParameter", "typeBound", "enumDeclaration", "enumConstants", 
		"enumConstant", "enumBodyDeclarations", "interfaceDeclaration", "classBody", 
		"interfaceBody", "classBodyDeclaration", "memberDeclaration", "methodDeclaration", 
		"methodBody", "typeTypeOrVoid", "genericMethodDeclaration", "genericConstructorDeclaration", 
		"constructorDeclaration", "fieldDeclaration", "interfaceBodyDeclaration", 
		"interfaceMemberDeclaration", "constDeclaration", "constantDeclarator", 
		"interfaceMethodDeclaration", "interfaceMethodModifier", "genericInterfaceMethodDeclaration", 
		"variableDeclarators", "variableDeclarator", "variableDeclaratorId", "variableInitializer", 
		"arrayInitializer", "classOrInterfaceType", "typeArgument", "qualifiedNameList", 
		"formalParameters", "formalParameterList", "formalParameter", "lastFormalParameter", 
		"qualifiedName", "literal", "integerLiteral", "floatLiteral", "altAnnotationQualifiedName", 
		"annotation", "elementValuePairs", "elementValuePair", "elementValue", 
		"elementValueArrayInitializer", "annotationTypeDeclaration", "annotationTypeBody", 
		"annotationTypeElementDeclaration", "annotationTypeElementRest", "annotationMethodOrConstantRest", 
		"annotationMethodRest", "annotationConstantRest", "defaultValue", "block", 
		"blockStatement", "localVariableDeclaration", "localTypeDeclaration", 
		"statement", "catchClause", "catchType", "finallyBlock", "resourceSpecification", 
		"resources", "resource", "switchBlockStatementGroup", "switchLabel", "forControl", 
		"forInit", "enhancedForControl", "parExpression", "expressionList", "methodCall", 
		"expression", "lambdaExpression", "lambdaParameters", "lambdaBody", "primary", 
		"classType", "creator", "createdName", "innerCreator", "arrayCreatorRest", 
		"classCreatorRest", "explicitGenericInvocation", "typeArgumentsOrDiamond", 
		"nonWildcardTypeArgumentsOrDiamond", "nonWildcardTypeArguments", "typeList", 
		"typeType", "primitiveType", "typeArguments", "superSuffix", "explicitGenericInvocationSuffix", 
		"arguments"
	};

	private static readonly string[] _LiteralNames = {
		null, "'abstract'", "'assert'", "'boolean'", "'break'", "'byte'", "'case'", 
		"'catch'", "'char'", "'class'", "'const'", "'continue'", "'default'", 
		"'do'", "'double'", "'else'", "'enum'", "'extends'", "'final'", "'finally'", 
		"'float'", "'for'", "'if'", "'goto'", "'implements'", "'import'", "'instanceof'", 
		"'int'", "'interface'", "'long'", "'native'", "'new'", "'package'", "'private'", 
		"'protected'", "'public'", "'return'", "'short'", "'static'", "'strictfp'", 
		"'super'", "'switch'", "'synchronized'", "'this'", "'throw'", "'throws'", 
		"'transient'", "'try'", "'void'", "'volatile'", "'while'", null, null, 
		null, null, null, null, null, null, null, "'null'", "'('", "')'", "'{'", 
		"'}'", "'['", "']'", "';'", "','", "'.'", "'='", "'>'", "'<'", "'!'", 
		"'~'", "'?'", "':'", "'=='", "'<='", "'>='", "'!='", "'&&'", "'||'", "'++'", 
		"'--'", "'+'", "'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", "'+='", 
		"'-='", "'*='", "'/='", "'&='", "'|='", "'^='", "'%='", "'<<='", "'>>='", 
		"'>>>='", "'->'", "'::'", "'@'", "'...'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", "BYTE", "CASE", "CATCH", 
		"CHAR", "CLASS", "CONST", "CONTINUE", "DEFAULT", "DO", "DOUBLE", "ELSE", 
		"ENUM", "EXTENDS", "FINAL", "FINALLY", "FLOAT", "FOR", "IF", "GOTO", "IMPLEMENTS", 
		"IMPORT", "INSTANCEOF", "INT", "INTERFACE", "LONG", "NATIVE", "NEW", "PACKAGE", 
		"PRIVATE", "PROTECTED", "PUBLIC", "RETURN", "SHORT", "STATIC", "STRICTFP", 
		"SUPER", "SWITCH", "SYNCHRONIZED", "THIS", "THROW", "THROWS", "TRANSIENT", 
		"TRY", "VOID", "VOLATILE", "WHILE", "DECIMAL_LITERAL", "HEX_LITERAL", 
		"OCT_LITERAL", "BINARY_LITERAL", "FLOAT_LITERAL", "HEX_FLOAT_LITERAL", 
		"BOOL_LITERAL", "CHAR_LITERAL", "STRING_LITERAL", "NULL_LITERAL", "LPAREN", 
		"RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", "DOT", 
		"ASSIGN", "GT", "LT", "BANG", "TILDE", "QUESTION", "COLON", "EQUAL", "LE", 
		"GE", "NOTEQUAL", "AND", "OR", "INC", "DEC", "ADD", "SUB", "MUL", "DIV", 
		"BITAND", "BITOR", "CARET", "MOD", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", 
		"DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN", 
		"RSHIFT_ASSIGN", "URSHIFT_ASSIGN", "ARROW", "COLONCOLON", "AT", "ELLIPSIS", 
		"WS", "COMMENT", "LINE_COMMENT", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JavaParserLabeled.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static JavaParserLabeled() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JavaParserLabeled(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JavaParserLabeled(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(JavaParserLabeled.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PackageDeclarationContext packageDeclaration() {
			return GetRuleContext<PackageDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDeclarationContext[] importDeclaration() {
			return GetRuleContexts<ImportDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDeclarationContext importDeclaration(int i) {
			return GetRuleContext<ImportDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext[] typeDeclaration() {
			return GetRuleContexts<TypeDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclarationContext typeDeclaration(int i) {
			return GetRuleContext<TypeDeclarationContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				State = 210;
				packageDeclaration();
				}
				break;
			}
			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IMPORT) {
				{
				{
				State = 213;
				importDeclaration();
				}
				}
				State = 218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << CLASS) | (1L << ENUM) | (1L << FINAL) | (1L << INTERFACE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC) | (1L << STRICTFP))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (SEMI - 67)) | (1L << (AT - 67)) | (1L << (IDENTIFIER - 67)))) != 0)) {
				{
				{
				State = 219;
				typeDeclaration();
				}
				}
				State = 224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 225;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACKAGE() { return GetToken(JavaParserLabeled.PACKAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParserLabeled.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public PackageDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterPackageDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitPackageDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackageDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackageDeclarationContext packageDeclaration() {
		PackageDeclarationContext _localctx = new PackageDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_packageDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT || _la==IDENTIFIER) {
				{
				{
				State = 227;
				annotation();
				}
				}
				State = 232;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 233;
			Match(PACKAGE);
			State = 234;
			qualifiedName();
			State = 235;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(JavaParserLabeled.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParserLabeled.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(JavaParserLabeled.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(JavaParserLabeled.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(JavaParserLabeled.MUL, 0); }
		public ImportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterImportDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitImportDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportDeclarationContext importDeclaration() {
		ImportDeclarationContext _localctx = new ImportDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_importDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			Match(IMPORT);
			State = 239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STATIC) {
				{
				State = 238;
				Match(STATIC);
				}
			}

			State = 241;
			qualifiedName();
			State = 244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 242;
				Match(DOT);
				State = 243;
				Match(MUL);
				}
			}

			State = 246;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
			return GetRuleContext<AnnotationTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceModifierContext[] classOrInterfaceModifier() {
			return GetRuleContexts<ClassOrInterfaceModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceModifierContext classOrInterfaceModifier(int i) {
			return GetRuleContext<ClassOrInterfaceModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParserLabeled.SEMI, 0); }
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_typeDeclaration);
		try {
			int _alt;
			State = 261;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABSTRACT:
			case CLASS:
			case ENUM:
			case FINAL:
			case INTERFACE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case STATIC:
			case STRICTFP:
			case AT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 251;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 248;
						classOrInterfaceModifier();
						}
						} 
					}
					State = 253;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				}
				State = 258;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CLASS:
					{
					State = 254;
					classDeclaration();
					}
					break;
				case ENUM:
					{
					State = 255;
					enumDeclaration();
					}
					break;
				case INTERFACE:
					{
					State = 256;
					interfaceDeclaration();
					}
					break;
				case AT:
					{
					State = 257;
					annotationTypeDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 260;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceModifierContext classOrInterfaceModifier() {
			return GetRuleContext<ClassOrInterfaceModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIVE() { return GetToken(JavaParserLabeled.NATIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNCHRONIZED() { return GetToken(JavaParserLabeled.SYNCHRONIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSIENT() { return GetToken(JavaParserLabeled.TRANSIENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLATILE() { return GetToken(JavaParserLabeled.VOLATILE, 0); }
		public ModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierContext modifier() {
		ModifierContext _localctx = new ModifierContext(Context, State);
		EnterRule(_localctx, 8, RULE_modifier);
		try {
			State = 268;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABSTRACT:
			case FINAL:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case STATIC:
			case STRICTFP:
			case AT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 263;
				classOrInterfaceModifier();
				}
				break;
			case NATIVE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 264;
				Match(NATIVE);
				}
				break;
			case SYNCHRONIZED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 265;
				Match(SYNCHRONIZED);
				}
				break;
			case TRANSIENT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 266;
				Match(TRANSIENT);
				}
				break;
			case VOLATILE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 267;
				Match(VOLATILE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrInterfaceModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(JavaParserLabeled.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROTECTED() { return GetToken(JavaParserLabeled.PROTECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(JavaParserLabeled.PRIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(JavaParserLabeled.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(JavaParserLabeled.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINAL() { return GetToken(JavaParserLabeled.FINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRICTFP() { return GetToken(JavaParserLabeled.STRICTFP, 0); }
		public ClassOrInterfaceModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrInterfaceModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterClassOrInterfaceModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitClassOrInterfaceModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassOrInterfaceModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrInterfaceModifierContext classOrInterfaceModifier() {
		ClassOrInterfaceModifierContext _localctx = new ClassOrInterfaceModifierContext(Context, State);
		EnterRule(_localctx, 10, RULE_classOrInterfaceModifier);
		try {
			State = 278;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 270;
				annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 271;
				Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 272;
				Match(PROTECTED);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 273;
				Match(PRIVATE);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 5);
				{
				State = 274;
				Match(STATIC);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 275;
				Match(ABSTRACT);
				}
				break;
			case FINAL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 276;
				Match(FINAL);
				}
				break;
			case STRICTFP:
				EnterOuterAlt(_localctx, 8);
				{
				State = 277;
				Match(STRICTFP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINAL() { return GetToken(JavaParserLabeled.FINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public VariableModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterVariableModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitVariableModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableModifierContext variableModifier() {
		VariableModifierContext _localctx = new VariableModifierContext(Context, State);
		EnterRule(_localctx, 12, RULE_variableModifier);
		try {
			State = 282;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FINAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 280;
				Match(FINAL);
				}
				break;
			case AT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 281;
				annotation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(JavaParserLabeled.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JavaParserLabeled.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(JavaParserLabeled.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLEMENTS() { return GetToken(JavaParserLabeled.IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			Match(CLASS);
			State = 285;
			Match(IDENTIFIER);
			State = 287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 286;
				typeParameters();
				}
			}

			State = 291;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 289;
				Match(EXTENDS);
				State = 290;
				typeType();
				}
			}

			State = 295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IMPLEMENTS) {
				{
				State = 293;
				Match(IMPLEMENTS);
				State = 294;
				typeList();
				}
			}

			State = 297;
			classBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(JavaParserLabeled.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(JavaParserLabeled.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaParserLabeled.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaParserLabeled.COMMA, i);
		}
		public TypeParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterTypeParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitTypeParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParametersContext typeParameters() {
		TypeParametersContext _localctx = new TypeParametersContext(Context, State);
		EnterRule(_localctx, 16, RULE_typeParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			Match(LT);
			State = 300;
			typeParameter();
			State = 305;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 301;
				Match(COMMA);
				State = 302;
				typeParameter();
				}
				}
				State = 307;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 308;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JavaParserLabeled.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(JavaParserLabeled.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeBoundContext typeBound() {
			return GetRuleContext<TypeBoundContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 18, RULE_typeParameter);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 313;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 310;
					annotation();
					}
					} 
				}
				State = 315;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			State = 316;
			Match(IDENTIFIER);
			State = 325;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 317;
				Match(EXTENDS);
				State = 321;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 318;
						annotation();
						}
						} 
					}
					State = 323;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
				}
				State = 324;
				typeBound();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeBoundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext[] typeType() {
			return GetRuleContexts<TypeTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType(int i) {
			return GetRuleContext<TypeTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BITAND() { return GetTokens(JavaParserLabeled.BITAND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITAND(int i) {
			return GetToken(JavaParserLabeled.BITAND, i);
		}
		public TypeBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeBound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterTypeBound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitTypeBound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeBound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeBoundContext typeBound() {
		TypeBoundContext _localctx = new TypeBoundContext(Context, State);
		EnterRule(_localctx, 20, RULE_typeBound);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327;
			typeType();
			State = 332;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BITAND) {
				{
				{
				State = 328;
				Match(BITAND);
				State = 329;
				typeType();
				}
				}
				State = 334;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(JavaParserLabeled.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JavaParserLabeled.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(JavaParserLabeled.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(JavaParserLabeled.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLEMENTS() { return GetToken(JavaParserLabeled.IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumConstantsContext enumConstants() {
			return GetRuleContext<EnumConstantsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(JavaParserLabeled.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumBodyDeclarationsContext enumBodyDeclarations() {
			return GetRuleContext<EnumBodyDeclarationsContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335;
			Match(ENUM);
			State = 336;
			Match(IDENTIFIER);
			State = 339;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IMPLEMENTS) {
				{
				State = 337;
				Match(IMPLEMENTS);
				State = 338;
				typeList();
				}
			}

			State = 341;
			Match(LBRACE);
			State = 343;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT || _la==IDENTIFIER) {
				{
				State = 342;
				enumConstants();
				}
			}

			State = 346;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 345;
				Match(COMMA);
				}
			}

			State = 349;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI) {
				{
				State = 348;
				enumBodyDeclarations();
				}
			}

			State = 351;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumConstantContext[] enumConstant() {
			return GetRuleContexts<EnumConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumConstantContext enumConstant(int i) {
			return GetRuleContext<EnumConstantContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaParserLabeled.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaParserLabeled.COMMA, i);
		}
		public EnumConstantsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstants; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterEnumConstants(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitEnumConstants(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumConstants(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantsContext enumConstants() {
		EnumConstantsContext _localctx = new EnumConstantsContext(Context, State);
		EnterRule(_localctx, 24, RULE_enumConstants);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 353;
			enumConstant();
			State = 358;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 354;
					Match(COMMA);
					State = 355;
					enumConstant();
					}
					} 
				}
				State = 360;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JavaParserLabeled.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public EnumConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterEnumConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitEnumConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantContext enumConstant() {
		EnumConstantContext _localctx = new EnumConstantContext(Context, State);
		EnterRule(_localctx, 26, RULE_enumConstant);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 364;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 361;
					annotation();
					}
					} 
				}
				State = 366;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			State = 367;
			Match(IDENTIFIER);
			State = 369;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 368;
				arguments();
				}
			}

			State = 372;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACE) {
				{
				State = 371;
				classBody();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParserLabeled.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyDeclarationContext[] classBodyDeclaration() {
			return GetRuleContexts<ClassBodyDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyDeclarationContext classBodyDeclaration(int i) {
			return GetRuleContext<ClassBodyDeclarationContext>(i);
		}
		public EnumBodyDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBodyDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterEnumBodyDeclarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitEnumBodyDeclarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBodyDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyDeclarationsContext enumBodyDeclarations() {
		EnumBodyDeclarationsContext _localctx = new EnumBodyDeclarationsContext(Context, State);
		EnterRule(_localctx, 28, RULE_enumBodyDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374;
			Match(SEMI);
			State = 378;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << INTERFACE) | (1L << LONG) | (1L << NATIVE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SYNCHRONIZED) | (1L << TRANSIENT) | (1L << VOID) | (1L << VOLATILE) | (1L << LBRACE))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (SEMI - 67)) | (1L << (LT - 67)) | (1L << (AT - 67)) | (1L << (IDENTIFIER - 67)))) != 0)) {
				{
				{
				State = 375;
				classBodyDeclaration();
				}
				}
				State = 380;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERFACE() { return GetToken(JavaParserLabeled.INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JavaParserLabeled.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceBodyContext interfaceBody() {
			return GetRuleContext<InterfaceBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(JavaParserLabeled.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		public InterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterInterfaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitInterfaceDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDeclarationContext interfaceDeclaration() {
		InterfaceDeclarationContext _localctx = new InterfaceDeclarationContext(Context, State);
		EnterRule(_localctx, 30, RULE_interfaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 381;
			Match(INTERFACE);
			State = 382;
			Match(IDENTIFIER);
			State = 384;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 383;
				typeParameters();
				}
			}

			State = 388;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 386;
				Match(EXTENDS);
				State = 387;
				typeList();
				}
			}

			State = 390;
			interfaceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(JavaParserLabeled.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(JavaParserLabeled.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyDeclarationContext[] classBodyDeclaration() {
			return GetRuleContexts<ClassBodyDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyDeclarationContext classBodyDeclaration(int i) {
			return GetRuleContext<ClassBodyDeclarationContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 32, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			Match(LBRACE);
			State = 396;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << INTERFACE) | (1L << LONG) | (1L << NATIVE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SYNCHRONIZED) | (1L << TRANSIENT) | (1L << VOID) | (1L << VOLATILE) | (1L << LBRACE))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (SEMI - 67)) | (1L << (LT - 67)) | (1L << (AT - 67)) | (1L << (IDENTIFIER - 67)))) != 0)) {
				{
				{
				State = 393;
				classBodyDeclaration();
				}
				}
				State = 398;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 399;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(JavaParserLabeled.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(JavaParserLabeled.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceBodyDeclarationContext[] interfaceBodyDeclaration() {
			return GetRuleContexts<InterfaceBodyDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceBodyDeclarationContext interfaceBodyDeclaration(int i) {
			return GetRuleContext<InterfaceBodyDeclarationContext>(i);
		}
		public InterfaceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterInterfaceBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitInterfaceBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceBodyContext interfaceBody() {
		InterfaceBodyContext _localctx = new InterfaceBodyContext(Context, State);
		EnterRule(_localctx, 34, RULE_interfaceBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401;
			Match(LBRACE);
			State = 405;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << DEFAULT) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << INTERFACE) | (1L << LONG) | (1L << NATIVE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SYNCHRONIZED) | (1L << TRANSIENT) | (1L << VOID) | (1L << VOLATILE))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (SEMI - 67)) | (1L << (LT - 67)) | (1L << (AT - 67)) | (1L << (IDENTIFIER - 67)))) != 0)) {
				{
				{
				State = 402;
				interfaceBodyDeclaration();
				}
				}
				State = 407;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 408;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyDeclarationContext : ParserRuleContext {
		public ClassBodyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBodyDeclaration; } }
	 
		public ClassBodyDeclarationContext() { }
		public virtual void CopyFrom(ClassBodyDeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ClassBodyDeclaration1Context : ClassBodyDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(JavaParserLabeled.STATIC, 0); }
		public ClassBodyDeclaration1Context(ClassBodyDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterClassBodyDeclaration1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitClassBodyDeclaration1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBodyDeclaration1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassBodyDeclaration0Context : ClassBodyDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParserLabeled.SEMI, 0); }
		public ClassBodyDeclaration0Context(ClassBodyDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterClassBodyDeclaration0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitClassBodyDeclaration0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBodyDeclaration0(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ClassBodyDeclaration2Context : ClassBodyDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemberDeclarationContext memberDeclaration() {
			return GetRuleContext<MemberDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public ClassBodyDeclaration2Context(ClassBodyDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterClassBodyDeclaration2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitClassBodyDeclaration2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBodyDeclaration2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyDeclarationContext classBodyDeclaration() {
		ClassBodyDeclarationContext _localctx = new ClassBodyDeclarationContext(Context, State);
		EnterRule(_localctx, 36, RULE_classBodyDeclaration);
		int _la;
		try {
			int _alt;
			State = 422;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				_localctx = new ClassBodyDeclaration0Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 410;
				Match(SEMI);
				}
				break;
			case 2:
				_localctx = new ClassBodyDeclaration1Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 412;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STATIC) {
					{
					State = 411;
					Match(STATIC);
					}
				}

				State = 414;
				block();
				}
				break;
			case 3:
				_localctx = new ClassBodyDeclaration2Context(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 418;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 415;
						modifier();
						}
						} 
					}
					State = 420;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
				}
				State = 421;
				memberDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDeclarationContext : ParserRuleContext {
		public MemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDeclaration; } }
	 
		public MemberDeclarationContext() { }
		public virtual void CopyFrom(MemberDeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MemberDeclaration8Context : MemberDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public MemberDeclaration8Context(MemberDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterMemberDeclaration8(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitMemberDeclaration8(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDeclaration8(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberDeclaration0Context : MemberDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public MemberDeclaration0Context(MemberDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterMemberDeclaration0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitMemberDeclaration0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDeclaration0(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberDeclaration1Context : MemberDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public GenericMethodDeclarationContext genericMethodDeclaration() {
			return GetRuleContext<GenericMethodDeclarationContext>(0);
		}
		public MemberDeclaration1Context(MemberDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterMemberDeclaration1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitMemberDeclaration1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDeclaration1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberDeclaration2Context : MemberDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		public MemberDeclaration2Context(MemberDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterMemberDeclaration2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitMemberDeclaration2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDeclaration2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberDeclaration3Context : MemberDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorDeclarationContext constructorDeclaration() {
			return GetRuleContext<ConstructorDeclarationContext>(0);
		}
		public MemberDeclaration3Context(MemberDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterMemberDeclaration3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitMemberDeclaration3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDeclaration3(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberDeclaration4Context : MemberDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public GenericConstructorDeclarationContext genericConstructorDeclaration() {
			return GetRuleContext<GenericConstructorDeclarationContext>(0);
		}
		public MemberDeclaration4Context(MemberDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterMemberDeclaration4(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitMemberDeclaration4(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDeclaration4(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberDeclaration5Context : MemberDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public MemberDeclaration5Context(MemberDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterMemberDeclaration5(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitMemberDeclaration5(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDeclaration5(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberDeclaration6Context : MemberDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
			return GetRuleContext<AnnotationTypeDeclarationContext>(0);
		}
		public MemberDeclaration6Context(MemberDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterMemberDeclaration6(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitMemberDeclaration6(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDeclaration6(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberDeclaration7Context : MemberDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public MemberDeclaration7Context(MemberDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterMemberDeclaration7(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitMemberDeclaration7(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDeclaration7(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberDeclarationContext memberDeclaration() {
		MemberDeclarationContext _localctx = new MemberDeclarationContext(Context, State);
		EnterRule(_localctx, 38, RULE_memberDeclaration);
		try {
			State = 433;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				_localctx = new MemberDeclaration0Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 424;
				methodDeclaration();
				}
				break;
			case 2:
				_localctx = new MemberDeclaration1Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 425;
				genericMethodDeclaration();
				}
				break;
			case 3:
				_localctx = new MemberDeclaration2Context(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 426;
				fieldDeclaration();
				}
				break;
			case 4:
				_localctx = new MemberDeclaration3Context(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 427;
				constructorDeclaration();
				}
				break;
			case 5:
				_localctx = new MemberDeclaration4Context(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 428;
				genericConstructorDeclaration();
				}
				break;
			case 6:
				_localctx = new MemberDeclaration5Context(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 429;
				interfaceDeclaration();
				}
				break;
			case 7:
				_localctx = new MemberDeclaration6Context(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 430;
				annotationTypeDeclaration();
				}
				break;
			case 8:
				_localctx = new MemberDeclaration7Context(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 431;
				classDeclaration();
				}
				break;
			case 9:
				_localctx = new MemberDeclaration8Context(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 432;
				enumDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeOrVoidContext typeTypeOrVoid() {
			return GetRuleContext<TypeTypeOrVoidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JavaParserLabeled.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(JavaParserLabeled.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(JavaParserLabeled.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(JavaParserLabeled.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(JavaParserLabeled.RBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROWS() { return GetToken(JavaParserLabeled.THROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameListContext qualifiedNameList() {
			return GetRuleContext<QualifiedNameListContext>(0);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 40, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435;
			typeTypeOrVoid();
			State = 436;
			Match(IDENTIFIER);
			State = 437;
			formalParameters();
			State = 442;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK) {
				{
				{
				State = 438;
				Match(LBRACK);
				State = 439;
				Match(RBRACK);
				}
				}
				State = 444;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 447;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THROWS) {
				{
				State = 445;
				Match(THROWS);
				State = 446;
				qualifiedNameList();
				}
			}

			State = 449;
			methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParserLabeled.SEMI, 0); }
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 42, RULE_methodBody);
		try {
			State = 453;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 451;
				block();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 452;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeTypeOrVoidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(JavaParserLabeled.VOID, 0); }
		public TypeTypeOrVoidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeTypeOrVoid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterTypeTypeOrVoid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitTypeTypeOrVoid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeTypeOrVoid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeTypeOrVoidContext typeTypeOrVoid() {
		TypeTypeOrVoidContext _localctx = new TypeTypeOrVoidContext(Context, State);
		EnterRule(_localctx, 44, RULE_typeTypeOrVoid);
		try {
			State = 457;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case AT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 455;
				typeType();
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 456;
				Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericMethodDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public GenericMethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericMethodDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterGenericMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitGenericMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericMethodDeclarationContext genericMethodDeclaration() {
		GenericMethodDeclarationContext _localctx = new GenericMethodDeclarationContext(Context, State);
		EnterRule(_localctx, 46, RULE_genericMethodDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 459;
			typeParameters();
			State = 460;
			methodDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericConstructorDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorDeclarationContext constructorDeclaration() {
			return GetRuleContext<ConstructorDeclarationContext>(0);
		}
		public GenericConstructorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericConstructorDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterGenericConstructorDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitGenericConstructorDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericConstructorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericConstructorDeclarationContext genericConstructorDeclaration() {
		GenericConstructorDeclarationContext _localctx = new GenericConstructorDeclarationContext(Context, State);
		EnterRule(_localctx, 48, RULE_genericConstructorDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 462;
			typeParameters();
			State = 463;
			constructorDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDeclarationContext : ParserRuleContext {
		public BlockContext constructorBody;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JavaParserLabeled.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROWS() { return GetToken(JavaParserLabeled.THROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameListContext qualifiedNameList() {
			return GetRuleContext<QualifiedNameListContext>(0);
		}
		public ConstructorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterConstructorDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitConstructorDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDeclarationContext constructorDeclaration() {
		ConstructorDeclarationContext _localctx = new ConstructorDeclarationContext(Context, State);
		EnterRule(_localctx, 50, RULE_constructorDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 465;
			Match(IDENTIFIER);
			State = 466;
			formalParameters();
			State = 469;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THROWS) {
				{
				State = 467;
				Match(THROWS);
				State = 468;
				qualifiedNameList();
				}
			}

			State = 471;
			_localctx.constructorBody = block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorsContext variableDeclarators() {
			return GetRuleContext<VariableDeclaratorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParserLabeled.SEMI, 0); }
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterFieldDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitFieldDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(Context, State);
		EnterRule(_localctx, 52, RULE_fieldDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 473;
			typeType();
			State = 474;
			variableDeclarators();
			State = 475;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceBodyDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceMemberDeclarationContext interfaceMemberDeclaration() {
			return GetRuleContext<InterfaceMemberDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParserLabeled.SEMI, 0); }
		public InterfaceBodyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceBodyDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterInterfaceBodyDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitInterfaceBodyDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceBodyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceBodyDeclarationContext interfaceBodyDeclaration() {
		InterfaceBodyDeclarationContext _localctx = new InterfaceBodyDeclarationContext(Context, State);
		EnterRule(_localctx, 54, RULE_interfaceBodyDeclaration);
		try {
			int _alt;
			State = 485;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABSTRACT:
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CLASS:
			case DEFAULT:
			case DOUBLE:
			case ENUM:
			case FINAL:
			case FLOAT:
			case INT:
			case INTERFACE:
			case LONG:
			case NATIVE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case SHORT:
			case STATIC:
			case STRICTFP:
			case SYNCHRONIZED:
			case TRANSIENT:
			case VOID:
			case VOLATILE:
			case LT:
			case AT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 480;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 477;
						modifier();
						}
						} 
					}
					State = 482;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
				}
				State = 483;
				interfaceMemberDeclaration();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 484;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMemberDeclarationContext : ParserRuleContext {
		public InterfaceMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMemberDeclaration; } }
	 
		public InterfaceMemberDeclarationContext() { }
		public virtual void CopyFrom(InterfaceMemberDeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InterfaceMemberDeclaration6Context : InterfaceMemberDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public InterfaceMemberDeclaration6Context(InterfaceMemberDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterInterfaceMemberDeclaration6(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitInterfaceMemberDeclaration6(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMemberDeclaration6(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InterfaceMemberDeclaration5Context : InterfaceMemberDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public InterfaceMemberDeclaration5Context(InterfaceMemberDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterInterfaceMemberDeclaration5(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitInterfaceMemberDeclaration5(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMemberDeclaration5(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InterfaceMemberDeclaration4Context : InterfaceMemberDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
			return GetRuleContext<AnnotationTypeDeclarationContext>(0);
		}
		public InterfaceMemberDeclaration4Context(InterfaceMemberDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterInterfaceMemberDeclaration4(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitInterfaceMemberDeclaration4(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMemberDeclaration4(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InterfaceMemberDeclaration3Context : InterfaceMemberDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public InterfaceMemberDeclaration3Context(InterfaceMemberDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterInterfaceMemberDeclaration3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitInterfaceMemberDeclaration3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMemberDeclaration3(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InterfaceMemberDeclaration2Context : InterfaceMemberDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public GenericInterfaceMethodDeclarationContext genericInterfaceMethodDeclaration() {
			return GetRuleContext<GenericInterfaceMethodDeclarationContext>(0);
		}
		public InterfaceMemberDeclaration2Context(InterfaceMemberDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterInterfaceMemberDeclaration2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitInterfaceMemberDeclaration2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMemberDeclaration2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InterfaceMemberDeclaration1Context : InterfaceMemberDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceMethodDeclarationContext interfaceMethodDeclaration() {
			return GetRuleContext<InterfaceMethodDeclarationContext>(0);
		}
		public InterfaceMemberDeclaration1Context(InterfaceMemberDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterInterfaceMemberDeclaration1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitInterfaceMemberDeclaration1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMemberDeclaration1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InterfaceMemberDeclaration0Context : InterfaceMemberDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstDeclarationContext constDeclaration() {
			return GetRuleContext<ConstDeclarationContext>(0);
		}
		public InterfaceMemberDeclaration0Context(InterfaceMemberDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterInterfaceMemberDeclaration0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitInterfaceMemberDeclaration0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMemberDeclaration0(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMemberDeclarationContext interfaceMemberDeclaration() {
		InterfaceMemberDeclarationContext _localctx = new InterfaceMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 56, RULE_interfaceMemberDeclaration);
		try {
			State = 494;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				_localctx = new InterfaceMemberDeclaration0Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 487;
				constDeclaration();
				}
				break;
			case 2:
				_localctx = new InterfaceMemberDeclaration1Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 488;
				interfaceMethodDeclaration();
				}
				break;
			case 3:
				_localctx = new InterfaceMemberDeclaration2Context(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 489;
				genericInterfaceMethodDeclaration();
				}
				break;
			case 4:
				_localctx = new InterfaceMemberDeclaration3Context(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 490;
				interfaceDeclaration();
				}
				break;
			case 5:
				_localctx = new InterfaceMemberDeclaration4Context(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 491;
				annotationTypeDeclaration();
				}
				break;
			case 6:
				_localctx = new InterfaceMemberDeclaration5Context(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 492;
				classDeclaration();
				}
				break;
			case 7:
				_localctx = new InterfaceMemberDeclaration6Context(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 493;
				enumDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDeclaratorContext[] constantDeclarator() {
			return GetRuleContexts<ConstantDeclaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantDeclaratorContext constantDeclarator(int i) {
			return GetRuleContext<ConstantDeclaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParserLabeled.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaParserLabeled.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaParserLabeled.COMMA, i);
		}
		public ConstDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterConstDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitConstDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstDeclarationContext constDeclaration() {
		ConstDeclarationContext _localctx = new ConstDeclarationContext(Context, State);
		EnterRule(_localctx, 58, RULE_constDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 496;
			typeType();
			State = 497;
			constantDeclarator();
			State = 502;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 498;
				Match(COMMA);
				State = 499;
				constantDeclarator();
				}
				}
				State = 504;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 505;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JavaParserLabeled.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(JavaParserLabeled.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerContext variableInitializer() {
			return GetRuleContext<VariableInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(JavaParserLabeled.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(JavaParserLabeled.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(JavaParserLabeled.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(JavaParserLabeled.RBRACK, i);
		}
		public ConstantDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterConstantDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitConstantDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDeclaratorContext constantDeclarator() {
		ConstantDeclaratorContext _localctx = new ConstantDeclaratorContext(Context, State);
		EnterRule(_localctx, 60, RULE_constantDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 507;
			Match(IDENTIFIER);
			State = 512;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK) {
				{
				{
				State = 508;
				Match(LBRACK);
				State = 509;
				Match(RBRACK);
				}
				}
				State = 514;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 515;
			Match(ASSIGN);
			State = 516;
			variableInitializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMethodDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JavaParserLabeled.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeOrVoidContext typeTypeOrVoid() {
			return GetRuleContext<TypeTypeOrVoidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceMethodModifierContext[] interfaceMethodModifier() {
			return GetRuleContexts<InterfaceMethodModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceMethodModifierContext interfaceMethodModifier(int i) {
			return GetRuleContext<InterfaceMethodModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(JavaParserLabeled.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(JavaParserLabeled.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(JavaParserLabeled.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(JavaParserLabeled.RBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROWS() { return GetToken(JavaParserLabeled.THROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameListContext qualifiedNameList() {
			return GetRuleContext<QualifiedNameListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public InterfaceMethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMethodDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterInterfaceMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitInterfaceMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMethodDeclarationContext interfaceMethodDeclaration() {
		InterfaceMethodDeclarationContext _localctx = new InterfaceMethodDeclarationContext(Context, State);
		EnterRule(_localctx, 62, RULE_interfaceMethodDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 521;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 518;
					interfaceMethodModifier();
					}
					} 
				}
				State = 523;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			}
			State = 534;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case VOID:
			case AT:
			case IDENTIFIER:
				{
				State = 524;
				typeTypeOrVoid();
				}
				break;
			case LT:
				{
				State = 525;
				typeParameters();
				State = 529;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 526;
						annotation();
						}
						} 
					}
					State = 531;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
				}
				State = 532;
				typeTypeOrVoid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 536;
			Match(IDENTIFIER);
			State = 537;
			formalParameters();
			State = 542;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK) {
				{
				{
				State = 538;
				Match(LBRACK);
				State = 539;
				Match(RBRACK);
				}
				}
				State = 544;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 547;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THROWS) {
				{
				State = 545;
				Match(THROWS);
				State = 546;
				qualifiedNameList();
				}
			}

			State = 549;
			methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMethodModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(JavaParserLabeled.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(JavaParserLabeled.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(JavaParserLabeled.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATIC() { return GetToken(JavaParserLabeled.STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRICTFP() { return GetToken(JavaParserLabeled.STRICTFP, 0); }
		public InterfaceMethodModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMethodModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterInterfaceMethodModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitInterfaceMethodModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMethodModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMethodModifierContext interfaceMethodModifier() {
		InterfaceMethodModifierContext _localctx = new InterfaceMethodModifierContext(Context, State);
		EnterRule(_localctx, 64, RULE_interfaceMethodModifier);
		try {
			State = 557;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 551;
				annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 552;
				Match(PUBLIC);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 553;
				Match(ABSTRACT);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 554;
				Match(DEFAULT);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 5);
				{
				State = 555;
				Match(STATIC);
				}
				break;
			case STRICTFP:
				EnterOuterAlt(_localctx, 6);
				{
				State = 556;
				Match(STRICTFP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericInterfaceMethodDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceMethodDeclarationContext interfaceMethodDeclaration() {
			return GetRuleContext<InterfaceMethodDeclarationContext>(0);
		}
		public GenericInterfaceMethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericInterfaceMethodDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterGenericInterfaceMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitGenericInterfaceMethodDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericInterfaceMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericInterfaceMethodDeclarationContext genericInterfaceMethodDeclaration() {
		GenericInterfaceMethodDeclarationContext _localctx = new GenericInterfaceMethodDeclarationContext(Context, State);
		EnterRule(_localctx, 66, RULE_genericInterfaceMethodDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			typeParameters();
			State = 560;
			interfaceMethodDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorContext[] variableDeclarator() {
			return GetRuleContexts<VariableDeclaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorContext variableDeclarator(int i) {
			return GetRuleContext<VariableDeclaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaParserLabeled.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaParserLabeled.COMMA, i);
		}
		public VariableDeclaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterVariableDeclarators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitVariableDeclarators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorsContext variableDeclarators() {
		VariableDeclaratorsContext _localctx = new VariableDeclaratorsContext(Context, State);
		EnterRule(_localctx, 68, RULE_variableDeclarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 562;
			variableDeclarator();
			State = 567;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 563;
				Match(COMMA);
				State = 564;
				variableDeclarator();
				}
				}
				State = 569;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(JavaParserLabeled.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerContext variableInitializer() {
			return GetRuleContext<VariableInitializerContext>(0);
		}
		public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterVariableDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitVariableDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorContext variableDeclarator() {
		VariableDeclaratorContext _localctx = new VariableDeclaratorContext(Context, State);
		EnterRule(_localctx, 70, RULE_variableDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 570;
			variableDeclaratorId();
			State = 573;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 571;
				Match(ASSIGN);
				State = 572;
				variableInitializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JavaParserLabeled.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(JavaParserLabeled.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(JavaParserLabeled.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(JavaParserLabeled.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(JavaParserLabeled.RBRACK, i);
		}
		public VariableDeclaratorIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaratorId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterVariableDeclaratorId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitVariableDeclaratorId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaratorId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorIdContext variableDeclaratorId() {
		VariableDeclaratorIdContext _localctx = new VariableDeclaratorIdContext(Context, State);
		EnterRule(_localctx, 72, RULE_variableDeclaratorId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 575;
			Match(IDENTIFIER);
			State = 580;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK) {
				{
				{
				State = 576;
				Match(LBRACK);
				State = 577;
				Match(RBRACK);
				}
				}
				State = 582;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableInitializerContext : ParserRuleContext {
		public VariableInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableInitializer; } }
	 
		public VariableInitializerContext() { }
		public virtual void CopyFrom(VariableInitializerContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariableInitializer1Context : VariableInitializerContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableInitializer1Context(VariableInitializerContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterVariableInitializer1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitVariableInitializer1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableInitializer1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableInitializer0Context : VariableInitializerContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		public VariableInitializer0Context(VariableInitializerContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterVariableInitializer0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitVariableInitializer0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableInitializer0(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableInitializerContext variableInitializer() {
		VariableInitializerContext _localctx = new VariableInitializerContext(Context, State);
		EnterRule(_localctx, 74, RULE_variableInitializer);
		try {
			State = 585;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACE:
				_localctx = new VariableInitializer0Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 583;
				arrayInitializer();
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case SHORT:
			case SUPER:
			case THIS:
			case VOID:
			case DECIMAL_LITERAL:
			case HEX_LITERAL:
			case OCT_LITERAL:
			case BINARY_LITERAL:
			case FLOAT_LITERAL:
			case HEX_FLOAT_LITERAL:
			case BOOL_LITERAL:
			case CHAR_LITERAL:
			case STRING_LITERAL:
			case NULL_LITERAL:
			case LPAREN:
			case LT:
			case BANG:
			case TILDE:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case AT:
			case IDENTIFIER:
				_localctx = new VariableInitializer1Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 584;
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(JavaParserLabeled.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(JavaParserLabeled.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerContext[] variableInitializer() {
			return GetRuleContexts<VariableInitializerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableInitializerContext variableInitializer(int i) {
			return GetRuleContext<VariableInitializerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaParserLabeled.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaParserLabeled.COMMA, i);
		}
		public ArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterArrayInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitArrayInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitializerContext arrayInitializer() {
		ArrayInitializerContext _localctx = new ArrayInitializerContext(Context, State);
		EnterRule(_localctx, 76, RULE_arrayInitializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 587;
			Match(LBRACE);
			State = 599;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << DECIMAL_LITERAL) | (1L << HEX_LITERAL) | (1L << OCT_LITERAL) | (1L << BINARY_LITERAL) | (1L << FLOAT_LITERAL) | (1L << HEX_FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << CHAR_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << LPAREN) | (1L << LBRACE))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (LT - 72)) | (1L << (BANG - 72)) | (1L << (TILDE - 72)) | (1L << (INC - 72)) | (1L << (DEC - 72)) | (1L << (ADD - 72)) | (1L << (SUB - 72)) | (1L << (AT - 72)) | (1L << (IDENTIFIER - 72)))) != 0)) {
				{
				State = 588;
				variableInitializer();
				State = 593;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 589;
						Match(COMMA);
						State = 590;
						variableInitializer();
						}
						} 
					}
					State = 595;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
				}
				State = 597;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 596;
					Match(COMMA);
					}
				}

				}
			}

			State = 601;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrInterfaceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(JavaParserLabeled.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(JavaParserLabeled.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext[] typeArguments() {
			return GetRuleContexts<TypeArgumentsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments(int i) {
			return GetRuleContext<TypeArgumentsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(JavaParserLabeled.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(JavaParserLabeled.DOT, i);
		}
		public ClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrInterfaceType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterClassOrInterfaceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitClassOrInterfaceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrInterfaceTypeContext classOrInterfaceType() {
		ClassOrInterfaceTypeContext _localctx = new ClassOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 78, RULE_classOrInterfaceType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 603;
			Match(IDENTIFIER);
			State = 605;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				{
				State = 604;
				typeArguments();
				}
				break;
			}
			State = 614;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 607;
					Match(DOT);
					State = 608;
					Match(IDENTIFIER);
					State = 610;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
					case 1:
						{
						State = 609;
						typeArguments();
						}
						break;
					}
					}
					} 
				}
				State = 616;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentContext : ParserRuleContext {
		public TypeArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgument; } }
	 
		public TypeArgumentContext() { }
		public virtual void CopyFrom(TypeArgumentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypeArgument0Context : TypeArgumentContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(JavaParserLabeled.QUESTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDS() { return GetToken(JavaParserLabeled.EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(JavaParserLabeled.SUPER, 0); }
		public TypeArgument0Context(TypeArgumentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterTypeArgument0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitTypeArgument0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgument0(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentContext typeArgument() {
		TypeArgumentContext _localctx = new TypeArgumentContext(Context, State);
		EnterRule(_localctx, 80, RULE_typeArgument);
		int _la;
		try {
			State = 629;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				_localctx = new TypeArgument0Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 617;
				typeType();
				}
				break;
			case 2:
				_localctx = new TypeArgument0Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 621;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==AT || _la==IDENTIFIER) {
					{
					{
					State = 618;
					annotation();
					}
					}
					State = 623;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 624;
				Match(QUESTION);
				State = 627;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXTENDS || _la==SUPER) {
					{
					State = 625;
					_la = TokenStream.LA(1);
					if ( !(_la==EXTENDS || _la==SUPER) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 626;
					typeType();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaParserLabeled.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaParserLabeled.COMMA, i);
		}
		public QualifiedNameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedNameList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterQualifiedNameList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitQualifiedNameList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedNameList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameListContext qualifiedNameList() {
		QualifiedNameListContext _localctx = new QualifiedNameListContext(Context, State);
		EnterRule(_localctx, 82, RULE_qualifiedNameList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 631;
			qualifiedName();
			State = 636;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 632;
				Match(COMMA);
				State = 633;
				qualifiedName();
				}
				}
				State = 638;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaParserLabeled.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaParserLabeled.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FormalParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterFormalParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitFormalParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParametersContext formalParameters() {
		FormalParametersContext _localctx = new FormalParametersContext(Context, State);
		EnterRule(_localctx, 84, RULE_formalParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 639;
			Match(LPAREN);
			State = 641;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << SHORT))) != 0) || _la==AT || _la==IDENTIFIER) {
				{
				State = 640;
				formalParameterList();
				}
			}

			State = 643;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
	 
		public FormalParameterListContext() { }
		public virtual void CopyFrom(FormalParameterListContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FormalParameterList1Context : FormalParameterListContext {
		[System.Diagnostics.DebuggerNonUserCode] public LastFormalParameterContext lastFormalParameter() {
			return GetRuleContext<LastFormalParameterContext>(0);
		}
		public FormalParameterList1Context(FormalParameterListContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterFormalParameterList1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitFormalParameterList1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FormalParameterList0Context : FormalParameterListContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterContext[] formalParameter() {
			return GetRuleContexts<FormalParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterContext formalParameter(int i) {
			return GetRuleContext<FormalParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaParserLabeled.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaParserLabeled.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LastFormalParameterContext lastFormalParameter() {
			return GetRuleContext<LastFormalParameterContext>(0);
		}
		public FormalParameterList0Context(FormalParameterListContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterFormalParameterList0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitFormalParameterList0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList0(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 86, RULE_formalParameterList);
		int _la;
		try {
			int _alt;
			State = 658;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				_localctx = new FormalParameterList0Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 645;
				formalParameter();
				State = 650;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 646;
						Match(COMMA);
						State = 647;
						formalParameter();
						}
						} 
					}
					State = 652;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
				}
				State = 655;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 653;
					Match(COMMA);
					State = 654;
					lastFormalParameter();
					}
				}

				}
				break;
			case 2:
				_localctx = new FormalParameterList1Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 657;
				lastFormalParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public FormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterFormalParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitFormalParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterContext formalParameter() {
		FormalParameterContext _localctx = new FormalParameterContext(Context, State);
		EnterRule(_localctx, 88, RULE_formalParameter);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 663;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 660;
					variableModifier();
					}
					} 
				}
				State = 665;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			}
			State = 666;
			typeType();
			State = 667;
			variableDeclaratorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastFormalParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELLIPSIS() { return GetToken(JavaParserLabeled.ELLIPSIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public LastFormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastFormalParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterLastFormalParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitLastFormalParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastFormalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastFormalParameterContext lastFormalParameter() {
		LastFormalParameterContext _localctx = new LastFormalParameterContext(Context, State);
		EnterRule(_localctx, 90, RULE_lastFormalParameter);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 672;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 669;
					variableModifier();
					}
					} 
				}
				State = 674;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			}
			State = 675;
			typeType();
			State = 679;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT || _la==IDENTIFIER) {
				{
				{
				State = 676;
				annotation();
				}
				}
				State = 681;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 682;
			Match(ELLIPSIS);
			State = 683;
			variableDeclaratorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(JavaParserLabeled.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(JavaParserLabeled.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(JavaParserLabeled.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(JavaParserLabeled.DOT, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 92, RULE_qualifiedName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 685;
			Match(IDENTIFIER);
			State = 690;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 686;
					Match(DOT);
					State = 687;
					Match(IDENTIFIER);
					}
					} 
				}
				State = 692;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Literal2Context : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LITERAL() { return GetToken(JavaParserLabeled.CHAR_LITERAL, 0); }
		public Literal2Context(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterLiteral2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitLiteral2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Literal1Context : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public FloatLiteralContext floatLiteral() {
			return GetRuleContext<FloatLiteralContext>(0);
		}
		public Literal1Context(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterLiteral1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitLiteral1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Literal0Context : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		public Literal0Context(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterLiteral0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitLiteral0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral0(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Literal5Context : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_LITERAL() { return GetToken(JavaParserLabeled.NULL_LITERAL, 0); }
		public Literal5Context(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterLiteral5(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitLiteral5(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral5(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Literal4Context : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_LITERAL() { return GetToken(JavaParserLabeled.BOOL_LITERAL, 0); }
		public Literal4Context(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterLiteral4(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitLiteral4(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral4(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Literal3Context : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(JavaParserLabeled.STRING_LITERAL, 0); }
		public Literal3Context(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterLiteral3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitLiteral3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 94, RULE_literal);
		try {
			State = 699;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL_LITERAL:
			case HEX_LITERAL:
			case OCT_LITERAL:
			case BINARY_LITERAL:
				_localctx = new Literal0Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 693;
				integerLiteral();
				}
				break;
			case FLOAT_LITERAL:
			case HEX_FLOAT_LITERAL:
				_localctx = new Literal1Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 694;
				floatLiteral();
				}
				break;
			case CHAR_LITERAL:
				_localctx = new Literal2Context(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 695;
				Match(CHAR_LITERAL);
				}
				break;
			case STRING_LITERAL:
				_localctx = new Literal3Context(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 696;
				Match(STRING_LITERAL);
				}
				break;
			case BOOL_LITERAL:
				_localctx = new Literal4Context(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 697;
				Match(BOOL_LITERAL);
				}
				break;
			case NULL_LITERAL:
				_localctx = new Literal5Context(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 698;
				Match(NULL_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_LITERAL() { return GetToken(JavaParserLabeled.DECIMAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_LITERAL() { return GetToken(JavaParserLabeled.HEX_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCT_LITERAL() { return GetToken(JavaParserLabeled.OCT_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_LITERAL() { return GetToken(JavaParserLabeled.BINARY_LITERAL, 0); }
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerLiteralContext integerLiteral() {
		IntegerLiteralContext _localctx = new IntegerLiteralContext(Context, State);
		EnterRule(_localctx, 96, RULE_integerLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 701;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DECIMAL_LITERAL) | (1L << HEX_LITERAL) | (1L << OCT_LITERAL) | (1L << BINARY_LITERAL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_LITERAL() { return GetToken(JavaParserLabeled.FLOAT_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_FLOAT_LITERAL() { return GetToken(JavaParserLabeled.HEX_FLOAT_LITERAL, 0); }
		public FloatLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterFloatLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitFloatLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatLiteralContext floatLiteral() {
		FloatLiteralContext _localctx = new FloatLiteralContext(Context, State);
		EnterRule(_localctx, 98, RULE_floatLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 703;
			_la = TokenStream.LA(1);
			if ( !(_la==FLOAT_LITERAL || _la==HEX_FLOAT_LITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltAnnotationQualifiedNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(JavaParserLabeled.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(JavaParserLabeled.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(JavaParserLabeled.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(JavaParserLabeled.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(JavaParserLabeled.DOT, i);
		}
		public AltAnnotationQualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altAnnotationQualifiedName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterAltAnnotationQualifiedName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitAltAnnotationQualifiedName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAltAnnotationQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AltAnnotationQualifiedNameContext altAnnotationQualifiedName() {
		AltAnnotationQualifiedNameContext _localctx = new AltAnnotationQualifiedNameContext(Context, State);
		EnterRule(_localctx, 100, RULE_altAnnotationQualifiedName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 709;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 705;
				Match(IDENTIFIER);
				State = 706;
				Match(DOT);
				}
				}
				State = 711;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 712;
			Match(AT);
			State = 713;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(JavaParserLabeled.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltAnnotationQualifiedNameContext altAnnotationQualifiedName() {
			return GetRuleContext<AltAnnotationQualifiedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaParserLabeled.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaParserLabeled.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementValuePairsContext elementValuePairs() {
			return GetRuleContext<ElementValuePairsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementValueContext elementValue() {
			return GetRuleContext<ElementValueContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 102, RULE_annotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 718;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				{
				State = 715;
				Match(AT);
				State = 716;
				qualifiedName();
				}
				break;
			case 2:
				{
				State = 717;
				altAnnotationQualifiedName();
				}
				break;
			}
			State = 726;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 720;
				Match(LPAREN);
				State = 723;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
				case 1:
					{
					State = 721;
					elementValuePairs();
					}
					break;
				case 2:
					{
					State = 722;
					elementValue();
					}
					break;
				}
				State = 725;
				Match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValuePairsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementValuePairContext[] elementValuePair() {
			return GetRuleContexts<ElementValuePairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementValuePairContext elementValuePair(int i) {
			return GetRuleContext<ElementValuePairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaParserLabeled.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaParserLabeled.COMMA, i);
		}
		public ElementValuePairsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValuePairs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterElementValuePairs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitElementValuePairs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValuePairs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValuePairsContext elementValuePairs() {
		ElementValuePairsContext _localctx = new ElementValuePairsContext(Context, State);
		EnterRule(_localctx, 104, RULE_elementValuePairs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 728;
			elementValuePair();
			State = 733;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 729;
				Match(COMMA);
				State = 730;
				elementValuePair();
				}
				}
				State = 735;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValuePairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JavaParserLabeled.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(JavaParserLabeled.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementValueContext elementValue() {
			return GetRuleContext<ElementValueContext>(0);
		}
		public ElementValuePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValuePair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterElementValuePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitElementValuePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValuePair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValuePairContext elementValuePair() {
		ElementValuePairContext _localctx = new ElementValuePairContext(Context, State);
		EnterRule(_localctx, 106, RULE_elementValuePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 736;
			Match(IDENTIFIER);
			State = 737;
			Match(ASSIGN);
			State = 738;
			elementValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValueContext : ParserRuleContext {
		public ElementValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValue; } }
	 
		public ElementValueContext() { }
		public virtual void CopyFrom(ElementValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ElementValue0Context : ElementValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ElementValue0Context(ElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterElementValue0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitElementValue0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValue0(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ElementValue2Context : ElementValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementValueArrayInitializerContext elementValueArrayInitializer() {
			return GetRuleContext<ElementValueArrayInitializerContext>(0);
		}
		public ElementValue2Context(ElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterElementValue2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitElementValue2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValue2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ElementValue1Context : ElementValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ElementValue1Context(ElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterElementValue1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitElementValue1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValue1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValueContext elementValue() {
		ElementValueContext _localctx = new ElementValueContext(Context, State);
		EnterRule(_localctx, 108, RULE_elementValue);
		try {
			State = 743;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				_localctx = new ElementValue0Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 740;
				expression(0);
				}
				break;
			case 2:
				_localctx = new ElementValue1Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 741;
				annotation();
				}
				break;
			case 3:
				_localctx = new ElementValue2Context(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 742;
				elementValueArrayInitializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValueArrayInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(JavaParserLabeled.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(JavaParserLabeled.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementValueContext[] elementValue() {
			return GetRuleContexts<ElementValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementValueContext elementValue(int i) {
			return GetRuleContext<ElementValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaParserLabeled.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaParserLabeled.COMMA, i);
		}
		public ElementValueArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValueArrayInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterElementValueArrayInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitElementValueArrayInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValueArrayInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValueArrayInitializerContext elementValueArrayInitializer() {
		ElementValueArrayInitializerContext _localctx = new ElementValueArrayInitializerContext(Context, State);
		EnterRule(_localctx, 110, RULE_elementValueArrayInitializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 745;
			Match(LBRACE);
			State = 754;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << DECIMAL_LITERAL) | (1L << HEX_LITERAL) | (1L << OCT_LITERAL) | (1L << BINARY_LITERAL) | (1L << FLOAT_LITERAL) | (1L << HEX_FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << CHAR_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << LPAREN) | (1L << LBRACE))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (LT - 72)) | (1L << (BANG - 72)) | (1L << (TILDE - 72)) | (1L << (INC - 72)) | (1L << (DEC - 72)) | (1L << (ADD - 72)) | (1L << (SUB - 72)) | (1L << (AT - 72)) | (1L << (IDENTIFIER - 72)))) != 0)) {
				{
				State = 746;
				elementValue();
				State = 751;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,82,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 747;
						Match(COMMA);
						State = 748;
						elementValue();
						}
						} 
					}
					State = 753;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,82,Context);
				}
				}
			}

			State = 757;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 756;
				Match(COMMA);
				}
			}

			State = 759;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(JavaParserLabeled.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERFACE() { return GetToken(JavaParserLabeled.INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JavaParserLabeled.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationTypeBodyContext annotationTypeBody() {
			return GetRuleContext<AnnotationTypeBodyContext>(0);
		}
		public AnnotationTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterAnnotationTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitAnnotationTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
		AnnotationTypeDeclarationContext _localctx = new AnnotationTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 112, RULE_annotationTypeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 761;
			Match(AT);
			State = 762;
			Match(INTERFACE);
			State = 763;
			Match(IDENTIFIER);
			State = 764;
			annotationTypeBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(JavaParserLabeled.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(JavaParserLabeled.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationTypeElementDeclarationContext[] annotationTypeElementDeclaration() {
			return GetRuleContexts<AnnotationTypeElementDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationTypeElementDeclarationContext annotationTypeElementDeclaration(int i) {
			return GetRuleContext<AnnotationTypeElementDeclarationContext>(i);
		}
		public AnnotationTypeBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterAnnotationTypeBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitAnnotationTypeBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeBodyContext annotationTypeBody() {
		AnnotationTypeBodyContext _localctx = new AnnotationTypeBodyContext(Context, State);
		EnterRule(_localctx, 114, RULE_annotationTypeBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 766;
			Match(LBRACE);
			State = 770;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << INTERFACE) | (1L << LONG) | (1L << NATIVE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SYNCHRONIZED) | (1L << TRANSIENT) | (1L << VOLATILE))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (SEMI - 67)) | (1L << (AT - 67)) | (1L << (IDENTIFIER - 67)))) != 0)) {
				{
				{
				State = 767;
				annotationTypeElementDeclaration();
				}
				}
				State = 772;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 773;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeElementDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationTypeElementRestContext annotationTypeElementRest() {
			return GetRuleContext<AnnotationTypeElementRestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParserLabeled.SEMI, 0); }
		public AnnotationTypeElementDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeElementDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterAnnotationTypeElementDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitAnnotationTypeElementDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeElementDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeElementDeclarationContext annotationTypeElementDeclaration() {
		AnnotationTypeElementDeclarationContext _localctx = new AnnotationTypeElementDeclarationContext(Context, State);
		EnterRule(_localctx, 116, RULE_annotationTypeElementDeclaration);
		try {
			int _alt;
			State = 783;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABSTRACT:
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CLASS:
			case DOUBLE:
			case ENUM:
			case FINAL:
			case FLOAT:
			case INT:
			case INTERFACE:
			case LONG:
			case NATIVE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case SHORT:
			case STATIC:
			case STRICTFP:
			case SYNCHRONIZED:
			case TRANSIENT:
			case VOLATILE:
			case AT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 778;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 775;
						modifier();
						}
						} 
					}
					State = 780;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
				}
				State = 781;
				annotationTypeElementRest();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 782;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeElementRestContext : ParserRuleContext {
		public AnnotationTypeElementRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeElementRest; } }
	 
		public AnnotationTypeElementRestContext() { }
		public virtual void CopyFrom(AnnotationTypeElementRestContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AnnotationTypeElementRest0Context : AnnotationTypeElementRestContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationMethodOrConstantRestContext annotationMethodOrConstantRest() {
			return GetRuleContext<AnnotationMethodOrConstantRestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParserLabeled.SEMI, 0); }
		public AnnotationTypeElementRest0Context(AnnotationTypeElementRestContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterAnnotationTypeElementRest0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitAnnotationTypeElementRest0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeElementRest0(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AnnotationTypeElementRest1Context : AnnotationTypeElementRestContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParserLabeled.SEMI, 0); }
		public AnnotationTypeElementRest1Context(AnnotationTypeElementRestContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterAnnotationTypeElementRest1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitAnnotationTypeElementRest1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeElementRest1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AnnotationTypeElementRest2Context : AnnotationTypeElementRestContext {
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParserLabeled.SEMI, 0); }
		public AnnotationTypeElementRest2Context(AnnotationTypeElementRestContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterAnnotationTypeElementRest2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitAnnotationTypeElementRest2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeElementRest2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AnnotationTypeElementRest3Context : AnnotationTypeElementRestContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParserLabeled.SEMI, 0); }
		public AnnotationTypeElementRest3Context(AnnotationTypeElementRestContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterAnnotationTypeElementRest3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitAnnotationTypeElementRest3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeElementRest3(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AnnotationTypeElementRest4Context : AnnotationTypeElementRestContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
			return GetRuleContext<AnnotationTypeDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParserLabeled.SEMI, 0); }
		public AnnotationTypeElementRest4Context(AnnotationTypeElementRestContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterAnnotationTypeElementRest4(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitAnnotationTypeElementRest4(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeElementRest4(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeElementRestContext annotationTypeElementRest() {
		AnnotationTypeElementRestContext _localctx = new AnnotationTypeElementRestContext(Context, State);
		EnterRule(_localctx, 118, RULE_annotationTypeElementRest);
		try {
			State = 805;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
			case 1:
				_localctx = new AnnotationTypeElementRest0Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 785;
				typeType();
				State = 786;
				annotationMethodOrConstantRest();
				State = 787;
				Match(SEMI);
				}
				break;
			case 2:
				_localctx = new AnnotationTypeElementRest1Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 789;
				classDeclaration();
				State = 791;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
				case 1:
					{
					State = 790;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new AnnotationTypeElementRest2Context(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 793;
				interfaceDeclaration();
				State = 795;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
				case 1:
					{
					State = 794;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new AnnotationTypeElementRest3Context(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 797;
				enumDeclaration();
				State = 799;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
				case 1:
					{
					State = 798;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new AnnotationTypeElementRest4Context(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 801;
				annotationTypeDeclaration();
				State = 803;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
				case 1:
					{
					State = 802;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationMethodOrConstantRestContext : ParserRuleContext {
		public AnnotationMethodOrConstantRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationMethodOrConstantRest; } }
	 
		public AnnotationMethodOrConstantRestContext() { }
		public virtual void CopyFrom(AnnotationMethodOrConstantRestContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AnnotationMethodOrConstantRest0Context : AnnotationMethodOrConstantRestContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationMethodRestContext annotationMethodRest() {
			return GetRuleContext<AnnotationMethodRestContext>(0);
		}
		public AnnotationMethodOrConstantRest0Context(AnnotationMethodOrConstantRestContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterAnnotationMethodOrConstantRest0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitAnnotationMethodOrConstantRest0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationMethodOrConstantRest0(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AnnotationMethodOrConstantRest1Context : AnnotationMethodOrConstantRestContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationConstantRestContext annotationConstantRest() {
			return GetRuleContext<AnnotationConstantRestContext>(0);
		}
		public AnnotationMethodOrConstantRest1Context(AnnotationMethodOrConstantRestContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterAnnotationMethodOrConstantRest1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitAnnotationMethodOrConstantRest1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationMethodOrConstantRest1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationMethodOrConstantRestContext annotationMethodOrConstantRest() {
		AnnotationMethodOrConstantRestContext _localctx = new AnnotationMethodOrConstantRestContext(Context, State);
		EnterRule(_localctx, 120, RULE_annotationMethodOrConstantRest);
		try {
			State = 809;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
			case 1:
				_localctx = new AnnotationMethodOrConstantRest0Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 807;
				annotationMethodRest();
				}
				break;
			case 2:
				_localctx = new AnnotationMethodOrConstantRest1Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 808;
				annotationConstantRest();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationMethodRestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JavaParserLabeled.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaParserLabeled.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaParserLabeled.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		public AnnotationMethodRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationMethodRest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterAnnotationMethodRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitAnnotationMethodRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationMethodRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationMethodRestContext annotationMethodRest() {
		AnnotationMethodRestContext _localctx = new AnnotationMethodRestContext(Context, State);
		EnterRule(_localctx, 122, RULE_annotationMethodRest);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 811;
			Match(IDENTIFIER);
			State = 812;
			Match(LPAREN);
			State = 813;
			Match(RPAREN);
			State = 815;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 814;
				defaultValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationConstantRestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorsContext variableDeclarators() {
			return GetRuleContext<VariableDeclaratorsContext>(0);
		}
		public AnnotationConstantRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationConstantRest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterAnnotationConstantRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitAnnotationConstantRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationConstantRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationConstantRestContext annotationConstantRest() {
		AnnotationConstantRestContext _localctx = new AnnotationConstantRestContext(Context, State);
		EnterRule(_localctx, 124, RULE_annotationConstantRest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 817;
			variableDeclarators();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(JavaParserLabeled.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementValueContext elementValue() {
			return GetRuleContext<ElementValueContext>(0);
		}
		public DefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterDefaultValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitDefaultValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultValueContext defaultValue() {
		DefaultValueContext _localctx = new DefaultValueContext(Context, State);
		EnterRule(_localctx, 126, RULE_defaultValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 819;
			Match(DEFAULT);
			State = 820;
			elementValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(JavaParserLabeled.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(JavaParserLabeled.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 128, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 822;
			Match(LBRACE);
			State = 826;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASSERT) | (1L << BOOLEAN) | (1L << BREAK) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONTINUE) | (1L << DO) | (1L << DOUBLE) | (1L << FINAL) | (1L << FLOAT) | (1L << FOR) | (1L << IF) | (1L << INT) | (1L << INTERFACE) | (1L << LONG) | (1L << NEW) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << RETURN) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SUPER) | (1L << SWITCH) | (1L << SYNCHRONIZED) | (1L << THIS) | (1L << THROW) | (1L << TRY) | (1L << VOID) | (1L << WHILE) | (1L << DECIMAL_LITERAL) | (1L << HEX_LITERAL) | (1L << OCT_LITERAL) | (1L << BINARY_LITERAL) | (1L << FLOAT_LITERAL) | (1L << HEX_FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << CHAR_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << LPAREN) | (1L << LBRACE))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (SEMI - 67)) | (1L << (LT - 67)) | (1L << (BANG - 67)) | (1L << (TILDE - 67)) | (1L << (INC - 67)) | (1L << (DEC - 67)) | (1L << (ADD - 67)) | (1L << (SUB - 67)) | (1L << (AT - 67)) | (1L << (IDENTIFIER - 67)))) != 0)) {
				{
				{
				State = 823;
				blockStatement();
				}
				}
				State = 828;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 829;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
	 
		public BlockStatementContext() { }
		public virtual void CopyFrom(BlockStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BlockStatement1Context : BlockStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public BlockStatement1Context(BlockStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterBlockStatement1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitBlockStatement1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStatement0Context : BlockStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParserLabeled.SEMI, 0); }
		public BlockStatement0Context(BlockStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterBlockStatement0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitBlockStatement0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement0(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStatement2Context : BlockStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public LocalTypeDeclarationContext localTypeDeclaration() {
			return GetRuleContext<LocalTypeDeclarationContext>(0);
		}
		public BlockStatement2Context(BlockStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterBlockStatement2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitBlockStatement2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 130, RULE_blockStatement);
		try {
			State = 836;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
			case 1:
				_localctx = new BlockStatement0Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 831;
				localVariableDeclaration();
				State = 832;
				Match(SEMI);
				}
				break;
			case 2:
				_localctx = new BlockStatement1Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 834;
				statement();
				}
				break;
			case 3:
				_localctx = new BlockStatement2Context(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 835;
				localTypeDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorsContext variableDeclarators() {
			return GetRuleContext<VariableDeclaratorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext localVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 132, RULE_localVariableDeclaration);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 841;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,97,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 838;
					variableModifier();
					}
					} 
				}
				State = 843;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,97,Context);
			}
			State = 844;
			typeType();
			State = 845;
			variableDeclarators();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceModifierContext[] classOrInterfaceModifier() {
			return GetRuleContexts<ClassOrInterfaceModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceModifierContext classOrInterfaceModifier(int i) {
			return GetRuleContext<ClassOrInterfaceModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParserLabeled.SEMI, 0); }
		public LocalTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterLocalTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitLocalTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalTypeDeclarationContext localTypeDeclaration() {
		LocalTypeDeclarationContext _localctx = new LocalTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 134, RULE_localTypeDeclaration);
		int _la;
		try {
			State = 858;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABSTRACT:
			case CLASS:
			case FINAL:
			case INTERFACE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case STATIC:
			case STRICTFP:
			case AT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 850;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << FINAL) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC) | (1L << STRICTFP))) != 0) || _la==AT || _la==IDENTIFIER) {
					{
					{
					State = 847;
					classOrInterfaceModifier();
					}
					}
					State = 852;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 855;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CLASS:
					{
					State = 853;
					classDeclaration();
					}
					break;
				case INTERFACE:
					{
					State = 854;
					interfaceDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 857;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Statement14Context : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParserLabeled.SEMI, 0); }
		public Statement14Context(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterStatement14(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitStatement14(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement14(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Statement15Context : StatementContext {
		public ExpressionContext statementExpression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParserLabeled.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement15Context(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterStatement15(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitStatement15(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement15(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Statement12Context : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(JavaParserLabeled.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParserLabeled.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JavaParserLabeled.IDENTIFIER, 0); }
		public Statement12Context(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterStatement12(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitStatement12(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement12(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Statement13Context : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(JavaParserLabeled.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParserLabeled.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JavaParserLabeled.IDENTIFIER, 0); }
		public Statement13Context(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterStatement13(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitStatement13(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement13(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Statement9Context : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNCHRONIZED() { return GetToken(JavaParserLabeled.SYNCHRONIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParExpressionContext parExpression() {
			return GetRuleContext<ParExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Statement9Context(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterStatement9(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitStatement9(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement9(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Statement7Context : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY() { return GetToken(JavaParserLabeled.TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ResourceSpecificationContext resourceSpecification() {
			return GetRuleContext<ResourceSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchClauseContext[] catchClause() {
			return GetRuleContexts<CatchClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchClauseContext catchClause(int i) {
			return GetRuleContext<CatchClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FinallyBlockContext finallyBlock() {
			return GetRuleContext<FinallyBlockContext>(0);
		}
		public Statement7Context(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterStatement7(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitStatement7(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement7(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Statement16Context : StatementContext {
		public IToken identifierLabel;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(JavaParserLabeled.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JavaParserLabeled.IDENTIFIER, 0); }
		public Statement16Context(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterStatement16(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitStatement16(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement16(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Statement8Context : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(JavaParserLabeled.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParExpressionContext parExpression() {
			return GetRuleContext<ParExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(JavaParserLabeled.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(JavaParserLabeled.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBlockStatementGroupContext[] switchBlockStatementGroup() {
			return GetRuleContexts<SwitchBlockStatementGroupContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBlockStatementGroupContext switchBlockStatementGroup(int i) {
			return GetRuleContext<SwitchBlockStatementGroupContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		public Statement8Context(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterStatement8(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitStatement8(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement8(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Statement5Context : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(JavaParserLabeled.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(JavaParserLabeled.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParExpressionContext parExpression() {
			return GetRuleContext<ParExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParserLabeled.SEMI, 0); }
		public Statement5Context(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterStatement5(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitStatement5(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement5(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Statement6Context : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY() { return GetToken(JavaParserLabeled.TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FinallyBlockContext finallyBlock() {
			return GetRuleContext<FinallyBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchClauseContext[] catchClause() {
			return GetRuleContexts<CatchClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CatchClauseContext catchClause(int i) {
			return GetRuleContext<CatchClauseContext>(i);
		}
		public Statement6Context(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterStatement6(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitStatement6(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement6(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Statement3Context : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(JavaParserLabeled.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaParserLabeled.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForControlContext forControl() {
			return GetRuleContext<ForControlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaParserLabeled.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public Statement3Context(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterStatement3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitStatement3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement3(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Statement4Context : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(JavaParserLabeled.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParExpressionContext parExpression() {
			return GetRuleContext<ParExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public Statement4Context(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterStatement4(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitStatement4(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement4(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Statement1Context : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERT() { return GetToken(JavaParserLabeled.ASSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParserLabeled.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(JavaParserLabeled.COLON, 0); }
		public Statement1Context(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterStatement1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitStatement1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Statement2Context : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(JavaParserLabeled.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParExpressionContext parExpression() {
			return GetRuleContext<ParExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(JavaParserLabeled.ELSE, 0); }
		public Statement2Context(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterStatement2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitStatement2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Statement0Context : StatementContext {
		public BlockContext blockLabel;
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Statement0Context(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterStatement0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitStatement0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement0(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Statement10Context : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(JavaParserLabeled.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParserLabeled.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement10Context(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterStatement10(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitStatement10(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement10(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Statement11Context : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROW() { return GetToken(JavaParserLabeled.THROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParserLabeled.SEMI, 0); }
		public Statement11Context(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterStatement11(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitStatement11(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement11(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 136, RULE_statement);
		int _la;
		try {
			int _alt;
			State = 964;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
			case 1:
				_localctx = new Statement0Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 860;
				((Statement0Context)_localctx).blockLabel = block();
				}
				break;
			case 2:
				_localctx = new Statement1Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 861;
				Match(ASSERT);
				State = 862;
				expression(0);
				State = 865;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLON) {
					{
					State = 863;
					Match(COLON);
					State = 864;
					expression(0);
					}
				}

				State = 867;
				Match(SEMI);
				}
				break;
			case 3:
				_localctx = new Statement2Context(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 869;
				Match(IF);
				State = 870;
				parExpression();
				State = 871;
				statement();
				State = 874;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
				case 1:
					{
					State = 872;
					Match(ELSE);
					State = 873;
					statement();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new Statement3Context(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 876;
				Match(FOR);
				State = 877;
				Match(LPAREN);
				State = 878;
				forControl();
				State = 879;
				Match(RPAREN);
				State = 880;
				statement();
				}
				break;
			case 5:
				_localctx = new Statement4Context(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 882;
				Match(WHILE);
				State = 883;
				parExpression();
				State = 884;
				statement();
				}
				break;
			case 6:
				_localctx = new Statement5Context(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 886;
				Match(DO);
				State = 887;
				statement();
				State = 888;
				Match(WHILE);
				State = 889;
				parExpression();
				State = 890;
				Match(SEMI);
				}
				break;
			case 7:
				_localctx = new Statement6Context(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 892;
				Match(TRY);
				State = 893;
				block();
				State = 903;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CATCH:
					{
					State = 895;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 894;
						catchClause();
						}
						}
						State = 897;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==CATCH );
					State = 900;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==FINALLY) {
						{
						State = 899;
						finallyBlock();
						}
					}

					}
					break;
				case FINALLY:
					{
					State = 902;
					finallyBlock();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 8:
				_localctx = new Statement7Context(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 905;
				Match(TRY);
				State = 906;
				resourceSpecification();
				State = 907;
				block();
				State = 911;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==CATCH) {
					{
					{
					State = 908;
					catchClause();
					}
					}
					State = 913;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 915;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FINALLY) {
					{
					State = 914;
					finallyBlock();
					}
				}

				}
				break;
			case 9:
				_localctx = new Statement8Context(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 917;
				Match(SWITCH);
				State = 918;
				parExpression();
				State = 919;
				Match(LBRACE);
				State = 923;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,108,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 920;
						switchBlockStatementGroup();
						}
						} 
					}
					State = 925;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,108,Context);
				}
				State = 929;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==CASE || _la==DEFAULT) {
					{
					{
					State = 926;
					switchLabel();
					}
					}
					State = 931;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 932;
				Match(RBRACE);
				}
				break;
			case 10:
				_localctx = new Statement9Context(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 934;
				Match(SYNCHRONIZED);
				State = 935;
				parExpression();
				State = 936;
				block();
				}
				break;
			case 11:
				_localctx = new Statement10Context(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 938;
				Match(RETURN);
				State = 940;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << DECIMAL_LITERAL) | (1L << HEX_LITERAL) | (1L << OCT_LITERAL) | (1L << BINARY_LITERAL) | (1L << FLOAT_LITERAL) | (1L << HEX_FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << CHAR_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << LPAREN))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (LT - 72)) | (1L << (BANG - 72)) | (1L << (TILDE - 72)) | (1L << (INC - 72)) | (1L << (DEC - 72)) | (1L << (ADD - 72)) | (1L << (SUB - 72)) | (1L << (AT - 72)) | (1L << (IDENTIFIER - 72)))) != 0)) {
					{
					State = 939;
					expression(0);
					}
				}

				State = 942;
				Match(SEMI);
				}
				break;
			case 12:
				_localctx = new Statement11Context(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 943;
				Match(THROW);
				State = 944;
				expression(0);
				State = 945;
				Match(SEMI);
				}
				break;
			case 13:
				_localctx = new Statement12Context(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 947;
				Match(BREAK);
				State = 949;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 948;
					Match(IDENTIFIER);
					}
				}

				State = 951;
				Match(SEMI);
				}
				break;
			case 14:
				_localctx = new Statement13Context(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 952;
				Match(CONTINUE);
				State = 954;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 953;
					Match(IDENTIFIER);
					}
				}

				State = 956;
				Match(SEMI);
				}
				break;
			case 15:
				_localctx = new Statement14Context(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 957;
				Match(SEMI);
				}
				break;
			case 16:
				_localctx = new Statement15Context(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 958;
				((Statement15Context)_localctx).statementExpression = expression(0);
				State = 959;
				Match(SEMI);
				}
				break;
			case 17:
				_localctx = new Statement16Context(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 961;
				((Statement16Context)_localctx).identifierLabel = Match(IDENTIFIER);
				State = 962;
				Match(COLON);
				State = 963;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATCH() { return GetToken(JavaParserLabeled.CATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaParserLabeled.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CatchTypeContext catchType() {
			return GetRuleContext<CatchTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JavaParserLabeled.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaParserLabeled.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public CatchClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterCatchClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitCatchClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchClauseContext catchClause() {
		CatchClauseContext _localctx = new CatchClauseContext(Context, State);
		EnterRule(_localctx, 138, RULE_catchClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 966;
			Match(CATCH);
			State = 967;
			Match(LPAREN);
			State = 971;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,114,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 968;
					variableModifier();
					}
					} 
				}
				State = 973;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,114,Context);
			}
			State = 974;
			catchType();
			State = 975;
			Match(IDENTIFIER);
			State = 976;
			Match(RPAREN);
			State = 977;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BITOR() { return GetTokens(JavaParserLabeled.BITOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITOR(int i) {
			return GetToken(JavaParserLabeled.BITOR, i);
		}
		public CatchTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterCatchType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitCatchType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchTypeContext catchType() {
		CatchTypeContext _localctx = new CatchTypeContext(Context, State);
		EnterRule(_localctx, 140, RULE_catchType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 979;
			qualifiedName();
			State = 984;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BITOR) {
				{
				{
				State = 980;
				Match(BITOR);
				State = 981;
				qualifiedName();
				}
				}
				State = 986;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINALLY() { return GetToken(JavaParserLabeled.FINALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FinallyBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterFinallyBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitFinallyBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinallyBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinallyBlockContext finallyBlock() {
		FinallyBlockContext _localctx = new FinallyBlockContext(Context, State);
		EnterRule(_localctx, 142, RULE_finallyBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 987;
			Match(FINALLY);
			State = 988;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaParserLabeled.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ResourcesContext resources() {
			return GetRuleContext<ResourcesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaParserLabeled.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(JavaParserLabeled.SEMI, 0); }
		public ResourceSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterResourceSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitResourceSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResourceSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceSpecificationContext resourceSpecification() {
		ResourceSpecificationContext _localctx = new ResourceSpecificationContext(Context, State);
		EnterRule(_localctx, 144, RULE_resourceSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 990;
			Match(LPAREN);
			State = 991;
			resources();
			State = 993;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI) {
				{
				State = 992;
				Match(SEMI);
				}
			}

			State = 995;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourcesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ResourceContext[] resource() {
			return GetRuleContexts<ResourceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResourceContext resource(int i) {
			return GetRuleContext<ResourceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(JavaParserLabeled.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(JavaParserLabeled.SEMI, i);
		}
		public ResourcesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resources; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterResources(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitResources(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResources(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourcesContext resources() {
		ResourcesContext _localctx = new ResourcesContext(Context, State);
		EnterRule(_localctx, 146, RULE_resources);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 997;
			resource();
			State = 1002;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,117,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 998;
					Match(SEMI);
					State = 999;
					resource();
					}
					} 
				}
				State = 1004;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,117,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(JavaParserLabeled.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public ResourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterResource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitResource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceContext resource() {
		ResourceContext _localctx = new ResourceContext(Context, State);
		EnterRule(_localctx, 148, RULE_resource);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1008;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,118,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1005;
					variableModifier();
					}
					} 
				}
				State = 1010;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,118,Context);
			}
			State = 1011;
			classOrInterfaceType();
			State = 1012;
			variableDeclaratorId();
			State = 1013;
			Match(ASSIGN);
			State = 1014;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockStatementGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public SwitchBlockStatementGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlockStatementGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterSwitchBlockStatementGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitSwitchBlockStatementGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchBlockStatementGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockStatementGroupContext switchBlockStatementGroup() {
		SwitchBlockStatementGroupContext _localctx = new SwitchBlockStatementGroupContext(Context, State);
		EnterRule(_localctx, 150, RULE_switchBlockStatementGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1017;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1016;
				switchLabel();
				}
				}
				State = 1019;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CASE || _la==DEFAULT );
			State = 1022;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1021;
				blockStatement();
				}
				}
				State = 1024;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASSERT) | (1L << BOOLEAN) | (1L << BREAK) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONTINUE) | (1L << DO) | (1L << DOUBLE) | (1L << FINAL) | (1L << FLOAT) | (1L << FOR) | (1L << IF) | (1L << INT) | (1L << INTERFACE) | (1L << LONG) | (1L << NEW) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << RETURN) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SUPER) | (1L << SWITCH) | (1L << SYNCHRONIZED) | (1L << THIS) | (1L << THROW) | (1L << TRY) | (1L << VOID) | (1L << WHILE) | (1L << DECIMAL_LITERAL) | (1L << HEX_LITERAL) | (1L << OCT_LITERAL) | (1L << BINARY_LITERAL) | (1L << FLOAT_LITERAL) | (1L << HEX_FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << CHAR_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << LPAREN) | (1L << LBRACE))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (SEMI - 67)) | (1L << (LT - 67)) | (1L << (BANG - 67)) | (1L << (TILDE - 67)) | (1L << (INC - 67)) | (1L << (DEC - 67)) | (1L << (ADD - 67)) | (1L << (SUB - 67)) | (1L << (AT - 67)) | (1L << (IDENTIFIER - 67)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabelContext : ParserRuleContext {
		public ExpressionContext constantExpression;
		public IToken enumConstantName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(JavaParserLabeled.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(JavaParserLabeled.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JavaParserLabeled.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(JavaParserLabeled.DEFAULT, 0); }
		public SwitchLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchLabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterSwitchLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitSwitchLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabelContext switchLabel() {
		SwitchLabelContext _localctx = new SwitchLabelContext(Context, State);
		EnterRule(_localctx, 152, RULE_switchLabel);
		try {
			State = 1034;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1026;
				Match(CASE);
				State = 1029;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
				case 1:
					{
					State = 1027;
					_localctx.constantExpression = expression(0);
					}
					break;
				case 2:
					{
					State = 1028;
					_localctx.enumConstantName = Match(IDENTIFIER);
					}
					break;
				}
				State = 1031;
				Match(COLON);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1032;
				Match(DEFAULT);
				State = 1033;
				Match(COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForControlContext : ParserRuleContext {
		public ForControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forControl; } }
	 
		public ForControlContext() { }
		public virtual void CopyFrom(ForControlContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ForControl0Context : ForControlContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnhancedForControlContext enhancedForControl() {
			return GetRuleContext<EnhancedForControlContext>(0);
		}
		public ForControl0Context(ForControlContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterForControl0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitForControl0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForControl0(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForControl1Context : ForControlContext {
		public ExpressionListContext forUpdate;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(JavaParserLabeled.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(JavaParserLabeled.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ForControl1Context(ForControlContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterForControl1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitForControl1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForControl1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForControlContext forControl() {
		ForControlContext _localctx = new ForControlContext(Context, State);
		EnterRule(_localctx, 154, RULE_forControl);
		int _la;
		try {
			State = 1048;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,126,Context) ) {
			case 1:
				_localctx = new ForControl0Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1036;
				enhancedForControl();
				}
				break;
			case 2:
				_localctx = new ForControl1Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1038;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << DECIMAL_LITERAL) | (1L << HEX_LITERAL) | (1L << OCT_LITERAL) | (1L << BINARY_LITERAL) | (1L << FLOAT_LITERAL) | (1L << HEX_FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << CHAR_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << LPAREN))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (LT - 72)) | (1L << (BANG - 72)) | (1L << (TILDE - 72)) | (1L << (INC - 72)) | (1L << (DEC - 72)) | (1L << (ADD - 72)) | (1L << (SUB - 72)) | (1L << (AT - 72)) | (1L << (IDENTIFIER - 72)))) != 0)) {
					{
					State = 1037;
					forInit();
					}
				}

				State = 1040;
				Match(SEMI);
				State = 1042;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << DECIMAL_LITERAL) | (1L << HEX_LITERAL) | (1L << OCT_LITERAL) | (1L << BINARY_LITERAL) | (1L << FLOAT_LITERAL) | (1L << HEX_FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << CHAR_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << LPAREN))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (LT - 72)) | (1L << (BANG - 72)) | (1L << (TILDE - 72)) | (1L << (INC - 72)) | (1L << (DEC - 72)) | (1L << (ADD - 72)) | (1L << (SUB - 72)) | (1L << (AT - 72)) | (1L << (IDENTIFIER - 72)))) != 0)) {
					{
					State = 1041;
					expression(0);
					}
				}

				State = 1044;
				Match(SEMI);
				State = 1046;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << DECIMAL_LITERAL) | (1L << HEX_LITERAL) | (1L << OCT_LITERAL) | (1L << BINARY_LITERAL) | (1L << FLOAT_LITERAL) | (1L << HEX_FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << CHAR_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << LPAREN))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (LT - 72)) | (1L << (BANG - 72)) | (1L << (TILDE - 72)) | (1L << (INC - 72)) | (1L << (DEC - 72)) | (1L << (ADD - 72)) | (1L << (SUB - 72)) | (1L << (AT - 72)) | (1L << (IDENTIFIER - 72)))) != 0)) {
					{
					State = 1045;
					((ForControl1Context)_localctx).forUpdate = expressionList();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitContext : ParserRuleContext {
		public ForInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInit; } }
	 
		public ForInitContext() { }
		public virtual void CopyFrom(ForInitContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ForInit1Context : ForInitContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ForInit1Context(ForInitContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterForInit1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitForInit1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInit1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForInit0Context : ForInitContext {
		[System.Diagnostics.DebuggerNonUserCode] public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public ForInit0Context(ForInitContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterForInit0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitForInit0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInit0(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitContext forInit() {
		ForInitContext _localctx = new ForInitContext(Context, State);
		EnterRule(_localctx, 156, RULE_forInit);
		try {
			State = 1052;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
			case 1:
				_localctx = new ForInit0Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1050;
				localVariableDeclaration();
				}
				break;
			case 2:
				_localctx = new ForInit1Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1051;
				expressionList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnhancedForControlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(JavaParserLabeled.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public EnhancedForControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enhancedForControl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterEnhancedForControl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitEnhancedForControl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnhancedForControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnhancedForControlContext enhancedForControl() {
		EnhancedForControlContext _localctx = new EnhancedForControlContext(Context, State);
		EnterRule(_localctx, 158, RULE_enhancedForControl);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1057;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,128,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1054;
					variableModifier();
					}
					} 
				}
				State = 1059;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,128,Context);
			}
			State = 1060;
			typeType();
			State = 1061;
			variableDeclaratorId();
			State = 1062;
			Match(COLON);
			State = 1063;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaParserLabeled.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaParserLabeled.RPAREN, 0); }
		public ParExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterParExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitParExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParExpressionContext parExpression() {
		ParExpressionContext _localctx = new ParExpressionContext(Context, State);
		EnterRule(_localctx, 160, RULE_parExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1065;
			Match(LPAREN);
			State = 1066;
			expression(0);
			State = 1067;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaParserLabeled.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaParserLabeled.COMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 162, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1069;
			expression(0);
			State = 1074;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1070;
				Match(COMMA);
				State = 1071;
				expression(0);
				}
				}
				State = 1076;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallContext : ParserRuleContext {
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
	 
		public MethodCallContext() { }
		public virtual void CopyFrom(MethodCallContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MethodCall0Context : MethodCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JavaParserLabeled.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaParserLabeled.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaParserLabeled.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public MethodCall0Context(MethodCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterMethodCall0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitMethodCall0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCall0(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodCall1Context : MethodCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(JavaParserLabeled.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaParserLabeled.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaParserLabeled.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public MethodCall1Context(MethodCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterMethodCall1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitMethodCall1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCall1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodCall2Context : MethodCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(JavaParserLabeled.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaParserLabeled.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaParserLabeled.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public MethodCall2Context(MethodCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterMethodCall2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitMethodCall2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCall2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(Context, State);
		EnterRule(_localctx, 164, RULE_methodCall);
		int _la;
		try {
			State = 1095;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				_localctx = new MethodCall0Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1077;
				Match(IDENTIFIER);
				State = 1078;
				Match(LPAREN);
				State = 1080;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << DECIMAL_LITERAL) | (1L << HEX_LITERAL) | (1L << OCT_LITERAL) | (1L << BINARY_LITERAL) | (1L << FLOAT_LITERAL) | (1L << HEX_FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << CHAR_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << LPAREN))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (LT - 72)) | (1L << (BANG - 72)) | (1L << (TILDE - 72)) | (1L << (INC - 72)) | (1L << (DEC - 72)) | (1L << (ADD - 72)) | (1L << (SUB - 72)) | (1L << (AT - 72)) | (1L << (IDENTIFIER - 72)))) != 0)) {
					{
					State = 1079;
					expressionList();
					}
				}

				State = 1082;
				Match(RPAREN);
				}
				break;
			case THIS:
				_localctx = new MethodCall1Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1083;
				Match(THIS);
				State = 1084;
				Match(LPAREN);
				State = 1086;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << DECIMAL_LITERAL) | (1L << HEX_LITERAL) | (1L << OCT_LITERAL) | (1L << BINARY_LITERAL) | (1L << FLOAT_LITERAL) | (1L << HEX_FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << CHAR_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << LPAREN))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (LT - 72)) | (1L << (BANG - 72)) | (1L << (TILDE - 72)) | (1L << (INC - 72)) | (1L << (DEC - 72)) | (1L << (ADD - 72)) | (1L << (SUB - 72)) | (1L << (AT - 72)) | (1L << (IDENTIFIER - 72)))) != 0)) {
					{
					State = 1085;
					expressionList();
					}
				}

				State = 1088;
				Match(RPAREN);
				}
				break;
			case SUPER:
				_localctx = new MethodCall2Context(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1089;
				Match(SUPER);
				State = 1090;
				Match(LPAREN);
				State = 1092;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << DECIMAL_LITERAL) | (1L << HEX_LITERAL) | (1L << OCT_LITERAL) | (1L << BINARY_LITERAL) | (1L << FLOAT_LITERAL) | (1L << HEX_FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << CHAR_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << LPAREN))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (LT - 72)) | (1L << (BANG - 72)) | (1L << (TILDE - 72)) | (1L << (INC - 72)) | (1L << (DEC - 72)) | (1L << (ADD - 72)) | (1L << (SUB - 72)) | (1L << (AT - 72)) | (1L << (IDENTIFIER - 72)))) != 0)) {
					{
					State = 1091;
					expressionList();
					}
				}

				State = 1094;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Expression8Context : ExpressionContext {
		public IToken prefix;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(JavaParserLabeled.TILDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(JavaParserLabeled.BANG, 0); }
		public Expression8Context(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterExpression8(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitExpression8(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression8(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expression10Context : ExpressionContext {
		public IToken bop;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(JavaParserLabeled.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(JavaParserLabeled.SUB, 0); }
		public Expression10Context(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterExpression10(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitExpression10(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression10(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expression9Context : ExpressionContext {
		public IToken bop;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(JavaParserLabeled.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(JavaParserLabeled.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(JavaParserLabeled.MOD, 0); }
		public Expression9Context(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterExpression9(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitExpression9(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression9(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expression12Context : ExpressionContext {
		public IToken bop;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(JavaParserLabeled.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(JavaParserLabeled.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(JavaParserLabeled.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(JavaParserLabeled.LT, 0); }
		public Expression12Context(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterExpression12(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitExpression12(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression12(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expression11Context : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LT() { return GetTokens(JavaParserLabeled.LT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT(int i) {
			return GetToken(JavaParserLabeled.LT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(JavaParserLabeled.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(JavaParserLabeled.GT, i);
		}
		public Expression11Context(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterExpression11(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitExpression11(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression11(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expression14Context : ExpressionContext {
		public IToken bop;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(JavaParserLabeled.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUAL() { return GetToken(JavaParserLabeled.NOTEQUAL, 0); }
		public Expression14Context(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterExpression14(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitExpression14(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression14(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expression13Context : ExpressionContext {
		public IToken bop;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANCEOF() { return GetToken(JavaParserLabeled.INSTANCEOF, 0); }
		public Expression13Context(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterExpression13(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitExpression13(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression13(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expression16Context : ExpressionContext {
		public IToken bop;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(JavaParserLabeled.CARET, 0); }
		public Expression16Context(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterExpression16(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitExpression16(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression16(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expression15Context : ExpressionContext {
		public IToken bop;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITAND() { return GetToken(JavaParserLabeled.BITAND, 0); }
		public Expression15Context(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterExpression15(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitExpression15(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression15(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expression18Context : ExpressionContext {
		public IToken bop;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(JavaParserLabeled.AND, 0); }
		public Expression18Context(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterExpression18(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitExpression18(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression18(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expression17Context : ExpressionContext {
		public IToken bop;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITOR() { return GetToken(JavaParserLabeled.BITOR, 0); }
		public Expression17Context(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterExpression17(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitExpression17(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression17(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expression19Context : ExpressionContext {
		public IToken bop;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(JavaParserLabeled.OR, 0); }
		public Expression19Context(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterExpression19(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitExpression19(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression19(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expression6Context : ExpressionContext {
		public IToken postfix;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(JavaParserLabeled.INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(JavaParserLabeled.DEC, 0); }
		public Expression6Context(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterExpression6(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitExpression6(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression6(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expression7Context : ExpressionContext {
		public IToken prefix;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(JavaParserLabeled.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(JavaParserLabeled.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC() { return GetToken(JavaParserLabeled.INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(JavaParserLabeled.DEC, 0); }
		public Expression7Context(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterExpression7(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitExpression7(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression7(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expression4Context : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(JavaParserLabeled.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CreatorContext creator() {
			return GetRuleContext<CreatorContext>(0);
		}
		public Expression4Context(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterExpression4(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitExpression4(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression4(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expression5Context : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaParserLabeled.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaParserLabeled.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public Expression5Context(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterExpression5(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitExpression5(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression5(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expression2Context : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(JavaParserLabeled.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(JavaParserLabeled.RBRACK, 0); }
		public Expression2Context(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterExpression2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitExpression2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expression3Context : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public Expression3Context(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterExpression3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitExpression3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression3(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expression0Context : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public Expression0Context(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterExpression0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitExpression0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression0(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expression1Context : ExpressionContext {
		public IToken bop;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(JavaParserLabeled.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JavaParserLabeled.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(JavaParserLabeled.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(JavaParserLabeled.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InnerCreatorContext innerCreator() {
			return GetRuleContext<InnerCreatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(JavaParserLabeled.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SuperSuffixContext superSuffix() {
			return GetRuleContext<SuperSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitGenericInvocationContext explicitGenericInvocation() {
			return GetRuleContext<ExplicitGenericInvocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		public Expression1Context(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterExpression1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitExpression1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expression21Context : ExpressionContext {
		public IToken bop;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(JavaParserLabeled.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_ASSIGN() { return GetToken(JavaParserLabeled.ADD_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_ASSIGN() { return GetToken(JavaParserLabeled.SUB_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL_ASSIGN() { return GetToken(JavaParserLabeled.MUL_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_ASSIGN() { return GetToken(JavaParserLabeled.DIV_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_ASSIGN() { return GetToken(JavaParserLabeled.AND_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_ASSIGN() { return GetToken(JavaParserLabeled.OR_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR_ASSIGN() { return GetToken(JavaParserLabeled.XOR_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSHIFT_ASSIGN() { return GetToken(JavaParserLabeled.RSHIFT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode URSHIFT_ASSIGN() { return GetToken(JavaParserLabeled.URSHIFT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSHIFT_ASSIGN() { return GetToken(JavaParserLabeled.LSHIFT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD_ASSIGN() { return GetToken(JavaParserLabeled.MOD_ASSIGN, 0); }
		public Expression21Context(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterExpression21(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitExpression21(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression21(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expression20Context : ExpressionContext {
		public IToken bop;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(JavaParserLabeled.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(JavaParserLabeled.QUESTION, 0); }
		public Expression20Context(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterExpression20(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitExpression20(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression20(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expression23Context : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLONCOLON() { return GetToken(JavaParserLabeled.COLONCOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JavaParserLabeled.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public Expression23Context(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterExpression23(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitExpression23(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression23(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expression22Context : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LambdaExpressionContext lambdaExpression() {
			return GetRuleContext<LambdaExpressionContext>(0);
		}
		public Expression22Context(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterExpression22(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitExpression22(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression22(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expression25Context : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLONCOLON() { return GetToken(JavaParserLabeled.COLONCOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(JavaParserLabeled.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public Expression25Context(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterExpression25(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitExpression25(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression25(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expression24Context : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLONCOLON() { return GetToken(JavaParserLabeled.COLONCOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JavaParserLabeled.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(JavaParserLabeled.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public Expression24Context(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterExpression24(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitExpression24(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression24(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 166;
		EnterRecursionRule(_localctx, 166, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1134;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,138,Context) ) {
			case 1:
				{
				_localctx = new Expression0Context(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1098;
				primary();
				}
				break;
			case 2:
				{
				_localctx = new Expression3Context(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1099;
				methodCall();
				}
				break;
			case 3:
				{
				_localctx = new Expression4Context(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1100;
				Match(NEW);
				State = 1101;
				creator();
				}
				break;
			case 4:
				{
				_localctx = new Expression5Context(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1102;
				Match(LPAREN);
				State = 1106;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,134,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1103;
						annotation();
						}
						} 
					}
					State = 1108;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,134,Context);
				}
				State = 1109;
				typeType();
				State = 1110;
				Match(RPAREN);
				State = 1111;
				expression(21);
				}
				break;
			case 5:
				{
				_localctx = new Expression7Context(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1113;
				((Expression7Context)_localctx).prefix = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (INC - 83)) | (1L << (DEC - 83)) | (1L << (ADD - 83)) | (1L << (SUB - 83)))) != 0)) ) {
					((Expression7Context)_localctx).prefix = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1114;
				expression(19);
				}
				break;
			case 6:
				{
				_localctx = new Expression8Context(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1115;
				((Expression8Context)_localctx).prefix = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BANG || _la==TILDE) ) {
					((Expression8Context)_localctx).prefix = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1116;
				expression(18);
				}
				break;
			case 7:
				{
				_localctx = new Expression22Context(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1117;
				lambdaExpression();
				}
				break;
			case 8:
				{
				_localctx = new Expression24Context(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1118;
				typeType();
				State = 1119;
				Match(COLONCOLON);
				State = 1125;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LT:
				case IDENTIFIER:
					{
					State = 1121;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LT) {
						{
						State = 1120;
						typeArguments();
						}
					}

					State = 1123;
					Match(IDENTIFIER);
					}
					break;
				case NEW:
					{
					State = 1124;
					Match(NEW);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				{
				_localctx = new Expression25Context(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1127;
				classType();
				State = 1128;
				Match(COLONCOLON);
				State = 1130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 1129;
					typeArguments();
					}
				}

				State = 1132;
				Match(NEW);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1216;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,144,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1214;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,143,Context) ) {
					case 1:
						{
						_localctx = new Expression9Context(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1136;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 1137;
						((Expression9Context)_localctx).bop = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (MUL - 87)) | (1L << (DIV - 87)) | (1L << (MOD - 87)))) != 0)) ) {
							((Expression9Context)_localctx).bop = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1138;
						expression(18);
						}
						break;
					case 2:
						{
						_localctx = new Expression10Context(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1139;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 1140;
						((Expression10Context)_localctx).bop = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ADD || _la==SUB) ) {
							((Expression10Context)_localctx).bop = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1141;
						expression(17);
						}
						break;
					case 3:
						{
						_localctx = new Expression11Context(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1142;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 1150;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,139,Context) ) {
						case 1:
							{
							State = 1143;
							Match(LT);
							State = 1144;
							Match(LT);
							}
							break;
						case 2:
							{
							State = 1145;
							Match(GT);
							State = 1146;
							Match(GT);
							State = 1147;
							Match(GT);
							}
							break;
						case 3:
							{
							State = 1148;
							Match(GT);
							State = 1149;
							Match(GT);
							}
							break;
						}
						State = 1152;
						expression(16);
						}
						break;
					case 4:
						{
						_localctx = new Expression12Context(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1153;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 1154;
						((Expression12Context)_localctx).bop = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (GT - 71)) | (1L << (LT - 71)) | (1L << (LE - 71)) | (1L << (GE - 71)))) != 0)) ) {
							((Expression12Context)_localctx).bop = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1155;
						expression(15);
						}
						break;
					case 5:
						{
						_localctx = new Expression14Context(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1156;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 1157;
						((Expression14Context)_localctx).bop = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==EQUAL || _la==NOTEQUAL) ) {
							((Expression14Context)_localctx).bop = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1158;
						expression(13);
						}
						break;
					case 6:
						{
						_localctx = new Expression15Context(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1159;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 1160;
						((Expression15Context)_localctx).bop = Match(BITAND);
						State = 1161;
						expression(12);
						}
						break;
					case 7:
						{
						_localctx = new Expression16Context(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1162;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 1163;
						((Expression16Context)_localctx).bop = Match(CARET);
						State = 1164;
						expression(11);
						}
						break;
					case 8:
						{
						_localctx = new Expression17Context(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1165;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 1166;
						((Expression17Context)_localctx).bop = Match(BITOR);
						State = 1167;
						expression(10);
						}
						break;
					case 9:
						{
						_localctx = new Expression18Context(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1168;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 1169;
						((Expression18Context)_localctx).bop = Match(AND);
						State = 1170;
						expression(9);
						}
						break;
					case 10:
						{
						_localctx = new Expression19Context(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1171;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 1172;
						((Expression19Context)_localctx).bop = Match(OR);
						State = 1173;
						expression(8);
						}
						break;
					case 11:
						{
						_localctx = new Expression20Context(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1174;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 1175;
						((Expression20Context)_localctx).bop = Match(QUESTION);
						State = 1176;
						expression(0);
						State = 1177;
						Match(COLON);
						State = 1178;
						expression(6);
						}
						break;
					case 12:
						{
						_localctx = new Expression21Context(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1180;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1181;
						((Expression21Context)_localctx).bop = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (ASSIGN - 70)) | (1L << (ADD_ASSIGN - 70)) | (1L << (SUB_ASSIGN - 70)) | (1L << (MUL_ASSIGN - 70)) | (1L << (DIV_ASSIGN - 70)) | (1L << (AND_ASSIGN - 70)) | (1L << (OR_ASSIGN - 70)) | (1L << (XOR_ASSIGN - 70)) | (1L << (MOD_ASSIGN - 70)) | (1L << (LSHIFT_ASSIGN - 70)) | (1L << (RSHIFT_ASSIGN - 70)) | (1L << (URSHIFT_ASSIGN - 70)))) != 0)) ) {
							((Expression21Context)_localctx).bop = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1182;
						expression(5);
						}
						break;
					case 13:
						{
						_localctx = new Expression1Context(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1183;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 1184;
						((Expression1Context)_localctx).bop = Match(DOT);
						State = 1196;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,141,Context) ) {
						case 1:
							{
							State = 1185;
							Match(IDENTIFIER);
							}
							break;
						case 2:
							{
							State = 1186;
							methodCall();
							}
							break;
						case 3:
							{
							State = 1187;
							Match(THIS);
							}
							break;
						case 4:
							{
							State = 1188;
							Match(NEW);
							State = 1190;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==LT) {
								{
								State = 1189;
								nonWildcardTypeArguments();
								}
							}

							State = 1192;
							innerCreator();
							}
							break;
						case 5:
							{
							State = 1193;
							Match(SUPER);
							State = 1194;
							superSuffix();
							}
							break;
						case 6:
							{
							State = 1195;
							explicitGenericInvocation();
							}
							break;
						}
						}
						break;
					case 14:
						{
						_localctx = new Expression2Context(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1198;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 1199;
						Match(LBRACK);
						State = 1200;
						expression(0);
						State = 1201;
						Match(RBRACK);
						}
						break;
					case 15:
						{
						_localctx = new Expression6Context(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1203;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 1204;
						((Expression6Context)_localctx).postfix = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==INC || _la==DEC) ) {
							((Expression6Context)_localctx).postfix = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 16:
						{
						_localctx = new Expression13Context(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1205;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 1206;
						((Expression13Context)_localctx).bop = Match(INSTANCEOF);
						State = 1207;
						typeType();
						}
						break;
					case 17:
						{
						_localctx = new Expression23Context(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1208;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1209;
						Match(COLONCOLON);
						State = 1211;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==LT) {
							{
							State = 1210;
							typeArguments();
							}
						}

						State = 1213;
						Match(IDENTIFIER);
						}
						break;
					}
					} 
				}
				State = 1218;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,144,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LambdaExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LambdaParametersContext lambdaParameters() {
			return GetRuleContext<LambdaParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(JavaParserLabeled.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LambdaBodyContext lambdaBody() {
			return GetRuleContext<LambdaBodyContext>(0);
		}
		public LambdaExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterLambdaExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitLambdaExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaExpressionContext lambdaExpression() {
		LambdaExpressionContext _localctx = new LambdaExpressionContext(Context, State);
		EnterRule(_localctx, 168, RULE_lambdaExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1219;
			lambdaParameters();
			State = 1220;
			Match(ARROW);
			State = 1221;
			lambdaBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaParametersContext : ParserRuleContext {
		public LambdaParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaParameters; } }
	 
		public LambdaParametersContext() { }
		public virtual void CopyFrom(LambdaParametersContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LambdaParameters0Context : LambdaParametersContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JavaParserLabeled.IDENTIFIER, 0); }
		public LambdaParameters0Context(LambdaParametersContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterLambdaParameters0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitLambdaParameters0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaParameters0(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LambdaParameters1Context : LambdaParametersContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaParserLabeled.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaParserLabeled.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public LambdaParameters1Context(LambdaParametersContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterLambdaParameters1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitLambdaParameters1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaParameters1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LambdaParameters2Context : LambdaParametersContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaParserLabeled.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(JavaParserLabeled.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(JavaParserLabeled.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaParserLabeled.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaParserLabeled.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaParserLabeled.COMMA, i);
		}
		public LambdaParameters2Context(LambdaParametersContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterLambdaParameters2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitLambdaParameters2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaParameters2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaParametersContext lambdaParameters() {
		LambdaParametersContext _localctx = new LambdaParametersContext(Context, State);
		EnterRule(_localctx, 170, RULE_lambdaParameters);
		int _la;
		try {
			State = 1239;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,147,Context) ) {
			case 1:
				_localctx = new LambdaParameters0Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1223;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				_localctx = new LambdaParameters1Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1224;
				Match(LPAREN);
				State = 1226;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << SHORT))) != 0) || _la==AT || _la==IDENTIFIER) {
					{
					State = 1225;
					formalParameterList();
					}
				}

				State = 1228;
				Match(RPAREN);
				}
				break;
			case 3:
				_localctx = new LambdaParameters2Context(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1229;
				Match(LPAREN);
				State = 1230;
				Match(IDENTIFIER);
				State = 1235;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1231;
					Match(COMMA);
					State = 1232;
					Match(IDENTIFIER);
					}
					}
					State = 1237;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1238;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaBodyContext : ParserRuleContext {
		public LambdaBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaBody; } }
	 
		public LambdaBodyContext() { }
		public virtual void CopyFrom(LambdaBodyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LambdaBody0Context : LambdaBodyContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LambdaBody0Context(LambdaBodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterLambdaBody0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitLambdaBody0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaBody0(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LambdaBody1Context : LambdaBodyContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LambdaBody1Context(LambdaBodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterLambdaBody1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitLambdaBody1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaBody1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaBodyContext lambdaBody() {
		LambdaBodyContext _localctx = new LambdaBodyContext(Context, State);
		EnterRule(_localctx, 172, RULE_lambdaBody);
		try {
			State = 1243;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case SHORT:
			case SUPER:
			case THIS:
			case VOID:
			case DECIMAL_LITERAL:
			case HEX_LITERAL:
			case OCT_LITERAL:
			case BINARY_LITERAL:
			case FLOAT_LITERAL:
			case HEX_FLOAT_LITERAL:
			case BOOL_LITERAL:
			case CHAR_LITERAL:
			case STRING_LITERAL:
			case NULL_LITERAL:
			case LPAREN:
			case LT:
			case BANG:
			case TILDE:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case AT:
			case IDENTIFIER:
				_localctx = new LambdaBody0Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1241;
				expression(0);
				}
				break;
			case LBRACE:
				_localctx = new LambdaBody1Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1242;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
	 
		public PrimaryContext() { }
		public virtual void CopyFrom(PrimaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Primary6Context : PrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitGenericInvocationSuffixContext explicitGenericInvocationSuffix() {
			return GetRuleContext<ExplicitGenericInvocationSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(JavaParserLabeled.THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public Primary6Context(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterPrimary6(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitPrimary6(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary6(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Primary2Context : PrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(JavaParserLabeled.SUPER, 0); }
		public Primary2Context(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterPrimary2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitPrimary2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Primary3Context : PrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public Primary3Context(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterPrimary3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitPrimary3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary3(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Primary4Context : PrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JavaParserLabeled.IDENTIFIER, 0); }
		public Primary4Context(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterPrimary4(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitPrimary4(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary4(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Primary5Context : PrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeOrVoidContext typeTypeOrVoid() {
			return GetRuleContext<TypeTypeOrVoidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(JavaParserLabeled.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(JavaParserLabeled.CLASS, 0); }
		public Primary5Context(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterPrimary5(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitPrimary5(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary5(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Primary0Context : PrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaParserLabeled.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaParserLabeled.RPAREN, 0); }
		public Primary0Context(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterPrimary0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitPrimary0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary0(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Primary1Context : PrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS() { return GetToken(JavaParserLabeled.THIS, 0); }
		public Primary1Context(PrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterPrimary1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitPrimary1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 174, RULE_primary);
		try {
			State = 1263;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,150,Context) ) {
			case 1:
				_localctx = new Primary0Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1245;
				Match(LPAREN);
				State = 1246;
				expression(0);
				State = 1247;
				Match(RPAREN);
				}
				break;
			case 2:
				_localctx = new Primary1Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1249;
				Match(THIS);
				}
				break;
			case 3:
				_localctx = new Primary2Context(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1250;
				Match(SUPER);
				}
				break;
			case 4:
				_localctx = new Primary3Context(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1251;
				literal();
				}
				break;
			case 5:
				_localctx = new Primary4Context(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1252;
				Match(IDENTIFIER);
				}
				break;
			case 6:
				_localctx = new Primary5Context(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1253;
				typeTypeOrVoid();
				State = 1254;
				Match(DOT);
				State = 1255;
				Match(CLASS);
				}
				break;
			case 7:
				_localctx = new Primary6Context(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1257;
				nonWildcardTypeArguments();
				State = 1261;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SUPER:
				case IDENTIFIER:
					{
					State = 1258;
					explicitGenericInvocationSuffix();
					}
					break;
				case THIS:
					{
					State = 1259;
					Match(THIS);
					State = 1260;
					arguments();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JavaParserLabeled.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(JavaParserLabeled.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ClassTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterClassType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitClassType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeContext classType() {
		ClassTypeContext _localctx = new ClassTypeContext(Context, State);
		EnterRule(_localctx, 176, RULE_classType);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1268;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,151,Context) ) {
			case 1:
				{
				State = 1265;
				classOrInterfaceType();
				State = 1266;
				Match(DOT);
				}
				break;
			}
			State = 1273;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,152,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1270;
					annotation();
					}
					} 
				}
				State = 1275;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,152,Context);
			}
			State = 1276;
			Match(IDENTIFIER);
			State = 1278;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 1277;
				typeArguments();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatorContext : ParserRuleContext {
		public CreatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_creator; } }
	 
		public CreatorContext() { }
		public virtual void CopyFrom(CreatorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Creator1Context : CreatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreatedNameContext createdName() {
			return GetRuleContext<CreatedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayCreatorRestContext arrayCreatorRest() {
			return GetRuleContext<ArrayCreatorRestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassCreatorRestContext classCreatorRest() {
			return GetRuleContext<ClassCreatorRestContext>(0);
		}
		public Creator1Context(CreatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterCreator1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitCreator1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreator1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Creator0Context : CreatorContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatedNameContext createdName() {
			return GetRuleContext<CreatedNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassCreatorRestContext classCreatorRest() {
			return GetRuleContext<ClassCreatorRestContext>(0);
		}
		public Creator0Context(CreatorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterCreator0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitCreator0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreator0(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreatorContext creator() {
		CreatorContext _localctx = new CreatorContext(Context, State);
		EnterRule(_localctx, 178, RULE_creator);
		try {
			State = 1289;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LT:
				_localctx = new Creator0Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1280;
				nonWildcardTypeArguments();
				State = 1281;
				createdName();
				State = 1282;
				classCreatorRest();
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case IDENTIFIER:
				_localctx = new Creator1Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1284;
				createdName();
				State = 1287;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LBRACK:
					{
					State = 1285;
					arrayCreatorRest();
					}
					break;
				case LPAREN:
					{
					State = 1286;
					classCreatorRest();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatedNameContext : ParserRuleContext {
		public CreatedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createdName; } }
	 
		public CreatedNameContext() { }
		public virtual void CopyFrom(CreatedNameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CreatedName0Context : CreatedNameContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(JavaParserLabeled.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(JavaParserLabeled.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsOrDiamondContext[] typeArgumentsOrDiamond() {
			return GetRuleContexts<TypeArgumentsOrDiamondContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond(int i) {
			return GetRuleContext<TypeArgumentsOrDiamondContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(JavaParserLabeled.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(JavaParserLabeled.DOT, i);
		}
		public CreatedName0Context(CreatedNameContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterCreatedName0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitCreatedName0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreatedName0(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CreatedName1Context : CreatedNameContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public CreatedName1Context(CreatedNameContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterCreatedName1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitCreatedName1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreatedName1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreatedNameContext createdName() {
		CreatedNameContext _localctx = new CreatedNameContext(Context, State);
		EnterRule(_localctx, 180, RULE_createdName);
		int _la;
		try {
			State = 1306;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				_localctx = new CreatedName0Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1291;
				Match(IDENTIFIER);
				State = 1293;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 1292;
					typeArgumentsOrDiamond();
					}
				}

				State = 1302;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOT) {
					{
					{
					State = 1295;
					Match(DOT);
					State = 1296;
					Match(IDENTIFIER);
					State = 1298;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LT) {
						{
						State = 1297;
						typeArgumentsOrDiamond();
						}
					}

					}
					}
					State = 1304;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				_localctx = new CreatedName1Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1305;
				primitiveType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InnerCreatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JavaParserLabeled.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassCreatorRestContext classCreatorRest() {
			return GetRuleContext<ClassCreatorRestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NonWildcardTypeArgumentsOrDiamondContext nonWildcardTypeArgumentsOrDiamond() {
			return GetRuleContext<NonWildcardTypeArgumentsOrDiamondContext>(0);
		}
		public InnerCreatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_innerCreator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterInnerCreator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitInnerCreator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInnerCreator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InnerCreatorContext innerCreator() {
		InnerCreatorContext _localctx = new InnerCreatorContext(Context, State);
		EnterRule(_localctx, 182, RULE_innerCreator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1308;
			Match(IDENTIFIER);
			State = 1310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 1309;
				nonWildcardTypeArgumentsOrDiamond();
				}
			}

			State = 1312;
			classCreatorRest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayCreatorRestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(JavaParserLabeled.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(JavaParserLabeled.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(JavaParserLabeled.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(JavaParserLabeled.RBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayCreatorRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayCreatorRest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterArrayCreatorRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitArrayCreatorRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayCreatorRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayCreatorRestContext arrayCreatorRest() {
		ArrayCreatorRestContext _localctx = new ArrayCreatorRestContext(Context, State);
		EnterRule(_localctx, 184, RULE_arrayCreatorRest);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1314;
			Match(LBRACK);
			State = 1342;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RBRACK:
				{
				State = 1315;
				Match(RBRACK);
				State = 1320;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LBRACK) {
					{
					{
					State = 1316;
					Match(LBRACK);
					State = 1317;
					Match(RBRACK);
					}
					}
					State = 1322;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1323;
				arrayInitializer();
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case SHORT:
			case SUPER:
			case THIS:
			case VOID:
			case DECIMAL_LITERAL:
			case HEX_LITERAL:
			case OCT_LITERAL:
			case BINARY_LITERAL:
			case FLOAT_LITERAL:
			case HEX_FLOAT_LITERAL:
			case BOOL_LITERAL:
			case CHAR_LITERAL:
			case STRING_LITERAL:
			case NULL_LITERAL:
			case LPAREN:
			case LT:
			case BANG:
			case TILDE:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case AT:
			case IDENTIFIER:
				{
				State = 1324;
				expression(0);
				State = 1325;
				Match(RBRACK);
				State = 1332;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,162,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1326;
						Match(LBRACK);
						State = 1327;
						expression(0);
						State = 1328;
						Match(RBRACK);
						}
						} 
					}
					State = 1334;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,162,Context);
				}
				State = 1339;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,163,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1335;
						Match(LBRACK);
						State = 1336;
						Match(RBRACK);
						}
						} 
					}
					State = 1341;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,163,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassCreatorRestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ClassCreatorRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classCreatorRest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterClassCreatorRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitClassCreatorRest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassCreatorRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassCreatorRestContext classCreatorRest() {
		ClassCreatorRestContext _localctx = new ClassCreatorRestContext(Context, State);
		EnterRule(_localctx, 186, RULE_classCreatorRest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1344;
			arguments();
			State = 1346;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,165,Context) ) {
			case 1:
				{
				State = 1345;
				classBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitGenericInvocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitGenericInvocationSuffixContext explicitGenericInvocationSuffix() {
			return GetRuleContext<ExplicitGenericInvocationSuffixContext>(0);
		}
		public ExplicitGenericInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitGenericInvocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterExplicitGenericInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitExplicitGenericInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitGenericInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitGenericInvocationContext explicitGenericInvocation() {
		ExplicitGenericInvocationContext _localctx = new ExplicitGenericInvocationContext(Context, State);
		EnterRule(_localctx, 188, RULE_explicitGenericInvocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1348;
			nonWildcardTypeArguments();
			State = 1349;
			explicitGenericInvocationSuffix();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsOrDiamondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(JavaParserLabeled.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(JavaParserLabeled.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeArgumentsOrDiamondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentsOrDiamond; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterTypeArgumentsOrDiamond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitTypeArgumentsOrDiamond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgumentsOrDiamond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond() {
		TypeArgumentsOrDiamondContext _localctx = new TypeArgumentsOrDiamondContext(Context, State);
		EnterRule(_localctx, 190, RULE_typeArgumentsOrDiamond);
		try {
			State = 1354;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,166,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1351;
				Match(LT);
				State = 1352;
				Match(GT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1353;
				typeArguments();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonWildcardTypeArgumentsOrDiamondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(JavaParserLabeled.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(JavaParserLabeled.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		public NonWildcardTypeArgumentsOrDiamondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonWildcardTypeArgumentsOrDiamond; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterNonWildcardTypeArgumentsOrDiamond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitNonWildcardTypeArgumentsOrDiamond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonWildcardTypeArgumentsOrDiamond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonWildcardTypeArgumentsOrDiamondContext nonWildcardTypeArgumentsOrDiamond() {
		NonWildcardTypeArgumentsOrDiamondContext _localctx = new NonWildcardTypeArgumentsOrDiamondContext(Context, State);
		EnterRule(_localctx, 192, RULE_nonWildcardTypeArgumentsOrDiamond);
		try {
			State = 1359;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,167,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1356;
				Match(LT);
				State = 1357;
				Match(GT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1358;
				nonWildcardTypeArguments();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonWildcardTypeArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(JavaParserLabeled.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(JavaParserLabeled.GT, 0); }
		public NonWildcardTypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonWildcardTypeArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterNonWildcardTypeArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitNonWildcardTypeArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonWildcardTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
		NonWildcardTypeArgumentsContext _localctx = new NonWildcardTypeArgumentsContext(Context, State);
		EnterRule(_localctx, 194, RULE_nonWildcardTypeArguments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1361;
			Match(LT);
			State = 1362;
			typeList();
			State = 1363;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext[] typeType() {
			return GetRuleContexts<TypeTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeTypeContext typeType(int i) {
			return GetRuleContext<TypeTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaParserLabeled.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaParserLabeled.COMMA, i);
		}
		public TypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterTypeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitTypeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeListContext typeList() {
		TypeListContext _localctx = new TypeListContext(Context, State);
		EnterRule(_localctx, 196, RULE_typeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1365;
			typeType();
			State = 1370;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1366;
				Match(COMMA);
				State = 1367;
				typeType();
				}
				}
				State = 1372;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(JavaParserLabeled.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(JavaParserLabeled.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(JavaParserLabeled.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(JavaParserLabeled.RBRACK, i);
		}
		public TypeTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterTypeType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitTypeType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeTypeContext typeType() {
		TypeTypeContext _localctx = new TypeTypeContext(Context, State);
		EnterRule(_localctx, 198, RULE_typeType);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1376;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,169,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1373;
					annotation();
					}
					} 
				}
				State = 1378;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,169,Context);
			}
			State = 1381;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 1379;
				classOrInterfaceType();
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				State = 1380;
				primitiveType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1393;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,172,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1386;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==AT || _la==IDENTIFIER) {
						{
						{
						State = 1383;
						annotation();
						}
						}
						State = 1388;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 1389;
					Match(LBRACK);
					State = 1390;
					Match(RBRACK);
					}
					} 
				}
				State = 1395;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,172,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(JavaParserLabeled.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(JavaParserLabeled.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE() { return GetToken(JavaParserLabeled.BYTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHORT() { return GetToken(JavaParserLabeled.SHORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(JavaParserLabeled.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG() { return GetToken(JavaParserLabeled.LONG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(JavaParserLabeled.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(JavaParserLabeled.DOUBLE, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 200, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1396;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << SHORT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(JavaParserLabeled.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentContext[] typeArgument() {
			return GetRuleContexts<TypeArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgumentContext typeArgument(int i) {
			return GetRuleContext<TypeArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(JavaParserLabeled.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(JavaParserLabeled.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(JavaParserLabeled.COMMA, i);
		}
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterTypeArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitTypeArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(Context, State);
		EnterRule(_localctx, 202, RULE_typeArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1398;
			Match(LT);
			State = 1399;
			typeArgument();
			State = 1404;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1400;
				Match(COMMA);
				State = 1401;
				typeArgument();
				}
				}
				State = 1406;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1407;
			Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperSuffixContext : ParserRuleContext {
		public SuperSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superSuffix; } }
	 
		public SuperSuffixContext() { }
		public virtual void CopyFrom(SuperSuffixContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SuperSuffix1Context : SuperSuffixContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(JavaParserLabeled.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JavaParserLabeled.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public SuperSuffix1Context(SuperSuffixContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterSuperSuffix1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitSuperSuffix1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperSuffix1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SuperSuffix0Context : SuperSuffixContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public SuperSuffix0Context(SuperSuffixContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterSuperSuffix0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitSuperSuffix0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperSuffix0(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuperSuffixContext superSuffix() {
		SuperSuffixContext _localctx = new SuperSuffixContext(Context, State);
		EnterRule(_localctx, 204, RULE_superSuffix);
		try {
			State = 1415;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				_localctx = new SuperSuffix0Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1409;
				arguments();
				}
				break;
			case DOT:
				_localctx = new SuperSuffix1Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1410;
				Match(DOT);
				State = 1411;
				Match(IDENTIFIER);
				State = 1413;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,174,Context) ) {
				case 1:
					{
					State = 1412;
					arguments();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitGenericInvocationSuffixContext : ParserRuleContext {
		public ExplicitGenericInvocationSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitGenericInvocationSuffix; } }
	 
		public ExplicitGenericInvocationSuffixContext() { }
		public virtual void CopyFrom(ExplicitGenericInvocationSuffixContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExplicitGenericInvocationSuffix0Context : ExplicitGenericInvocationSuffixContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(JavaParserLabeled.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SuperSuffixContext superSuffix() {
			return GetRuleContext<SuperSuffixContext>(0);
		}
		public ExplicitGenericInvocationSuffix0Context(ExplicitGenericInvocationSuffixContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterExplicitGenericInvocationSuffix0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitExplicitGenericInvocationSuffix0(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitGenericInvocationSuffix0(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExplicitGenericInvocationSuffix1Context : ExplicitGenericInvocationSuffixContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(JavaParserLabeled.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ExplicitGenericInvocationSuffix1Context(ExplicitGenericInvocationSuffixContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterExplicitGenericInvocationSuffix1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitExplicitGenericInvocationSuffix1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitGenericInvocationSuffix1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitGenericInvocationSuffixContext explicitGenericInvocationSuffix() {
		ExplicitGenericInvocationSuffixContext _localctx = new ExplicitGenericInvocationSuffixContext(Context, State);
		EnterRule(_localctx, 206, RULE_explicitGenericInvocationSuffix);
		try {
			State = 1421;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUPER:
				_localctx = new ExplicitGenericInvocationSuffix0Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1417;
				Match(SUPER);
				State = 1418;
				superSuffix();
				}
				break;
			case IDENTIFIER:
				_localctx = new ExplicitGenericInvocationSuffix1Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1419;
				Match(IDENTIFIER);
				State = 1420;
				arguments();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(JavaParserLabeled.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(JavaParserLabeled.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserLabeledListener typedListener = listener as IJavaParserLabeledListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserLabeledVisitor<TResult> typedVisitor = visitor as IJavaParserLabeledVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 208, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1423;
			Match(LPAREN);
			State = 1425;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << DECIMAL_LITERAL) | (1L << HEX_LITERAL) | (1L << OCT_LITERAL) | (1L << BINARY_LITERAL) | (1L << FLOAT_LITERAL) | (1L << HEX_FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << CHAR_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << LPAREN))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (LT - 72)) | (1L << (BANG - 72)) | (1L << (TILDE - 72)) | (1L << (INC - 72)) | (1L << (DEC - 72)) | (1L << (ADD - 72)) | (1L << (SUB - 72)) | (1L << (AT - 72)) | (1L << (IDENTIFIER - 72)))) != 0)) {
				{
				State = 1424;
				expressionList();
				}
			}

			State = 1427;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 83: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 17);
		case 1: return Precpred(Context, 16);
		case 2: return Precpred(Context, 15);
		case 3: return Precpred(Context, 14);
		case 4: return Precpred(Context, 12);
		case 5: return Precpred(Context, 11);
		case 6: return Precpred(Context, 10);
		case 7: return Precpred(Context, 9);
		case 8: return Precpred(Context, 8);
		case 9: return Precpred(Context, 7);
		case 10: return Precpred(Context, 6);
		case 11: return Precpred(Context, 5);
		case 12: return Precpred(Context, 25);
		case 13: return Precpred(Context, 24);
		case 14: return Precpred(Context, 20);
		case 15: return Precpred(Context, 13);
		case 16: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'q', '\x598', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x4', 'g', '\t', 'g', '\x4', 'h', '\t', 'h', '\x4', 'i', '\t', 'i', '\x4', 
		'j', '\t', 'j', '\x3', '\x2', '\x5', '\x2', '\xD6', '\n', '\x2', '\x3', 
		'\x2', '\a', '\x2', '\xD9', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\xDC', 
		'\v', '\x2', '\x3', '\x2', '\a', '\x2', '\xDF', '\n', '\x2', '\f', '\x2', 
		'\xE', '\x2', '\xE2', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\a', '\x3', '\xE7', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\xEA', 
		'\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x5', '\x4', '\xF2', '\n', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\xF7', '\n', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\a', '\x5', '\xFC', '\n', '\x5', '\f', 
		'\x5', '\xE', '\x5', '\xFF', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x105', '\n', '\x5', '\x3', 
		'\x5', '\x5', '\x5', '\x108', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x10F', '\n', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x119', '\n', '\a', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', '\x11D', '\n', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x5', '\t', '\x122', '\n', '\t', '\x3', '\t', 
		'\x3', '\t', '\x5', '\t', '\x126', '\n', '\t', '\x3', '\t', '\x3', '\t', 
		'\x5', '\t', '\x12A', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\x132', '\n', '\n', 
		'\f', '\n', '\xE', '\n', '\x135', '\v', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\v', '\a', '\v', '\x13A', '\n', '\v', '\f', '\v', '\xE', '\v', 
		'\x13D', '\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', 
		'\x142', '\n', '\v', '\f', '\v', '\xE', '\v', '\x145', '\v', '\v', '\x3', 
		'\v', '\x5', '\v', '\x148', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\a', '\f', '\x14D', '\n', '\f', '\f', '\f', '\xE', '\f', '\x150', 
		'\v', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', 
		'\r', '\x156', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x15A', 
		'\n', '\r', '\x3', '\r', '\x5', '\r', '\x15D', '\n', '\r', '\x3', '\r', 
		'\x5', '\r', '\x160', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\x167', '\n', '\xE', '\f', '\xE', 
		'\xE', '\xE', '\x16A', '\v', '\xE', '\x3', '\xF', '\a', '\xF', '\x16D', 
		'\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x170', '\v', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x5', '\xF', '\x174', '\n', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\x177', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', 
		'\x17B', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\x17E', '\v', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x183', '\n', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x187', '\n', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\a', '\x12', 
		'\x18D', '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\x190', '\v', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\a', '\x13', 
		'\x196', '\n', '\x13', '\f', '\x13', '\xE', '\x13', '\x199', '\v', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', 
		'\x19F', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\x1A3', 
		'\n', '\x14', '\f', '\x14', '\xE', '\x14', '\x1A6', '\v', '\x14', '\x3', 
		'\x14', '\x5', '\x14', '\x1A9', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x1B4', '\n', '\x15', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\a', 
		'\x16', '\x1BB', '\n', '\x16', '\f', '\x16', '\xE', '\x16', '\x1BE', '\v', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x1C2', '\n', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', 
		'\x1C8', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x1CC', 
		'\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x5', '\x1B', '\x1D8', '\n', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1D', '\a', '\x1D', '\x1E1', '\n', '\x1D', '\f', '\x1D', '\xE', '\x1D', 
		'\x1E4', '\v', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x1E8', 
		'\n', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x1F1', '\n', 
		'\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\a', 
		'\x1F', '\x1F7', '\n', '\x1F', '\f', '\x1F', '\xE', '\x1F', '\x1FA', '\v', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\a', ' ', '\x201', '\n', ' ', '\f', ' ', '\xE', ' ', '\x204', '\v', ' ', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', '!', '\a', '!', '\x20A', '\n', 
		'!', '\f', '!', '\xE', '!', '\x20D', '\v', '!', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\a', '!', '\x212', '\n', '!', '\f', '!', '\xE', '!', '\x215', 
		'\v', '!', '\x3', '!', '\x3', '!', '\x5', '!', '\x219', '\n', '!', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x3', '!', '\a', '!', '\x21F', '\n', '!', 
		'\f', '!', '\xE', '!', '\x222', '\v', '!', '\x3', '!', '\x3', '!', '\x5', 
		'!', '\x226', '\n', '!', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x230', 
		'\n', '\"', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', 
		'\x3', '$', '\a', '$', '\x238', '\n', '$', '\f', '$', '\xE', '$', '\x23B', 
		'\v', '$', '\x3', '%', '\x3', '%', '\x3', '%', '\x5', '%', '\x240', '\n', 
		'%', '\x3', '&', '\x3', '&', '\x3', '&', '\a', '&', '\x245', '\n', '&', 
		'\f', '&', '\xE', '&', '\x248', '\v', '&', '\x3', '\'', '\x3', '\'', '\x5', 
		'\'', '\x24C', '\n', '\'', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\a', '(', '\x252', '\n', '(', '\f', '(', '\xE', '(', '\x255', '\v', 
		'(', '\x3', '(', '\x5', '(', '\x258', '\n', '(', '\x5', '(', '\x25A', 
		'\n', '(', '\x3', '(', '\x3', '(', '\x3', ')', '\x3', ')', '\x5', ')', 
		'\x260', '\n', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x5', ')', '\x265', 
		'\n', ')', '\a', ')', '\x267', '\n', ')', '\f', ')', '\xE', ')', '\x26A', 
		'\v', ')', '\x3', '*', '\x3', '*', '\a', '*', '\x26E', '\n', '*', '\f', 
		'*', '\xE', '*', '\x271', '\v', '*', '\x3', '*', '\x3', '*', '\x3', '*', 
		'\x5', '*', '\x276', '\n', '*', '\x5', '*', '\x278', '\n', '*', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\a', '+', '\x27D', '\n', '+', '\f', '+', 
		'\xE', '+', '\x280', '\v', '+', '\x3', ',', '\x3', ',', '\x5', ',', '\x284', 
		'\n', ',', '\x3', ',', '\x3', ',', '\x3', '-', '\x3', '-', '\x3', '-', 
		'\a', '-', '\x28B', '\n', '-', '\f', '-', '\xE', '-', '\x28E', '\v', '-', 
		'\x3', '-', '\x3', '-', '\x5', '-', '\x292', '\n', '-', '\x3', '-', '\x5', 
		'-', '\x295', '\n', '-', '\x3', '.', '\a', '.', '\x298', '\n', '.', '\f', 
		'.', '\xE', '.', '\x29B', '\v', '.', '\x3', '.', '\x3', '.', '\x3', '.', 
		'\x3', '/', '\a', '/', '\x2A1', '\n', '/', '\f', '/', '\xE', '/', '\x2A4', 
		'\v', '/', '\x3', '/', '\x3', '/', '\a', '/', '\x2A8', '\n', '/', '\f', 
		'/', '\xE', '/', '\x2AB', '\v', '/', '\x3', '/', '\x3', '/', '\x3', '/', 
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\a', '\x30', '\x2B3', '\n', 
		'\x30', '\f', '\x30', '\xE', '\x30', '\x2B6', '\v', '\x30', '\x3', '\x31', 
		'\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', 
		'\x5', '\x31', '\x2BE', '\n', '\x31', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x34', '\x3', '\x34', '\a', '\x34', '\x2C6', 
		'\n', '\x34', '\f', '\x34', '\xE', '\x34', '\x2C9', '\v', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x35', '\x3', '\x35', '\x3', 
		'\x35', '\x5', '\x35', '\x2D1', '\n', '\x35', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\x5', '\x35', '\x2D6', '\n', '\x35', '\x3', '\x35', '\x5', 
		'\x35', '\x2D9', '\n', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\a', '\x36', '\x2DE', '\n', '\x36', '\f', '\x36', '\xE', '\x36', '\x2E1', 
		'\v', '\x36', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', 
		'\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x5', '\x38', '\x2EA', '\n', 
		'\x38', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\a', 
		'\x39', '\x2F0', '\n', '\x39', '\f', '\x39', '\xE', '\x39', '\x2F3', '\v', 
		'\x39', '\x5', '\x39', '\x2F5', '\n', '\x39', '\x3', '\x39', '\x5', '\x39', 
		'\x2F8', '\n', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ';', '\x3', ';', '\a', 
		';', '\x303', '\n', ';', '\f', ';', '\xE', ';', '\x306', '\v', ';', '\x3', 
		';', '\x3', ';', '\x3', '<', '\a', '<', '\x30B', '\n', '<', '\f', '<', 
		'\xE', '<', '\x30E', '\v', '<', '\x3', '<', '\x3', '<', '\x5', '<', '\x312', 
		'\n', '<', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x5', '=', '\x31A', '\n', '=', '\x3', '=', '\x3', '=', '\x5', 
		'=', '\x31E', '\n', '=', '\x3', '=', '\x3', '=', '\x5', '=', '\x322', 
		'\n', '=', '\x3', '=', '\x3', '=', '\x5', '=', '\x326', '\n', '=', '\x5', 
		'=', '\x328', '\n', '=', '\x3', '>', '\x3', '>', '\x5', '>', '\x32C', 
		'\n', '>', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x5', '?', 
		'\x332', '\n', '?', '\x3', '@', '\x3', '@', '\x3', '\x41', '\x3', '\x41', 
		'\x3', '\x41', '\x3', '\x42', '\x3', '\x42', '\a', '\x42', '\x33B', '\n', 
		'\x42', '\f', '\x42', '\xE', '\x42', '\x33E', '\v', '\x42', '\x3', '\x42', 
		'\x3', '\x42', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', 
		'\x3', '\x43', '\x5', '\x43', '\x347', '\n', '\x43', '\x3', '\x44', '\a', 
		'\x44', '\x34A', '\n', '\x44', '\f', '\x44', '\xE', '\x44', '\x34D', '\v', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x45', '\a', 
		'\x45', '\x353', '\n', '\x45', '\f', '\x45', '\xE', '\x45', '\x356', '\v', 
		'\x45', '\x3', '\x45', '\x3', '\x45', '\x5', '\x45', '\x35A', '\n', '\x45', 
		'\x3', '\x45', '\x5', '\x45', '\x35D', '\n', '\x45', '\x3', '\x46', '\x3', 
		'\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x5', '\x46', '\x364', 
		'\n', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', 
		'\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x5', '\x46', '\x36D', '\n', 
		'\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', 
		'\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', 
		'\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', 
		'\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x6', 
		'\x46', '\x382', '\n', '\x46', '\r', '\x46', '\xE', '\x46', '\x383', '\x3', 
		'\x46', '\x5', '\x46', '\x387', '\n', '\x46', '\x3', '\x46', '\x5', '\x46', 
		'\x38A', '\n', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', 
		'\x46', '\a', '\x46', '\x390', '\n', '\x46', '\f', '\x46', '\xE', '\x46', 
		'\x393', '\v', '\x46', '\x3', '\x46', '\x5', '\x46', '\x396', '\n', '\x46', 
		'\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\a', '\x46', 
		'\x39C', '\n', '\x46', '\f', '\x46', '\xE', '\x46', '\x39F', '\v', '\x46', 
		'\x3', '\x46', '\a', '\x46', '\x3A2', '\n', '\x46', '\f', '\x46', '\xE', 
		'\x46', '\x3A5', '\v', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', 
		'\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', 
		'\x5', '\x46', '\x3AF', '\n', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', 
		'\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x5', 
		'\x46', '\x3B8', '\n', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', 
		'\x5', '\x46', '\x3BD', '\n', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', 
		'\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', 
		'\x46', '\x5', '\x46', '\x3C7', '\n', '\x46', '\x3', 'G', '\x3', 'G', 
		'\x3', 'G', '\a', 'G', '\x3CC', '\n', 'G', '\f', 'G', '\xE', 'G', '\x3CF', 
		'\v', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', 
		'\x3', 'H', '\x3', 'H', '\x3', 'H', '\a', 'H', '\x3D9', '\n', 'H', '\f', 
		'H', '\xE', 'H', '\x3DC', '\v', 'H', '\x3', 'I', '\x3', 'I', '\x3', 'I', 
		'\x3', 'J', '\x3', 'J', '\x3', 'J', '\x5', 'J', '\x3E4', '\n', 'J', '\x3', 
		'J', '\x3', 'J', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\a', 'K', '\x3EB', 
		'\n', 'K', '\f', 'K', '\xE', 'K', '\x3EE', '\v', 'K', '\x3', 'L', '\a', 
		'L', '\x3F1', '\n', 'L', '\f', 'L', '\xE', 'L', '\x3F4', '\v', 'L', '\x3', 
		'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'M', '\x6', 
		'M', '\x3FC', '\n', 'M', '\r', 'M', '\xE', 'M', '\x3FD', '\x3', 'M', '\x6', 
		'M', '\x401', '\n', 'M', '\r', 'M', '\xE', 'M', '\x402', '\x3', 'N', '\x3', 
		'N', '\x3', 'N', '\x5', 'N', '\x408', '\n', 'N', '\x3', 'N', '\x3', 'N', 
		'\x3', 'N', '\x5', 'N', '\x40D', '\n', 'N', '\x3', 'O', '\x3', 'O', '\x5', 
		'O', '\x411', '\n', 'O', '\x3', 'O', '\x3', 'O', '\x5', 'O', '\x415', 
		'\n', 'O', '\x3', 'O', '\x3', 'O', '\x5', 'O', '\x419', '\n', 'O', '\x5', 
		'O', '\x41B', '\n', 'O', '\x3', 'P', '\x3', 'P', '\x5', 'P', '\x41F', 
		'\n', 'P', '\x3', 'Q', '\a', 'Q', '\x422', '\n', 'Q', '\f', 'Q', '\xE', 
		'Q', '\x425', '\v', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', 
		'\x3', 'Q', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'S', 
		'\x3', 'S', '\x3', 'S', '\a', 'S', '\x433', '\n', 'S', '\f', 'S', '\xE', 
		'S', '\x436', '\v', 'S', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x5', 'T', 
		'\x43B', '\n', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x5', 
		'T', '\x441', '\n', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', 
		'\x5', 'T', '\x447', '\n', 'T', '\x3', 'T', '\x5', 'T', '\x44A', '\n', 
		'T', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\a', 'U', '\x453', '\n', 'U', '\f', 'U', '\xE', 'U', 
		'\x456', '\v', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x5', 'U', '\x464', '\n', 'U', '\x3', 'U', '\x3', 'U', 
		'\x5', 'U', '\x468', '\n', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x5', 
		'U', '\x46D', '\n', 'U', '\x3', 'U', '\x3', 'U', '\x5', 'U', '\x471', 
		'\n', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', 
		'\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', 
		'\x3', 'U', '\x3', 'U', '\x3', 'U', '\x5', 'U', '\x481', '\n', 'U', '\x3', 
		'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x5', 'U', '\x4A9', '\n', 'U', '\x3', 'U', '\x3', 'U', 
		'\x3', 'U', '\x3', 'U', '\x5', 'U', '\x4AF', '\n', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x5', 
		'U', '\x4BE', '\n', 'U', '\x3', 'U', '\a', 'U', '\x4C1', '\n', 'U', '\f', 
		'U', '\xE', 'U', '\x4C4', '\v', 'U', '\x3', 'V', '\x3', 'V', '\x3', 'V', 
		'\x3', 'V', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x5', 'W', '\x4CD', '\n', 
		'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\a', 
		'W', '\x4D4', '\n', 'W', '\f', 'W', '\xE', 'W', '\x4D7', '\v', 'W', '\x3', 
		'W', '\x5', 'W', '\x4DA', '\n', 'W', '\x3', 'X', '\x3', 'X', '\x5', 'X', 
		'\x4DE', '\n', 'X', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 
		'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 
		'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x5', 
		'Y', '\x4F0', '\n', 'Y', '\x5', 'Y', '\x4F2', '\n', 'Y', '\x3', 'Z', '\x3', 
		'Z', '\x3', 'Z', '\x5', 'Z', '\x4F7', '\n', 'Z', '\x3', 'Z', '\a', 'Z', 
		'\x4FA', '\n', 'Z', '\f', 'Z', '\xE', 'Z', '\x4FD', '\v', 'Z', '\x3', 
		'Z', '\x3', 'Z', '\x5', 'Z', '\x501', '\n', 'Z', '\x3', '[', '\x3', '[', 
		'\x3', '[', '\x3', '[', '\x3', '[', '\x3', '[', '\x3', '[', '\x5', '[', 
		'\x50A', '\n', '[', '\x5', '[', '\x50C', '\n', '[', '\x3', '\\', '\x3', 
		'\\', '\x5', '\\', '\x510', '\n', '\\', '\x3', '\\', '\x3', '\\', '\x3', 
		'\\', '\x5', '\\', '\x515', '\n', '\\', '\a', '\\', '\x517', '\n', '\\', 
		'\f', '\\', '\xE', '\\', '\x51A', '\v', '\\', '\x3', '\\', '\x5', '\\', 
		'\x51D', '\n', '\\', '\x3', ']', '\x3', ']', '\x5', ']', '\x521', '\n', 
		']', '\x3', ']', '\x3', ']', '\x3', '^', '\x3', '^', '\x3', '^', '\x3', 
		'^', '\a', '^', '\x529', '\n', '^', '\f', '^', '\xE', '^', '\x52C', '\v', 
		'^', '\x3', '^', '\x3', '^', '\x3', '^', '\x3', '^', '\x3', '^', '\x3', 
		'^', '\x3', '^', '\a', '^', '\x535', '\n', '^', '\f', '^', '\xE', '^', 
		'\x538', '\v', '^', '\x3', '^', '\x3', '^', '\a', '^', '\x53C', '\n', 
		'^', '\f', '^', '\xE', '^', '\x53F', '\v', '^', '\x5', '^', '\x541', '\n', 
		'^', '\x3', '_', '\x3', '_', '\x5', '_', '\x545', '\n', '_', '\x3', '`', 
		'\x3', '`', '\x3', '`', '\x3', '\x61', '\x3', '\x61', '\x3', '\x61', '\x5', 
		'\x61', '\x54D', '\n', '\x61', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', 
		'\x5', '\x62', '\x552', '\n', '\x62', '\x3', '\x63', '\x3', '\x63', '\x3', 
		'\x63', '\x3', '\x63', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\a', 
		'\x64', '\x55B', '\n', '\x64', '\f', '\x64', '\xE', '\x64', '\x55E', '\v', 
		'\x64', '\x3', '\x65', '\a', '\x65', '\x561', '\n', '\x65', '\f', '\x65', 
		'\xE', '\x65', '\x564', '\v', '\x65', '\x3', '\x65', '\x3', '\x65', '\x5', 
		'\x65', '\x568', '\n', '\x65', '\x3', '\x65', '\a', '\x65', '\x56B', '\n', 
		'\x65', '\f', '\x65', '\xE', '\x65', '\x56E', '\v', '\x65', '\x3', '\x65', 
		'\x3', '\x65', '\a', '\x65', '\x572', '\n', '\x65', '\f', '\x65', '\xE', 
		'\x65', '\x575', '\v', '\x65', '\x3', '\x66', '\x3', '\x66', '\x3', 'g', 
		'\x3', 'g', '\x3', 'g', '\x3', 'g', '\a', 'g', '\x57D', '\n', 'g', '\f', 
		'g', '\xE', 'g', '\x580', '\v', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'h', 
		'\x3', 'h', '\x3', 'h', '\x3', 'h', '\x5', 'h', '\x588', '\n', 'h', '\x5', 
		'h', '\x58A', '\n', 'h', '\x3', 'i', '\x3', 'i', '\x3', 'i', '\x3', 'i', 
		'\x5', 'i', '\x590', '\n', 'i', '\x3', 'j', '\x3', 'j', '\x5', 'j', '\x594', 
		'\n', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x2', '\x3', '\xA8', 'k', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', 
		'\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', 
		'\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 'l', 'n', 'p', 'r', 
		't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', '\x84', '\x86', '\x88', 
		'\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', '\x96', '\x98', '\x9A', 
		'\x9C', '\x9E', '\xA0', '\xA2', '\xA4', '\xA6', '\xA8', '\xAA', '\xAC', 
		'\xAE', '\xB0', '\xB2', '\xB4', '\xB6', '\xB8', '\xBA', '\xBC', '\xBE', 
		'\xC0', '\xC2', '\xC4', '\xC6', '\xC8', '\xCA', '\xCC', '\xCE', '\xD0', 
		'\xD2', '\x2', '\xE', '\x4', '\x2', '\x13', '\x13', '*', '*', '\x3', '\x2', 
		'\x35', '\x38', '\x3', '\x2', '\x39', ':', '\x3', '\x2', 'U', 'X', '\x3', 
		'\x2', 'K', 'L', '\x4', '\x2', 'Y', 'Z', '^', '^', '\x3', '\x2', 'W', 
		'X', '\x4', '\x2', 'I', 'J', 'P', 'Q', '\x4', '\x2', 'O', 'O', 'R', 'R', 
		'\x4', '\x2', 'H', 'H', '_', 'i', '\x3', '\x2', 'U', 'V', '\n', '\x2', 
		'\x5', '\x5', '\a', '\a', '\n', '\n', '\x10', '\x10', '\x16', '\x16', 
		'\x1D', '\x1D', '\x1F', '\x1F', '\'', '\'', '\x2', '\x637', '\x2', '\xD5', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\xE8', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\xEF', '\x3', '\x2', '\x2', '\x2', '\b', '\x107', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\x10E', '\x3', '\x2', '\x2', '\x2', '\f', '\x118', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\x11C', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x12', '\x12D', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x16', '\x149', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\x151', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x163', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x16E', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x178', '\x3', '\x2', '\x2', '\x2', ' ', '\x17F', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\x18A', '\x3', '\x2', '\x2', '\x2', 
		'$', '\x193', '\x3', '\x2', '\x2', '\x2', '&', '\x1A8', '\x3', '\x2', 
		'\x2', '\x2', '(', '\x1B3', '\x3', '\x2', '\x2', '\x2', '*', '\x1B5', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x1C7', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x1CB', '\x3', '\x2', '\x2', '\x2', '\x30', '\x1CD', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x1D0', '\x3', '\x2', '\x2', '\x2', '\x34', '\x1D3', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x1DB', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x1E7', '\x3', '\x2', '\x2', '\x2', ':', '\x1F0', '\x3', '\x2', 
		'\x2', '\x2', '<', '\x1F2', '\x3', '\x2', '\x2', '\x2', '>', '\x1FD', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x20B', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x22F', '\x3', '\x2', '\x2', '\x2', '\x44', '\x231', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x234', '\x3', '\x2', '\x2', '\x2', 'H', '\x23C', 
		'\x3', '\x2', '\x2', '\x2', 'J', '\x241', '\x3', '\x2', '\x2', '\x2', 
		'L', '\x24B', '\x3', '\x2', '\x2', '\x2', 'N', '\x24D', '\x3', '\x2', 
		'\x2', '\x2', 'P', '\x25D', '\x3', '\x2', '\x2', '\x2', 'R', '\x277', 
		'\x3', '\x2', '\x2', '\x2', 'T', '\x279', '\x3', '\x2', '\x2', '\x2', 
		'V', '\x281', '\x3', '\x2', '\x2', '\x2', 'X', '\x294', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\x299', '\x3', '\x2', '\x2', '\x2', '\\', '\x2A2', 
		'\x3', '\x2', '\x2', '\x2', '^', '\x2AF', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x2BD', '\x3', '\x2', '\x2', '\x2', '\x62', '\x2BF', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x2C1', '\x3', '\x2', '\x2', '\x2', '\x66', '\x2C7', 
		'\x3', '\x2', '\x2', '\x2', 'h', '\x2D0', '\x3', '\x2', '\x2', '\x2', 
		'j', '\x2DA', '\x3', '\x2', '\x2', '\x2', 'l', '\x2E2', '\x3', '\x2', 
		'\x2', '\x2', 'n', '\x2E9', '\x3', '\x2', '\x2', '\x2', 'p', '\x2EB', 
		'\x3', '\x2', '\x2', '\x2', 'r', '\x2FB', '\x3', '\x2', '\x2', '\x2', 
		't', '\x300', '\x3', '\x2', '\x2', '\x2', 'v', '\x311', '\x3', '\x2', 
		'\x2', '\x2', 'x', '\x327', '\x3', '\x2', '\x2', '\x2', 'z', '\x32B', 
		'\x3', '\x2', '\x2', '\x2', '|', '\x32D', '\x3', '\x2', '\x2', '\x2', 
		'~', '\x333', '\x3', '\x2', '\x2', '\x2', '\x80', '\x335', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x338', '\x3', '\x2', '\x2', '\x2', '\x84', '\x346', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x34B', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x35C', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x3C6', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '\x3C8', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x3D5', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '\x3DD', '\x3', '\x2', '\x2', '\x2', 
		'\x92', '\x3E0', '\x3', '\x2', '\x2', '\x2', '\x94', '\x3E7', '\x3', '\x2', 
		'\x2', '\x2', '\x96', '\x3F2', '\x3', '\x2', '\x2', '\x2', '\x98', '\x3FB', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\x40C', '\x3', '\x2', '\x2', '\x2', 
		'\x9C', '\x41A', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x41E', '\x3', '\x2', 
		'\x2', '\x2', '\xA0', '\x423', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x42B', 
		'\x3', '\x2', '\x2', '\x2', '\xA4', '\x42F', '\x3', '\x2', '\x2', '\x2', 
		'\xA6', '\x449', '\x3', '\x2', '\x2', '\x2', '\xA8', '\x470', '\x3', '\x2', 
		'\x2', '\x2', '\xAA', '\x4C5', '\x3', '\x2', '\x2', '\x2', '\xAC', '\x4D9', 
		'\x3', '\x2', '\x2', '\x2', '\xAE', '\x4DD', '\x3', '\x2', '\x2', '\x2', 
		'\xB0', '\x4F1', '\x3', '\x2', '\x2', '\x2', '\xB2', '\x4F6', '\x3', '\x2', 
		'\x2', '\x2', '\xB4', '\x50B', '\x3', '\x2', '\x2', '\x2', '\xB6', '\x51C', 
		'\x3', '\x2', '\x2', '\x2', '\xB8', '\x51E', '\x3', '\x2', '\x2', '\x2', 
		'\xBA', '\x524', '\x3', '\x2', '\x2', '\x2', '\xBC', '\x542', '\x3', '\x2', 
		'\x2', '\x2', '\xBE', '\x546', '\x3', '\x2', '\x2', '\x2', '\xC0', '\x54C', 
		'\x3', '\x2', '\x2', '\x2', '\xC2', '\x551', '\x3', '\x2', '\x2', '\x2', 
		'\xC4', '\x553', '\x3', '\x2', '\x2', '\x2', '\xC6', '\x557', '\x3', '\x2', 
		'\x2', '\x2', '\xC8', '\x562', '\x3', '\x2', '\x2', '\x2', '\xCA', '\x576', 
		'\x3', '\x2', '\x2', '\x2', '\xCC', '\x578', '\x3', '\x2', '\x2', '\x2', 
		'\xCE', '\x589', '\x3', '\x2', '\x2', '\x2', '\xD0', '\x58F', '\x3', '\x2', 
		'\x2', '\x2', '\xD2', '\x591', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD6', 
		'\x5', '\x4', '\x3', '\x2', '\xD5', '\xD4', '\x3', '\x2', '\x2', '\x2', 
		'\xD5', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xDA', '\x3', '\x2', 
		'\x2', '\x2', '\xD7', '\xD9', '\x5', '\x6', '\x4', '\x2', '\xD8', '\xD7', 
		'\x3', '\x2', '\x2', '\x2', '\xD9', '\xDC', '\x3', '\x2', '\x2', '\x2', 
		'\xDA', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xDB', '\x3', '\x2', 
		'\x2', '\x2', '\xDB', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDA', 
		'\x3', '\x2', '\x2', '\x2', '\xDD', '\xDF', '\x5', '\b', '\x5', '\x2', 
		'\xDE', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE2', '\x3', '\x2', 
		'\x2', '\x2', '\xE0', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1', 
		'\x3', '\x2', '\x2', '\x2', '\xE1', '\xE3', '\x3', '\x2', '\x2', '\x2', 
		'\xE2', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', '\a', '\x2', 
		'\x2', '\x3', '\xE4', '\x3', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE7', 
		'\x5', 'h', '\x35', '\x2', '\xE6', '\xE5', '\x3', '\x2', '\x2', '\x2', 
		'\xE7', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE6', '\x3', '\x2', 
		'\x2', '\x2', '\xE8', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEB', 
		'\x3', '\x2', '\x2', '\x2', '\xEA', '\xE8', '\x3', '\x2', '\x2', '\x2', 
		'\xEB', '\xEC', '\a', '\"', '\x2', '\x2', '\xEC', '\xED', '\x5', '^', 
		'\x30', '\x2', '\xED', '\xEE', '\a', '\x45', '\x2', '\x2', '\xEE', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\xEF', '\xF1', '\a', '\x1B', '\x2', '\x2', 
		'\xF0', '\xF2', '\a', '(', '\x2', '\x2', '\xF1', '\xF0', '\x3', '\x2', 
		'\x2', '\x2', '\xF1', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF3', 
		'\x3', '\x2', '\x2', '\x2', '\xF3', '\xF6', '\x5', '^', '\x30', '\x2', 
		'\xF4', '\xF5', '\a', 'G', '\x2', '\x2', '\xF5', '\xF7', '\a', 'Y', '\x2', 
		'\x2', '\xF6', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF7', '\x3', 
		'\x2', '\x2', '\x2', '\xF7', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xF8', 
		'\xF9', '\a', '\x45', '\x2', '\x2', '\xF9', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\xFA', '\xFC', '\x5', '\f', '\a', '\x2', '\xFB', '\xFA', '\x3', 
		'\x2', '\x2', '\x2', '\xFC', '\xFF', '\x3', '\x2', '\x2', '\x2', '\xFD', 
		'\xFB', '\x3', '\x2', '\x2', '\x2', '\xFD', '\xFE', '\x3', '\x2', '\x2', 
		'\x2', '\xFE', '\x104', '\x3', '\x2', '\x2', '\x2', '\xFF', '\xFD', '\x3', 
		'\x2', '\x2', '\x2', '\x100', '\x105', '\x5', '\x10', '\t', '\x2', '\x101', 
		'\x105', '\x5', '\x18', '\r', '\x2', '\x102', '\x105', '\x5', ' ', '\x11', 
		'\x2', '\x103', '\x105', '\x5', 'r', ':', '\x2', '\x104', '\x100', '\x3', 
		'\x2', '\x2', '\x2', '\x104', '\x101', '\x3', '\x2', '\x2', '\x2', '\x104', 
		'\x102', '\x3', '\x2', '\x2', '\x2', '\x104', '\x103', '\x3', '\x2', '\x2', 
		'\x2', '\x105', '\x108', '\x3', '\x2', '\x2', '\x2', '\x106', '\x108', 
		'\a', '\x45', '\x2', '\x2', '\x107', '\xFD', '\x3', '\x2', '\x2', '\x2', 
		'\x107', '\x106', '\x3', '\x2', '\x2', '\x2', '\x108', '\t', '\x3', '\x2', 
		'\x2', '\x2', '\x109', '\x10F', '\x5', '\f', '\a', '\x2', '\x10A', '\x10F', 
		'\a', ' ', '\x2', '\x2', '\x10B', '\x10F', '\a', ',', '\x2', '\x2', '\x10C', 
		'\x10F', '\a', '\x30', '\x2', '\x2', '\x10D', '\x10F', '\a', '\x33', '\x2', 
		'\x2', '\x10E', '\x109', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x10A', 
		'\x3', '\x2', '\x2', '\x2', '\x10E', '\x10B', '\x3', '\x2', '\x2', '\x2', 
		'\x10E', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x10D', '\x3', 
		'\x2', '\x2', '\x2', '\x10F', '\v', '\x3', '\x2', '\x2', '\x2', '\x110', 
		'\x119', '\x5', 'h', '\x35', '\x2', '\x111', '\x119', '\a', '%', '\x2', 
		'\x2', '\x112', '\x119', '\a', '$', '\x2', '\x2', '\x113', '\x119', '\a', 
		'#', '\x2', '\x2', '\x114', '\x119', '\a', '(', '\x2', '\x2', '\x115', 
		'\x119', '\a', '\x3', '\x2', '\x2', '\x116', '\x119', '\a', '\x14', '\x2', 
		'\x2', '\x117', '\x119', '\a', ')', '\x2', '\x2', '\x118', '\x110', '\x3', 
		'\x2', '\x2', '\x2', '\x118', '\x111', '\x3', '\x2', '\x2', '\x2', '\x118', 
		'\x112', '\x3', '\x2', '\x2', '\x2', '\x118', '\x113', '\x3', '\x2', '\x2', 
		'\x2', '\x118', '\x114', '\x3', '\x2', '\x2', '\x2', '\x118', '\x115', 
		'\x3', '\x2', '\x2', '\x2', '\x118', '\x116', '\x3', '\x2', '\x2', '\x2', 
		'\x118', '\x117', '\x3', '\x2', '\x2', '\x2', '\x119', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\x11A', '\x11D', '\a', '\x14', '\x2', '\x2', '\x11B', '\x11D', 
		'\x5', 'h', '\x35', '\x2', '\x11C', '\x11A', '\x3', '\x2', '\x2', '\x2', 
		'\x11C', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x11D', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x11E', '\x11F', '\a', '\v', '\x2', '\x2', '\x11F', '\x121', 
		'\a', 'q', '\x2', '\x2', '\x120', '\x122', '\x5', '\x12', '\n', '\x2', 
		'\x121', '\x120', '\x3', '\x2', '\x2', '\x2', '\x121', '\x122', '\x3', 
		'\x2', '\x2', '\x2', '\x122', '\x125', '\x3', '\x2', '\x2', '\x2', '\x123', 
		'\x124', '\a', '\x13', '\x2', '\x2', '\x124', '\x126', '\x5', '\xC8', 
		'\x65', '\x2', '\x125', '\x123', '\x3', '\x2', '\x2', '\x2', '\x125', 
		'\x126', '\x3', '\x2', '\x2', '\x2', '\x126', '\x129', '\x3', '\x2', '\x2', 
		'\x2', '\x127', '\x128', '\a', '\x1A', '\x2', '\x2', '\x128', '\x12A', 
		'\x5', '\xC6', '\x64', '\x2', '\x129', '\x127', '\x3', '\x2', '\x2', '\x2', 
		'\x129', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x12B', '\x3', 
		'\x2', '\x2', '\x2', '\x12B', '\x12C', '\x5', '\"', '\x12', '\x2', '\x12C', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12E', '\a', 'J', '\x2', 
		'\x2', '\x12E', '\x133', '\x5', '\x14', '\v', '\x2', '\x12F', '\x130', 
		'\a', '\x46', '\x2', '\x2', '\x130', '\x132', '\x5', '\x14', '\v', '\x2', 
		'\x131', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x132', '\x135', '\x3', 
		'\x2', '\x2', '\x2', '\x133', '\x131', '\x3', '\x2', '\x2', '\x2', '\x133', 
		'\x134', '\x3', '\x2', '\x2', '\x2', '\x134', '\x136', '\x3', '\x2', '\x2', 
		'\x2', '\x135', '\x133', '\x3', '\x2', '\x2', '\x2', '\x136', '\x137', 
		'\a', 'I', '\x2', '\x2', '\x137', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x138', '\x13A', '\x5', 'h', '\x35', '\x2', '\x139', '\x138', '\x3', 
		'\x2', '\x2', '\x2', '\x13A', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x13B', 
		'\x139', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x13C', '\x3', '\x2', '\x2', 
		'\x2', '\x13C', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x13B', 
		'\x3', '\x2', '\x2', '\x2', '\x13E', '\x147', '\a', 'q', '\x2', '\x2', 
		'\x13F', '\x143', '\a', '\x13', '\x2', '\x2', '\x140', '\x142', '\x5', 
		'h', '\x35', '\x2', '\x141', '\x140', '\x3', '\x2', '\x2', '\x2', '\x142', 
		'\x145', '\x3', '\x2', '\x2', '\x2', '\x143', '\x141', '\x3', '\x2', '\x2', 
		'\x2', '\x143', '\x144', '\x3', '\x2', '\x2', '\x2', '\x144', '\x146', 
		'\x3', '\x2', '\x2', '\x2', '\x145', '\x143', '\x3', '\x2', '\x2', '\x2', 
		'\x146', '\x148', '\x5', '\x16', '\f', '\x2', '\x147', '\x13F', '\x3', 
		'\x2', '\x2', '\x2', '\x147', '\x148', '\x3', '\x2', '\x2', '\x2', '\x148', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x149', '\x14E', '\x5', '\xC8', '\x65', 
		'\x2', '\x14A', '\x14B', '\a', '[', '\x2', '\x2', '\x14B', '\x14D', '\x5', 
		'\xC8', '\x65', '\x2', '\x14C', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x14D', 
		'\x150', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x14C', '\x3', '\x2', '\x2', 
		'\x2', '\x14E', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x150', '\x14E', '\x3', '\x2', '\x2', '\x2', 
		'\x151', '\x152', '\a', '\x12', '\x2', '\x2', '\x152', '\x155', '\a', 
		'q', '\x2', '\x2', '\x153', '\x154', '\a', '\x1A', '\x2', '\x2', '\x154', 
		'\x156', '\x5', '\xC6', '\x64', '\x2', '\x155', '\x153', '\x3', '\x2', 
		'\x2', '\x2', '\x155', '\x156', '\x3', '\x2', '\x2', '\x2', '\x156', '\x157', 
		'\x3', '\x2', '\x2', '\x2', '\x157', '\x159', '\a', '\x41', '\x2', '\x2', 
		'\x158', '\x15A', '\x5', '\x1A', '\xE', '\x2', '\x159', '\x158', '\x3', 
		'\x2', '\x2', '\x2', '\x159', '\x15A', '\x3', '\x2', '\x2', '\x2', '\x15A', 
		'\x15C', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x15D', '\a', '\x46', '\x2', 
		'\x2', '\x15C', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x15D', 
		'\x3', '\x2', '\x2', '\x2', '\x15D', '\x15F', '\x3', '\x2', '\x2', '\x2', 
		'\x15E', '\x160', '\x5', '\x1E', '\x10', '\x2', '\x15F', '\x15E', '\x3', 
		'\x2', '\x2', '\x2', '\x15F', '\x160', '\x3', '\x2', '\x2', '\x2', '\x160', 
		'\x161', '\x3', '\x2', '\x2', '\x2', '\x161', '\x162', '\a', '\x42', '\x2', 
		'\x2', '\x162', '\x19', '\x3', '\x2', '\x2', '\x2', '\x163', '\x168', 
		'\x5', '\x1C', '\xF', '\x2', '\x164', '\x165', '\a', '\x46', '\x2', '\x2', 
		'\x165', '\x167', '\x5', '\x1C', '\xF', '\x2', '\x166', '\x164', '\x3', 
		'\x2', '\x2', '\x2', '\x167', '\x16A', '\x3', '\x2', '\x2', '\x2', '\x168', 
		'\x166', '\x3', '\x2', '\x2', '\x2', '\x168', '\x169', '\x3', '\x2', '\x2', 
		'\x2', '\x169', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x16A', '\x168', 
		'\x3', '\x2', '\x2', '\x2', '\x16B', '\x16D', '\x5', 'h', '\x35', '\x2', 
		'\x16C', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x170', '\x3', 
		'\x2', '\x2', '\x2', '\x16E', '\x16C', '\x3', '\x2', '\x2', '\x2', '\x16E', 
		'\x16F', '\x3', '\x2', '\x2', '\x2', '\x16F', '\x171', '\x3', '\x2', '\x2', 
		'\x2', '\x170', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x171', '\x173', 
		'\a', 'q', '\x2', '\x2', '\x172', '\x174', '\x5', '\xD2', 'j', '\x2', 
		'\x173', '\x172', '\x3', '\x2', '\x2', '\x2', '\x173', '\x174', '\x3', 
		'\x2', '\x2', '\x2', '\x174', '\x176', '\x3', '\x2', '\x2', '\x2', '\x175', 
		'\x177', '\x5', '\"', '\x12', '\x2', '\x176', '\x175', '\x3', '\x2', '\x2', 
		'\x2', '\x176', '\x177', '\x3', '\x2', '\x2', '\x2', '\x177', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\x178', '\x17C', '\a', '\x45', '\x2', '\x2', 
		'\x179', '\x17B', '\x5', '&', '\x14', '\x2', '\x17A', '\x179', '\x3', 
		'\x2', '\x2', '\x2', '\x17B', '\x17E', '\x3', '\x2', '\x2', '\x2', '\x17C', 
		'\x17A', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x17D', '\x3', '\x2', '\x2', 
		'\x2', '\x17D', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x17C', 
		'\x3', '\x2', '\x2', '\x2', '\x17F', '\x180', '\a', '\x1E', '\x2', '\x2', 
		'\x180', '\x182', '\a', 'q', '\x2', '\x2', '\x181', '\x183', '\x5', '\x12', 
		'\n', '\x2', '\x182', '\x181', '\x3', '\x2', '\x2', '\x2', '\x182', '\x183', 
		'\x3', '\x2', '\x2', '\x2', '\x183', '\x186', '\x3', '\x2', '\x2', '\x2', 
		'\x184', '\x185', '\a', '\x13', '\x2', '\x2', '\x185', '\x187', '\x5', 
		'\xC6', '\x64', '\x2', '\x186', '\x184', '\x3', '\x2', '\x2', '\x2', '\x186', 
		'\x187', '\x3', '\x2', '\x2', '\x2', '\x187', '\x188', '\x3', '\x2', '\x2', 
		'\x2', '\x188', '\x189', '\x5', '$', '\x13', '\x2', '\x189', '!', '\x3', 
		'\x2', '\x2', '\x2', '\x18A', '\x18E', '\a', '\x41', '\x2', '\x2', '\x18B', 
		'\x18D', '\x5', '&', '\x14', '\x2', '\x18C', '\x18B', '\x3', '\x2', '\x2', 
		'\x2', '\x18D', '\x190', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x18C', 
		'\x3', '\x2', '\x2', '\x2', '\x18E', '\x18F', '\x3', '\x2', '\x2', '\x2', 
		'\x18F', '\x191', '\x3', '\x2', '\x2', '\x2', '\x190', '\x18E', '\x3', 
		'\x2', '\x2', '\x2', '\x191', '\x192', '\a', '\x42', '\x2', '\x2', '\x192', 
		'#', '\x3', '\x2', '\x2', '\x2', '\x193', '\x197', '\a', '\x41', '\x2', 
		'\x2', '\x194', '\x196', '\x5', '\x38', '\x1D', '\x2', '\x195', '\x194', 
		'\x3', '\x2', '\x2', '\x2', '\x196', '\x199', '\x3', '\x2', '\x2', '\x2', 
		'\x197', '\x195', '\x3', '\x2', '\x2', '\x2', '\x197', '\x198', '\x3', 
		'\x2', '\x2', '\x2', '\x198', '\x19A', '\x3', '\x2', '\x2', '\x2', '\x199', 
		'\x197', '\x3', '\x2', '\x2', '\x2', '\x19A', '\x19B', '\a', '\x42', '\x2', 
		'\x2', '\x19B', '%', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x1A9', '\a', 
		'\x45', '\x2', '\x2', '\x19D', '\x19F', '\a', '(', '\x2', '\x2', '\x19E', 
		'\x19D', '\x3', '\x2', '\x2', '\x2', '\x19E', '\x19F', '\x3', '\x2', '\x2', 
		'\x2', '\x19F', '\x1A0', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x1A9', 
		'\x5', '\x82', '\x42', '\x2', '\x1A1', '\x1A3', '\x5', '\n', '\x6', '\x2', 
		'\x1A2', '\x1A1', '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A6', '\x3', 
		'\x2', '\x2', '\x2', '\x1A4', '\x1A2', '\x3', '\x2', '\x2', '\x2', '\x1A4', 
		'\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A7', '\x3', '\x2', '\x2', 
		'\x2', '\x1A6', '\x1A4', '\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1A9', 
		'\x5', '(', '\x15', '\x2', '\x1A8', '\x19C', '\x3', '\x2', '\x2', '\x2', 
		'\x1A8', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1A4', '\x3', 
		'\x2', '\x2', '\x2', '\x1A9', '\'', '\x3', '\x2', '\x2', '\x2', '\x1AA', 
		'\x1B4', '\x5', '*', '\x16', '\x2', '\x1AB', '\x1B4', '\x5', '\x30', '\x19', 
		'\x2', '\x1AC', '\x1B4', '\x5', '\x36', '\x1C', '\x2', '\x1AD', '\x1B4', 
		'\x5', '\x34', '\x1B', '\x2', '\x1AE', '\x1B4', '\x5', '\x32', '\x1A', 
		'\x2', '\x1AF', '\x1B4', '\x5', ' ', '\x11', '\x2', '\x1B0', '\x1B4', 
		'\x5', 'r', ':', '\x2', '\x1B1', '\x1B4', '\x5', '\x10', '\t', '\x2', 
		'\x1B2', '\x1B4', '\x5', '\x18', '\r', '\x2', '\x1B3', '\x1AA', '\x3', 
		'\x2', '\x2', '\x2', '\x1B3', '\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1B3', 
		'\x1AC', '\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1AD', '\x3', '\x2', '\x2', 
		'\x2', '\x1B3', '\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1AF', 
		'\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1B0', '\x3', '\x2', '\x2', '\x2', 
		'\x1B3', '\x1B1', '\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1B2', '\x3', 
		'\x2', '\x2', '\x2', '\x1B4', ')', '\x3', '\x2', '\x2', '\x2', '\x1B5', 
		'\x1B6', '\x5', '.', '\x18', '\x2', '\x1B6', '\x1B7', '\a', 'q', '\x2', 
		'\x2', '\x1B7', '\x1BC', '\x5', 'V', ',', '\x2', '\x1B8', '\x1B9', '\a', 
		'\x43', '\x2', '\x2', '\x1B9', '\x1BB', '\a', '\x44', '\x2', '\x2', '\x1BA', 
		'\x1B8', '\x3', '\x2', '\x2', '\x2', '\x1BB', '\x1BE', '\x3', '\x2', '\x2', 
		'\x2', '\x1BC', '\x1BA', '\x3', '\x2', '\x2', '\x2', '\x1BC', '\x1BD', 
		'\x3', '\x2', '\x2', '\x2', '\x1BD', '\x1C1', '\x3', '\x2', '\x2', '\x2', 
		'\x1BE', '\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1C0', '\a', 
		'/', '\x2', '\x2', '\x1C0', '\x1C2', '\x5', 'T', '+', '\x2', '\x1C1', 
		'\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1C2', '\x3', '\x2', '\x2', 
		'\x2', '\x1C2', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1C4', 
		'\x5', ',', '\x17', '\x2', '\x1C4', '+', '\x3', '\x2', '\x2', '\x2', '\x1C5', 
		'\x1C8', '\x5', '\x82', '\x42', '\x2', '\x1C6', '\x1C8', '\a', '\x45', 
		'\x2', '\x2', '\x1C7', '\x1C5', '\x3', '\x2', '\x2', '\x2', '\x1C7', '\x1C6', 
		'\x3', '\x2', '\x2', '\x2', '\x1C8', '-', '\x3', '\x2', '\x2', '\x2', 
		'\x1C9', '\x1CC', '\x5', '\xC8', '\x65', '\x2', '\x1CA', '\x1CC', '\a', 
		'\x32', '\x2', '\x2', '\x1CB', '\x1C9', '\x3', '\x2', '\x2', '\x2', '\x1CB', 
		'\x1CA', '\x3', '\x2', '\x2', '\x2', '\x1CC', '/', '\x3', '\x2', '\x2', 
		'\x2', '\x1CD', '\x1CE', '\x5', '\x12', '\n', '\x2', '\x1CE', '\x1CF', 
		'\x5', '*', '\x16', '\x2', '\x1CF', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x1D0', '\x1D1', '\x5', '\x12', '\n', '\x2', '\x1D1', '\x1D2', '\x5', 
		'\x34', '\x1B', '\x2', '\x1D2', '\x33', '\x3', '\x2', '\x2', '\x2', '\x1D3', 
		'\x1D4', '\a', 'q', '\x2', '\x2', '\x1D4', '\x1D7', '\x5', 'V', ',', '\x2', 
		'\x1D5', '\x1D6', '\a', '/', '\x2', '\x2', '\x1D6', '\x1D8', '\x5', 'T', 
		'+', '\x2', '\x1D7', '\x1D5', '\x3', '\x2', '\x2', '\x2', '\x1D7', '\x1D8', 
		'\x3', '\x2', '\x2', '\x2', '\x1D8', '\x1D9', '\x3', '\x2', '\x2', '\x2', 
		'\x1D9', '\x1DA', '\x5', '\x82', '\x42', '\x2', '\x1DA', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x1DB', '\x1DC', '\x5', '\xC8', '\x65', '\x2', '\x1DC', 
		'\x1DD', '\x5', '\x46', '$', '\x2', '\x1DD', '\x1DE', '\a', '\x45', '\x2', 
		'\x2', '\x1DE', '\x37', '\x3', '\x2', '\x2', '\x2', '\x1DF', '\x1E1', 
		'\x5', '\n', '\x6', '\x2', '\x1E0', '\x1DF', '\x3', '\x2', '\x2', '\x2', 
		'\x1E1', '\x1E4', '\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1E0', '\x3', 
		'\x2', '\x2', '\x2', '\x1E2', '\x1E3', '\x3', '\x2', '\x2', '\x2', '\x1E3', 
		'\x1E5', '\x3', '\x2', '\x2', '\x2', '\x1E4', '\x1E2', '\x3', '\x2', '\x2', 
		'\x2', '\x1E5', '\x1E8', '\x5', ':', '\x1E', '\x2', '\x1E6', '\x1E8', 
		'\a', '\x45', '\x2', '\x2', '\x1E7', '\x1E2', '\x3', '\x2', '\x2', '\x2', 
		'\x1E7', '\x1E6', '\x3', '\x2', '\x2', '\x2', '\x1E8', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x1E9', '\x1F1', '\x5', '<', '\x1F', '\x2', '\x1EA', 
		'\x1F1', '\x5', '@', '!', '\x2', '\x1EB', '\x1F1', '\x5', '\x44', '#', 
		'\x2', '\x1EC', '\x1F1', '\x5', ' ', '\x11', '\x2', '\x1ED', '\x1F1', 
		'\x5', 'r', ':', '\x2', '\x1EE', '\x1F1', '\x5', '\x10', '\t', '\x2', 
		'\x1EF', '\x1F1', '\x5', '\x18', '\r', '\x2', '\x1F0', '\x1E9', '\x3', 
		'\x2', '\x2', '\x2', '\x1F0', '\x1EA', '\x3', '\x2', '\x2', '\x2', '\x1F0', 
		'\x1EB', '\x3', '\x2', '\x2', '\x2', '\x1F0', '\x1EC', '\x3', '\x2', '\x2', 
		'\x2', '\x1F0', '\x1ED', '\x3', '\x2', '\x2', '\x2', '\x1F0', '\x1EE', 
		'\x3', '\x2', '\x2', '\x2', '\x1F0', '\x1EF', '\x3', '\x2', '\x2', '\x2', 
		'\x1F1', ';', '\x3', '\x2', '\x2', '\x2', '\x1F2', '\x1F3', '\x5', '\xC8', 
		'\x65', '\x2', '\x1F3', '\x1F8', '\x5', '>', ' ', '\x2', '\x1F4', '\x1F5', 
		'\a', '\x46', '\x2', '\x2', '\x1F5', '\x1F7', '\x5', '>', ' ', '\x2', 
		'\x1F6', '\x1F4', '\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1FA', '\x3', 
		'\x2', '\x2', '\x2', '\x1F8', '\x1F6', '\x3', '\x2', '\x2', '\x2', '\x1F8', 
		'\x1F9', '\x3', '\x2', '\x2', '\x2', '\x1F9', '\x1FB', '\x3', '\x2', '\x2', 
		'\x2', '\x1FA', '\x1F8', '\x3', '\x2', '\x2', '\x2', '\x1FB', '\x1FC', 
		'\a', '\x45', '\x2', '\x2', '\x1FC', '=', '\x3', '\x2', '\x2', '\x2', 
		'\x1FD', '\x202', '\a', 'q', '\x2', '\x2', '\x1FE', '\x1FF', '\a', '\x43', 
		'\x2', '\x2', '\x1FF', '\x201', '\a', '\x44', '\x2', '\x2', '\x200', '\x1FE', 
		'\x3', '\x2', '\x2', '\x2', '\x201', '\x204', '\x3', '\x2', '\x2', '\x2', 
		'\x202', '\x200', '\x3', '\x2', '\x2', '\x2', '\x202', '\x203', '\x3', 
		'\x2', '\x2', '\x2', '\x203', '\x205', '\x3', '\x2', '\x2', '\x2', '\x204', 
		'\x202', '\x3', '\x2', '\x2', '\x2', '\x205', '\x206', '\a', 'H', '\x2', 
		'\x2', '\x206', '\x207', '\x5', 'L', '\'', '\x2', '\x207', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x208', '\x20A', '\x5', '\x42', '\"', '\x2', '\x209', 
		'\x208', '\x3', '\x2', '\x2', '\x2', '\x20A', '\x20D', '\x3', '\x2', '\x2', 
		'\x2', '\x20B', '\x209', '\x3', '\x2', '\x2', '\x2', '\x20B', '\x20C', 
		'\x3', '\x2', '\x2', '\x2', '\x20C', '\x218', '\x3', '\x2', '\x2', '\x2', 
		'\x20D', '\x20B', '\x3', '\x2', '\x2', '\x2', '\x20E', '\x219', '\x5', 
		'.', '\x18', '\x2', '\x20F', '\x213', '\x5', '\x12', '\n', '\x2', '\x210', 
		'\x212', '\x5', 'h', '\x35', '\x2', '\x211', '\x210', '\x3', '\x2', '\x2', 
		'\x2', '\x212', '\x215', '\x3', '\x2', '\x2', '\x2', '\x213', '\x211', 
		'\x3', '\x2', '\x2', '\x2', '\x213', '\x214', '\x3', '\x2', '\x2', '\x2', 
		'\x214', '\x216', '\x3', '\x2', '\x2', '\x2', '\x215', '\x213', '\x3', 
		'\x2', '\x2', '\x2', '\x216', '\x217', '\x5', '.', '\x18', '\x2', '\x217', 
		'\x219', '\x3', '\x2', '\x2', '\x2', '\x218', '\x20E', '\x3', '\x2', '\x2', 
		'\x2', '\x218', '\x20F', '\x3', '\x2', '\x2', '\x2', '\x219', '\x21A', 
		'\x3', '\x2', '\x2', '\x2', '\x21A', '\x21B', '\a', 'q', '\x2', '\x2', 
		'\x21B', '\x220', '\x5', 'V', ',', '\x2', '\x21C', '\x21D', '\a', '\x43', 
		'\x2', '\x2', '\x21D', '\x21F', '\a', '\x44', '\x2', '\x2', '\x21E', '\x21C', 
		'\x3', '\x2', '\x2', '\x2', '\x21F', '\x222', '\x3', '\x2', '\x2', '\x2', 
		'\x220', '\x21E', '\x3', '\x2', '\x2', '\x2', '\x220', '\x221', '\x3', 
		'\x2', '\x2', '\x2', '\x221', '\x225', '\x3', '\x2', '\x2', '\x2', '\x222', 
		'\x220', '\x3', '\x2', '\x2', '\x2', '\x223', '\x224', '\a', '/', '\x2', 
		'\x2', '\x224', '\x226', '\x5', 'T', '+', '\x2', '\x225', '\x223', '\x3', 
		'\x2', '\x2', '\x2', '\x225', '\x226', '\x3', '\x2', '\x2', '\x2', '\x226', 
		'\x227', '\x3', '\x2', '\x2', '\x2', '\x227', '\x228', '\x5', ',', '\x17', 
		'\x2', '\x228', '\x41', '\x3', '\x2', '\x2', '\x2', '\x229', '\x230', 
		'\x5', 'h', '\x35', '\x2', '\x22A', '\x230', '\a', '%', '\x2', '\x2', 
		'\x22B', '\x230', '\a', '\x3', '\x2', '\x2', '\x22C', '\x230', '\a', '\xE', 
		'\x2', '\x2', '\x22D', '\x230', '\a', '(', '\x2', '\x2', '\x22E', '\x230', 
		'\a', ')', '\x2', '\x2', '\x22F', '\x229', '\x3', '\x2', '\x2', '\x2', 
		'\x22F', '\x22A', '\x3', '\x2', '\x2', '\x2', '\x22F', '\x22B', '\x3', 
		'\x2', '\x2', '\x2', '\x22F', '\x22C', '\x3', '\x2', '\x2', '\x2', '\x22F', 
		'\x22D', '\x3', '\x2', '\x2', '\x2', '\x22F', '\x22E', '\x3', '\x2', '\x2', 
		'\x2', '\x230', '\x43', '\x3', '\x2', '\x2', '\x2', '\x231', '\x232', 
		'\x5', '\x12', '\n', '\x2', '\x232', '\x233', '\x5', '@', '!', '\x2', 
		'\x233', '\x45', '\x3', '\x2', '\x2', '\x2', '\x234', '\x239', '\x5', 
		'H', '%', '\x2', '\x235', '\x236', '\a', '\x46', '\x2', '\x2', '\x236', 
		'\x238', '\x5', 'H', '%', '\x2', '\x237', '\x235', '\x3', '\x2', '\x2', 
		'\x2', '\x238', '\x23B', '\x3', '\x2', '\x2', '\x2', '\x239', '\x237', 
		'\x3', '\x2', '\x2', '\x2', '\x239', '\x23A', '\x3', '\x2', '\x2', '\x2', 
		'\x23A', 'G', '\x3', '\x2', '\x2', '\x2', '\x23B', '\x239', '\x3', '\x2', 
		'\x2', '\x2', '\x23C', '\x23F', '\x5', 'J', '&', '\x2', '\x23D', '\x23E', 
		'\a', 'H', '\x2', '\x2', '\x23E', '\x240', '\x5', 'L', '\'', '\x2', '\x23F', 
		'\x23D', '\x3', '\x2', '\x2', '\x2', '\x23F', '\x240', '\x3', '\x2', '\x2', 
		'\x2', '\x240', 'I', '\x3', '\x2', '\x2', '\x2', '\x241', '\x246', '\a', 
		'q', '\x2', '\x2', '\x242', '\x243', '\a', '\x43', '\x2', '\x2', '\x243', 
		'\x245', '\a', '\x44', '\x2', '\x2', '\x244', '\x242', '\x3', '\x2', '\x2', 
		'\x2', '\x245', '\x248', '\x3', '\x2', '\x2', '\x2', '\x246', '\x244', 
		'\x3', '\x2', '\x2', '\x2', '\x246', '\x247', '\x3', '\x2', '\x2', '\x2', 
		'\x247', 'K', '\x3', '\x2', '\x2', '\x2', '\x248', '\x246', '\x3', '\x2', 
		'\x2', '\x2', '\x249', '\x24C', '\x5', 'N', '(', '\x2', '\x24A', '\x24C', 
		'\x5', '\xA8', 'U', '\x2', '\x24B', '\x249', '\x3', '\x2', '\x2', '\x2', 
		'\x24B', '\x24A', '\x3', '\x2', '\x2', '\x2', '\x24C', 'M', '\x3', '\x2', 
		'\x2', '\x2', '\x24D', '\x259', '\a', '\x41', '\x2', '\x2', '\x24E', '\x253', 
		'\x5', 'L', '\'', '\x2', '\x24F', '\x250', '\a', '\x46', '\x2', '\x2', 
		'\x250', '\x252', '\x5', 'L', '\'', '\x2', '\x251', '\x24F', '\x3', '\x2', 
		'\x2', '\x2', '\x252', '\x255', '\x3', '\x2', '\x2', '\x2', '\x253', '\x251', 
		'\x3', '\x2', '\x2', '\x2', '\x253', '\x254', '\x3', '\x2', '\x2', '\x2', 
		'\x254', '\x257', '\x3', '\x2', '\x2', '\x2', '\x255', '\x253', '\x3', 
		'\x2', '\x2', '\x2', '\x256', '\x258', '\a', '\x46', '\x2', '\x2', '\x257', 
		'\x256', '\x3', '\x2', '\x2', '\x2', '\x257', '\x258', '\x3', '\x2', '\x2', 
		'\x2', '\x258', '\x25A', '\x3', '\x2', '\x2', '\x2', '\x259', '\x24E', 
		'\x3', '\x2', '\x2', '\x2', '\x259', '\x25A', '\x3', '\x2', '\x2', '\x2', 
		'\x25A', '\x25B', '\x3', '\x2', '\x2', '\x2', '\x25B', '\x25C', '\a', 
		'\x42', '\x2', '\x2', '\x25C', 'O', '\x3', '\x2', '\x2', '\x2', '\x25D', 
		'\x25F', '\a', 'q', '\x2', '\x2', '\x25E', '\x260', '\x5', '\xCC', 'g', 
		'\x2', '\x25F', '\x25E', '\x3', '\x2', '\x2', '\x2', '\x25F', '\x260', 
		'\x3', '\x2', '\x2', '\x2', '\x260', '\x268', '\x3', '\x2', '\x2', '\x2', 
		'\x261', '\x262', '\a', 'G', '\x2', '\x2', '\x262', '\x264', '\a', 'q', 
		'\x2', '\x2', '\x263', '\x265', '\x5', '\xCC', 'g', '\x2', '\x264', '\x263', 
		'\x3', '\x2', '\x2', '\x2', '\x264', '\x265', '\x3', '\x2', '\x2', '\x2', 
		'\x265', '\x267', '\x3', '\x2', '\x2', '\x2', '\x266', '\x261', '\x3', 
		'\x2', '\x2', '\x2', '\x267', '\x26A', '\x3', '\x2', '\x2', '\x2', '\x268', 
		'\x266', '\x3', '\x2', '\x2', '\x2', '\x268', '\x269', '\x3', '\x2', '\x2', 
		'\x2', '\x269', 'Q', '\x3', '\x2', '\x2', '\x2', '\x26A', '\x268', '\x3', 
		'\x2', '\x2', '\x2', '\x26B', '\x278', '\x5', '\xC8', '\x65', '\x2', '\x26C', 
		'\x26E', '\x5', 'h', '\x35', '\x2', '\x26D', '\x26C', '\x3', '\x2', '\x2', 
		'\x2', '\x26E', '\x271', '\x3', '\x2', '\x2', '\x2', '\x26F', '\x26D', 
		'\x3', '\x2', '\x2', '\x2', '\x26F', '\x270', '\x3', '\x2', '\x2', '\x2', 
		'\x270', '\x272', '\x3', '\x2', '\x2', '\x2', '\x271', '\x26F', '\x3', 
		'\x2', '\x2', '\x2', '\x272', '\x275', '\a', 'M', '\x2', '\x2', '\x273', 
		'\x274', '\t', '\x2', '\x2', '\x2', '\x274', '\x276', '\x5', '\xC8', '\x65', 
		'\x2', '\x275', '\x273', '\x3', '\x2', '\x2', '\x2', '\x275', '\x276', 
		'\x3', '\x2', '\x2', '\x2', '\x276', '\x278', '\x3', '\x2', '\x2', '\x2', 
		'\x277', '\x26B', '\x3', '\x2', '\x2', '\x2', '\x277', '\x26F', '\x3', 
		'\x2', '\x2', '\x2', '\x278', 'S', '\x3', '\x2', '\x2', '\x2', '\x279', 
		'\x27E', '\x5', '^', '\x30', '\x2', '\x27A', '\x27B', '\a', '\x46', '\x2', 
		'\x2', '\x27B', '\x27D', '\x5', '^', '\x30', '\x2', '\x27C', '\x27A', 
		'\x3', '\x2', '\x2', '\x2', '\x27D', '\x280', '\x3', '\x2', '\x2', '\x2', 
		'\x27E', '\x27C', '\x3', '\x2', '\x2', '\x2', '\x27E', '\x27F', '\x3', 
		'\x2', '\x2', '\x2', '\x27F', 'U', '\x3', '\x2', '\x2', '\x2', '\x280', 
		'\x27E', '\x3', '\x2', '\x2', '\x2', '\x281', '\x283', '\a', '?', '\x2', 
		'\x2', '\x282', '\x284', '\x5', 'X', '-', '\x2', '\x283', '\x282', '\x3', 
		'\x2', '\x2', '\x2', '\x283', '\x284', '\x3', '\x2', '\x2', '\x2', '\x284', 
		'\x285', '\x3', '\x2', '\x2', '\x2', '\x285', '\x286', '\a', '@', '\x2', 
		'\x2', '\x286', 'W', '\x3', '\x2', '\x2', '\x2', '\x287', '\x28C', '\x5', 
		'Z', '.', '\x2', '\x288', '\x289', '\a', '\x46', '\x2', '\x2', '\x289', 
		'\x28B', '\x5', 'Z', '.', '\x2', '\x28A', '\x288', '\x3', '\x2', '\x2', 
		'\x2', '\x28B', '\x28E', '\x3', '\x2', '\x2', '\x2', '\x28C', '\x28A', 
		'\x3', '\x2', '\x2', '\x2', '\x28C', '\x28D', '\x3', '\x2', '\x2', '\x2', 
		'\x28D', '\x291', '\x3', '\x2', '\x2', '\x2', '\x28E', '\x28C', '\x3', 
		'\x2', '\x2', '\x2', '\x28F', '\x290', '\a', '\x46', '\x2', '\x2', '\x290', 
		'\x292', '\x5', '\\', '/', '\x2', '\x291', '\x28F', '\x3', '\x2', '\x2', 
		'\x2', '\x291', '\x292', '\x3', '\x2', '\x2', '\x2', '\x292', '\x295', 
		'\x3', '\x2', '\x2', '\x2', '\x293', '\x295', '\x5', '\\', '/', '\x2', 
		'\x294', '\x287', '\x3', '\x2', '\x2', '\x2', '\x294', '\x293', '\x3', 
		'\x2', '\x2', '\x2', '\x295', 'Y', '\x3', '\x2', '\x2', '\x2', '\x296', 
		'\x298', '\x5', '\xE', '\b', '\x2', '\x297', '\x296', '\x3', '\x2', '\x2', 
		'\x2', '\x298', '\x29B', '\x3', '\x2', '\x2', '\x2', '\x299', '\x297', 
		'\x3', '\x2', '\x2', '\x2', '\x299', '\x29A', '\x3', '\x2', '\x2', '\x2', 
		'\x29A', '\x29C', '\x3', '\x2', '\x2', '\x2', '\x29B', '\x299', '\x3', 
		'\x2', '\x2', '\x2', '\x29C', '\x29D', '\x5', '\xC8', '\x65', '\x2', '\x29D', 
		'\x29E', '\x5', 'J', '&', '\x2', '\x29E', '[', '\x3', '\x2', '\x2', '\x2', 
		'\x29F', '\x2A1', '\x5', '\xE', '\b', '\x2', '\x2A0', '\x29F', '\x3', 
		'\x2', '\x2', '\x2', '\x2A1', '\x2A4', '\x3', '\x2', '\x2', '\x2', '\x2A2', 
		'\x2A0', '\x3', '\x2', '\x2', '\x2', '\x2A2', '\x2A3', '\x3', '\x2', '\x2', 
		'\x2', '\x2A3', '\x2A5', '\x3', '\x2', '\x2', '\x2', '\x2A4', '\x2A2', 
		'\x3', '\x2', '\x2', '\x2', '\x2A5', '\x2A9', '\x5', '\xC8', '\x65', '\x2', 
		'\x2A6', '\x2A8', '\x5', 'h', '\x35', '\x2', '\x2A7', '\x2A6', '\x3', 
		'\x2', '\x2', '\x2', '\x2A8', '\x2AB', '\x3', '\x2', '\x2', '\x2', '\x2A9', 
		'\x2A7', '\x3', '\x2', '\x2', '\x2', '\x2A9', '\x2AA', '\x3', '\x2', '\x2', 
		'\x2', '\x2AA', '\x2AC', '\x3', '\x2', '\x2', '\x2', '\x2AB', '\x2A9', 
		'\x3', '\x2', '\x2', '\x2', '\x2AC', '\x2AD', '\a', 'm', '\x2', '\x2', 
		'\x2AD', '\x2AE', '\x5', 'J', '&', '\x2', '\x2AE', ']', '\x3', '\x2', 
		'\x2', '\x2', '\x2AF', '\x2B4', '\a', 'q', '\x2', '\x2', '\x2B0', '\x2B1', 
		'\a', 'G', '\x2', '\x2', '\x2B1', '\x2B3', '\a', 'q', '\x2', '\x2', '\x2B2', 
		'\x2B0', '\x3', '\x2', '\x2', '\x2', '\x2B3', '\x2B6', '\x3', '\x2', '\x2', 
		'\x2', '\x2B4', '\x2B2', '\x3', '\x2', '\x2', '\x2', '\x2B4', '\x2B5', 
		'\x3', '\x2', '\x2', '\x2', '\x2B5', '_', '\x3', '\x2', '\x2', '\x2', 
		'\x2B6', '\x2B4', '\x3', '\x2', '\x2', '\x2', '\x2B7', '\x2BE', '\x5', 
		'\x62', '\x32', '\x2', '\x2B8', '\x2BE', '\x5', '\x64', '\x33', '\x2', 
		'\x2B9', '\x2BE', '\a', '<', '\x2', '\x2', '\x2BA', '\x2BE', '\a', '=', 
		'\x2', '\x2', '\x2BB', '\x2BE', '\a', ';', '\x2', '\x2', '\x2BC', '\x2BE', 
		'\a', '>', '\x2', '\x2', '\x2BD', '\x2B7', '\x3', '\x2', '\x2', '\x2', 
		'\x2BD', '\x2B8', '\x3', '\x2', '\x2', '\x2', '\x2BD', '\x2B9', '\x3', 
		'\x2', '\x2', '\x2', '\x2BD', '\x2BA', '\x3', '\x2', '\x2', '\x2', '\x2BD', 
		'\x2BB', '\x3', '\x2', '\x2', '\x2', '\x2BD', '\x2BC', '\x3', '\x2', '\x2', 
		'\x2', '\x2BE', '\x61', '\x3', '\x2', '\x2', '\x2', '\x2BF', '\x2C0', 
		'\t', '\x3', '\x2', '\x2', '\x2C0', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\x2C1', '\x2C2', '\t', '\x4', '\x2', '\x2', '\x2C2', '\x65', '\x3', '\x2', 
		'\x2', '\x2', '\x2C3', '\x2C4', '\a', 'q', '\x2', '\x2', '\x2C4', '\x2C6', 
		'\a', 'G', '\x2', '\x2', '\x2C5', '\x2C3', '\x3', '\x2', '\x2', '\x2', 
		'\x2C6', '\x2C9', '\x3', '\x2', '\x2', '\x2', '\x2C7', '\x2C5', '\x3', 
		'\x2', '\x2', '\x2', '\x2C7', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x2C8', 
		'\x2CA', '\x3', '\x2', '\x2', '\x2', '\x2C9', '\x2C7', '\x3', '\x2', '\x2', 
		'\x2', '\x2CA', '\x2CB', '\a', 'l', '\x2', '\x2', '\x2CB', '\x2CC', '\a', 
		'q', '\x2', '\x2', '\x2CC', 'g', '\x3', '\x2', '\x2', '\x2', '\x2CD', 
		'\x2CE', '\a', 'l', '\x2', '\x2', '\x2CE', '\x2D1', '\x5', '^', '\x30', 
		'\x2', '\x2CF', '\x2D1', '\x5', '\x66', '\x34', '\x2', '\x2D0', '\x2CD', 
		'\x3', '\x2', '\x2', '\x2', '\x2D0', '\x2CF', '\x3', '\x2', '\x2', '\x2', 
		'\x2D1', '\x2D8', '\x3', '\x2', '\x2', '\x2', '\x2D2', '\x2D5', '\a', 
		'?', '\x2', '\x2', '\x2D3', '\x2D6', '\x5', 'j', '\x36', '\x2', '\x2D4', 
		'\x2D6', '\x5', 'n', '\x38', '\x2', '\x2D5', '\x2D3', '\x3', '\x2', '\x2', 
		'\x2', '\x2D5', '\x2D4', '\x3', '\x2', '\x2', '\x2', '\x2D5', '\x2D6', 
		'\x3', '\x2', '\x2', '\x2', '\x2D6', '\x2D7', '\x3', '\x2', '\x2', '\x2', 
		'\x2D7', '\x2D9', '\a', '@', '\x2', '\x2', '\x2D8', '\x2D2', '\x3', '\x2', 
		'\x2', '\x2', '\x2D8', '\x2D9', '\x3', '\x2', '\x2', '\x2', '\x2D9', 'i', 
		'\x3', '\x2', '\x2', '\x2', '\x2DA', '\x2DF', '\x5', 'l', '\x37', '\x2', 
		'\x2DB', '\x2DC', '\a', '\x46', '\x2', '\x2', '\x2DC', '\x2DE', '\x5', 
		'l', '\x37', '\x2', '\x2DD', '\x2DB', '\x3', '\x2', '\x2', '\x2', '\x2DE', 
		'\x2E1', '\x3', '\x2', '\x2', '\x2', '\x2DF', '\x2DD', '\x3', '\x2', '\x2', 
		'\x2', '\x2DF', '\x2E0', '\x3', '\x2', '\x2', '\x2', '\x2E0', 'k', '\x3', 
		'\x2', '\x2', '\x2', '\x2E1', '\x2DF', '\x3', '\x2', '\x2', '\x2', '\x2E2', 
		'\x2E3', '\a', 'q', '\x2', '\x2', '\x2E3', '\x2E4', '\a', 'H', '\x2', 
		'\x2', '\x2E4', '\x2E5', '\x5', 'n', '\x38', '\x2', '\x2E5', 'm', '\x3', 
		'\x2', '\x2', '\x2', '\x2E6', '\x2EA', '\x5', '\xA8', 'U', '\x2', '\x2E7', 
		'\x2EA', '\x5', 'h', '\x35', '\x2', '\x2E8', '\x2EA', '\x5', 'p', '\x39', 
		'\x2', '\x2E9', '\x2E6', '\x3', '\x2', '\x2', '\x2', '\x2E9', '\x2E7', 
		'\x3', '\x2', '\x2', '\x2', '\x2E9', '\x2E8', '\x3', '\x2', '\x2', '\x2', 
		'\x2EA', 'o', '\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2F4', '\a', '\x41', 
		'\x2', '\x2', '\x2EC', '\x2F1', '\x5', 'n', '\x38', '\x2', '\x2ED', '\x2EE', 
		'\a', '\x46', '\x2', '\x2', '\x2EE', '\x2F0', '\x5', 'n', '\x38', '\x2', 
		'\x2EF', '\x2ED', '\x3', '\x2', '\x2', '\x2', '\x2F0', '\x2F3', '\x3', 
		'\x2', '\x2', '\x2', '\x2F1', '\x2EF', '\x3', '\x2', '\x2', '\x2', '\x2F1', 
		'\x2F2', '\x3', '\x2', '\x2', '\x2', '\x2F2', '\x2F5', '\x3', '\x2', '\x2', 
		'\x2', '\x2F3', '\x2F1', '\x3', '\x2', '\x2', '\x2', '\x2F4', '\x2EC', 
		'\x3', '\x2', '\x2', '\x2', '\x2F4', '\x2F5', '\x3', '\x2', '\x2', '\x2', 
		'\x2F5', '\x2F7', '\x3', '\x2', '\x2', '\x2', '\x2F6', '\x2F8', '\a', 
		'\x46', '\x2', '\x2', '\x2F7', '\x2F6', '\x3', '\x2', '\x2', '\x2', '\x2F7', 
		'\x2F8', '\x3', '\x2', '\x2', '\x2', '\x2F8', '\x2F9', '\x3', '\x2', '\x2', 
		'\x2', '\x2F9', '\x2FA', '\a', '\x42', '\x2', '\x2', '\x2FA', 'q', '\x3', 
		'\x2', '\x2', '\x2', '\x2FB', '\x2FC', '\a', 'l', '\x2', '\x2', '\x2FC', 
		'\x2FD', '\a', '\x1E', '\x2', '\x2', '\x2FD', '\x2FE', '\a', 'q', '\x2', 
		'\x2', '\x2FE', '\x2FF', '\x5', 't', ';', '\x2', '\x2FF', 's', '\x3', 
		'\x2', '\x2', '\x2', '\x300', '\x304', '\a', '\x41', '\x2', '\x2', '\x301', 
		'\x303', '\x5', 'v', '<', '\x2', '\x302', '\x301', '\x3', '\x2', '\x2', 
		'\x2', '\x303', '\x306', '\x3', '\x2', '\x2', '\x2', '\x304', '\x302', 
		'\x3', '\x2', '\x2', '\x2', '\x304', '\x305', '\x3', '\x2', '\x2', '\x2', 
		'\x305', '\x307', '\x3', '\x2', '\x2', '\x2', '\x306', '\x304', '\x3', 
		'\x2', '\x2', '\x2', '\x307', '\x308', '\a', '\x42', '\x2', '\x2', '\x308', 
		'u', '\x3', '\x2', '\x2', '\x2', '\x309', '\x30B', '\x5', '\n', '\x6', 
		'\x2', '\x30A', '\x309', '\x3', '\x2', '\x2', '\x2', '\x30B', '\x30E', 
		'\x3', '\x2', '\x2', '\x2', '\x30C', '\x30A', '\x3', '\x2', '\x2', '\x2', 
		'\x30C', '\x30D', '\x3', '\x2', '\x2', '\x2', '\x30D', '\x30F', '\x3', 
		'\x2', '\x2', '\x2', '\x30E', '\x30C', '\x3', '\x2', '\x2', '\x2', '\x30F', 
		'\x312', '\x5', 'x', '=', '\x2', '\x310', '\x312', '\a', '\x45', '\x2', 
		'\x2', '\x311', '\x30C', '\x3', '\x2', '\x2', '\x2', '\x311', '\x310', 
		'\x3', '\x2', '\x2', '\x2', '\x312', 'w', '\x3', '\x2', '\x2', '\x2', 
		'\x313', '\x314', '\x5', '\xC8', '\x65', '\x2', '\x314', '\x315', '\x5', 
		'z', '>', '\x2', '\x315', '\x316', '\a', '\x45', '\x2', '\x2', '\x316', 
		'\x328', '\x3', '\x2', '\x2', '\x2', '\x317', '\x319', '\x5', '\x10', 
		'\t', '\x2', '\x318', '\x31A', '\a', '\x45', '\x2', '\x2', '\x319', '\x318', 
		'\x3', '\x2', '\x2', '\x2', '\x319', '\x31A', '\x3', '\x2', '\x2', '\x2', 
		'\x31A', '\x328', '\x3', '\x2', '\x2', '\x2', '\x31B', '\x31D', '\x5', 
		' ', '\x11', '\x2', '\x31C', '\x31E', '\a', '\x45', '\x2', '\x2', '\x31D', 
		'\x31C', '\x3', '\x2', '\x2', '\x2', '\x31D', '\x31E', '\x3', '\x2', '\x2', 
		'\x2', '\x31E', '\x328', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x321', 
		'\x5', '\x18', '\r', '\x2', '\x320', '\x322', '\a', '\x45', '\x2', '\x2', 
		'\x321', '\x320', '\x3', '\x2', '\x2', '\x2', '\x321', '\x322', '\x3', 
		'\x2', '\x2', '\x2', '\x322', '\x328', '\x3', '\x2', '\x2', '\x2', '\x323', 
		'\x325', '\x5', 'r', ':', '\x2', '\x324', '\x326', '\a', '\x45', '\x2', 
		'\x2', '\x325', '\x324', '\x3', '\x2', '\x2', '\x2', '\x325', '\x326', 
		'\x3', '\x2', '\x2', '\x2', '\x326', '\x328', '\x3', '\x2', '\x2', '\x2', 
		'\x327', '\x313', '\x3', '\x2', '\x2', '\x2', '\x327', '\x317', '\x3', 
		'\x2', '\x2', '\x2', '\x327', '\x31B', '\x3', '\x2', '\x2', '\x2', '\x327', 
		'\x31F', '\x3', '\x2', '\x2', '\x2', '\x327', '\x323', '\x3', '\x2', '\x2', 
		'\x2', '\x328', 'y', '\x3', '\x2', '\x2', '\x2', '\x329', '\x32C', '\x5', 
		'|', '?', '\x2', '\x32A', '\x32C', '\x5', '~', '@', '\x2', '\x32B', '\x329', 
		'\x3', '\x2', '\x2', '\x2', '\x32B', '\x32A', '\x3', '\x2', '\x2', '\x2', 
		'\x32C', '{', '\x3', '\x2', '\x2', '\x2', '\x32D', '\x32E', '\a', 'q', 
		'\x2', '\x2', '\x32E', '\x32F', '\a', '?', '\x2', '\x2', '\x32F', '\x331', 
		'\a', '@', '\x2', '\x2', '\x330', '\x332', '\x5', '\x80', '\x41', '\x2', 
		'\x331', '\x330', '\x3', '\x2', '\x2', '\x2', '\x331', '\x332', '\x3', 
		'\x2', '\x2', '\x2', '\x332', '}', '\x3', '\x2', '\x2', '\x2', '\x333', 
		'\x334', '\x5', '\x46', '$', '\x2', '\x334', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\x335', '\x336', '\a', '\xE', '\x2', '\x2', '\x336', '\x337', 
		'\x5', 'n', '\x38', '\x2', '\x337', '\x81', '\x3', '\x2', '\x2', '\x2', 
		'\x338', '\x33C', '\a', '\x41', '\x2', '\x2', '\x339', '\x33B', '\x5', 
		'\x84', '\x43', '\x2', '\x33A', '\x339', '\x3', '\x2', '\x2', '\x2', '\x33B', 
		'\x33E', '\x3', '\x2', '\x2', '\x2', '\x33C', '\x33A', '\x3', '\x2', '\x2', 
		'\x2', '\x33C', '\x33D', '\x3', '\x2', '\x2', '\x2', '\x33D', '\x33F', 
		'\x3', '\x2', '\x2', '\x2', '\x33E', '\x33C', '\x3', '\x2', '\x2', '\x2', 
		'\x33F', '\x340', '\a', '\x42', '\x2', '\x2', '\x340', '\x83', '\x3', 
		'\x2', '\x2', '\x2', '\x341', '\x342', '\x5', '\x86', '\x44', '\x2', '\x342', 
		'\x343', '\a', '\x45', '\x2', '\x2', '\x343', '\x347', '\x3', '\x2', '\x2', 
		'\x2', '\x344', '\x347', '\x5', '\x8A', '\x46', '\x2', '\x345', '\x347', 
		'\x5', '\x88', '\x45', '\x2', '\x346', '\x341', '\x3', '\x2', '\x2', '\x2', 
		'\x346', '\x344', '\x3', '\x2', '\x2', '\x2', '\x346', '\x345', '\x3', 
		'\x2', '\x2', '\x2', '\x347', '\x85', '\x3', '\x2', '\x2', '\x2', '\x348', 
		'\x34A', '\x5', '\xE', '\b', '\x2', '\x349', '\x348', '\x3', '\x2', '\x2', 
		'\x2', '\x34A', '\x34D', '\x3', '\x2', '\x2', '\x2', '\x34B', '\x349', 
		'\x3', '\x2', '\x2', '\x2', '\x34B', '\x34C', '\x3', '\x2', '\x2', '\x2', 
		'\x34C', '\x34E', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x34B', '\x3', 
		'\x2', '\x2', '\x2', '\x34E', '\x34F', '\x5', '\xC8', '\x65', '\x2', '\x34F', 
		'\x350', '\x5', '\x46', '$', '\x2', '\x350', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '\x351', '\x353', '\x5', '\f', '\a', '\x2', '\x352', '\x351', '\x3', 
		'\x2', '\x2', '\x2', '\x353', '\x356', '\x3', '\x2', '\x2', '\x2', '\x354', 
		'\x352', '\x3', '\x2', '\x2', '\x2', '\x354', '\x355', '\x3', '\x2', '\x2', 
		'\x2', '\x355', '\x359', '\x3', '\x2', '\x2', '\x2', '\x356', '\x354', 
		'\x3', '\x2', '\x2', '\x2', '\x357', '\x35A', '\x5', '\x10', '\t', '\x2', 
		'\x358', '\x35A', '\x5', ' ', '\x11', '\x2', '\x359', '\x357', '\x3', 
		'\x2', '\x2', '\x2', '\x359', '\x358', '\x3', '\x2', '\x2', '\x2', '\x35A', 
		'\x35D', '\x3', '\x2', '\x2', '\x2', '\x35B', '\x35D', '\a', '\x45', '\x2', 
		'\x2', '\x35C', '\x354', '\x3', '\x2', '\x2', '\x2', '\x35C', '\x35B', 
		'\x3', '\x2', '\x2', '\x2', '\x35D', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\x35E', '\x3C7', '\x5', '\x82', '\x42', '\x2', '\x35F', '\x360', '\a', 
		'\x4', '\x2', '\x2', '\x360', '\x363', '\x5', '\xA8', 'U', '\x2', '\x361', 
		'\x362', '\a', 'N', '\x2', '\x2', '\x362', '\x364', '\x5', '\xA8', 'U', 
		'\x2', '\x363', '\x361', '\x3', '\x2', '\x2', '\x2', '\x363', '\x364', 
		'\x3', '\x2', '\x2', '\x2', '\x364', '\x365', '\x3', '\x2', '\x2', '\x2', 
		'\x365', '\x366', '\a', '\x45', '\x2', '\x2', '\x366', '\x3C7', '\x3', 
		'\x2', '\x2', '\x2', '\x367', '\x368', '\a', '\x18', '\x2', '\x2', '\x368', 
		'\x369', '\x5', '\xA2', 'R', '\x2', '\x369', '\x36C', '\x5', '\x8A', '\x46', 
		'\x2', '\x36A', '\x36B', '\a', '\x11', '\x2', '\x2', '\x36B', '\x36D', 
		'\x5', '\x8A', '\x46', '\x2', '\x36C', '\x36A', '\x3', '\x2', '\x2', '\x2', 
		'\x36C', '\x36D', '\x3', '\x2', '\x2', '\x2', '\x36D', '\x3C7', '\x3', 
		'\x2', '\x2', '\x2', '\x36E', '\x36F', '\a', '\x17', '\x2', '\x2', '\x36F', 
		'\x370', '\a', '?', '\x2', '\x2', '\x370', '\x371', '\x5', '\x9C', 'O', 
		'\x2', '\x371', '\x372', '\a', '@', '\x2', '\x2', '\x372', '\x373', '\x5', 
		'\x8A', '\x46', '\x2', '\x373', '\x3C7', '\x3', '\x2', '\x2', '\x2', '\x374', 
		'\x375', '\a', '\x34', '\x2', '\x2', '\x375', '\x376', '\x5', '\xA2', 
		'R', '\x2', '\x376', '\x377', '\x5', '\x8A', '\x46', '\x2', '\x377', '\x3C7', 
		'\x3', '\x2', '\x2', '\x2', '\x378', '\x379', '\a', '\xF', '\x2', '\x2', 
		'\x379', '\x37A', '\x5', '\x8A', '\x46', '\x2', '\x37A', '\x37B', '\a', 
		'\x34', '\x2', '\x2', '\x37B', '\x37C', '\x5', '\xA2', 'R', '\x2', '\x37C', 
		'\x37D', '\a', '\x45', '\x2', '\x2', '\x37D', '\x3C7', '\x3', '\x2', '\x2', 
		'\x2', '\x37E', '\x37F', '\a', '\x31', '\x2', '\x2', '\x37F', '\x389', 
		'\x5', '\x82', '\x42', '\x2', '\x380', '\x382', '\x5', '\x8C', 'G', '\x2', 
		'\x381', '\x380', '\x3', '\x2', '\x2', '\x2', '\x382', '\x383', '\x3', 
		'\x2', '\x2', '\x2', '\x383', '\x381', '\x3', '\x2', '\x2', '\x2', '\x383', 
		'\x384', '\x3', '\x2', '\x2', '\x2', '\x384', '\x386', '\x3', '\x2', '\x2', 
		'\x2', '\x385', '\x387', '\x5', '\x90', 'I', '\x2', '\x386', '\x385', 
		'\x3', '\x2', '\x2', '\x2', '\x386', '\x387', '\x3', '\x2', '\x2', '\x2', 
		'\x387', '\x38A', '\x3', '\x2', '\x2', '\x2', '\x388', '\x38A', '\x5', 
		'\x90', 'I', '\x2', '\x389', '\x381', '\x3', '\x2', '\x2', '\x2', '\x389', 
		'\x388', '\x3', '\x2', '\x2', '\x2', '\x38A', '\x3C7', '\x3', '\x2', '\x2', 
		'\x2', '\x38B', '\x38C', '\a', '\x31', '\x2', '\x2', '\x38C', '\x38D', 
		'\x5', '\x92', 'J', '\x2', '\x38D', '\x391', '\x5', '\x82', '\x42', '\x2', 
		'\x38E', '\x390', '\x5', '\x8C', 'G', '\x2', '\x38F', '\x38E', '\x3', 
		'\x2', '\x2', '\x2', '\x390', '\x393', '\x3', '\x2', '\x2', '\x2', '\x391', 
		'\x38F', '\x3', '\x2', '\x2', '\x2', '\x391', '\x392', '\x3', '\x2', '\x2', 
		'\x2', '\x392', '\x395', '\x3', '\x2', '\x2', '\x2', '\x393', '\x391', 
		'\x3', '\x2', '\x2', '\x2', '\x394', '\x396', '\x5', '\x90', 'I', '\x2', 
		'\x395', '\x394', '\x3', '\x2', '\x2', '\x2', '\x395', '\x396', '\x3', 
		'\x2', '\x2', '\x2', '\x396', '\x3C7', '\x3', '\x2', '\x2', '\x2', '\x397', 
		'\x398', '\a', '+', '\x2', '\x2', '\x398', '\x399', '\x5', '\xA2', 'R', 
		'\x2', '\x399', '\x39D', '\a', '\x41', '\x2', '\x2', '\x39A', '\x39C', 
		'\x5', '\x98', 'M', '\x2', '\x39B', '\x39A', '\x3', '\x2', '\x2', '\x2', 
		'\x39C', '\x39F', '\x3', '\x2', '\x2', '\x2', '\x39D', '\x39B', '\x3', 
		'\x2', '\x2', '\x2', '\x39D', '\x39E', '\x3', '\x2', '\x2', '\x2', '\x39E', 
		'\x3A3', '\x3', '\x2', '\x2', '\x2', '\x39F', '\x39D', '\x3', '\x2', '\x2', 
		'\x2', '\x3A0', '\x3A2', '\x5', '\x9A', 'N', '\x2', '\x3A1', '\x3A0', 
		'\x3', '\x2', '\x2', '\x2', '\x3A2', '\x3A5', '\x3', '\x2', '\x2', '\x2', 
		'\x3A3', '\x3A1', '\x3', '\x2', '\x2', '\x2', '\x3A3', '\x3A4', '\x3', 
		'\x2', '\x2', '\x2', '\x3A4', '\x3A6', '\x3', '\x2', '\x2', '\x2', '\x3A5', 
		'\x3A3', '\x3', '\x2', '\x2', '\x2', '\x3A6', '\x3A7', '\a', '\x42', '\x2', 
		'\x2', '\x3A7', '\x3C7', '\x3', '\x2', '\x2', '\x2', '\x3A8', '\x3A9', 
		'\a', ',', '\x2', '\x2', '\x3A9', '\x3AA', '\x5', '\xA2', 'R', '\x2', 
		'\x3AA', '\x3AB', '\x5', '\x82', '\x42', '\x2', '\x3AB', '\x3C7', '\x3', 
		'\x2', '\x2', '\x2', '\x3AC', '\x3AE', '\a', '&', '\x2', '\x2', '\x3AD', 
		'\x3AF', '\x5', '\xA8', 'U', '\x2', '\x3AE', '\x3AD', '\x3', '\x2', '\x2', 
		'\x2', '\x3AE', '\x3AF', '\x3', '\x2', '\x2', '\x2', '\x3AF', '\x3B0', 
		'\x3', '\x2', '\x2', '\x2', '\x3B0', '\x3C7', '\a', '\x45', '\x2', '\x2', 
		'\x3B1', '\x3B2', '\a', '.', '\x2', '\x2', '\x3B2', '\x3B3', '\x5', '\xA8', 
		'U', '\x2', '\x3B3', '\x3B4', '\a', '\x45', '\x2', '\x2', '\x3B4', '\x3C7', 
		'\x3', '\x2', '\x2', '\x2', '\x3B5', '\x3B7', '\a', '\x6', '\x2', '\x2', 
		'\x3B6', '\x3B8', '\a', 'q', '\x2', '\x2', '\x3B7', '\x3B6', '\x3', '\x2', 
		'\x2', '\x2', '\x3B7', '\x3B8', '\x3', '\x2', '\x2', '\x2', '\x3B8', '\x3B9', 
		'\x3', '\x2', '\x2', '\x2', '\x3B9', '\x3C7', '\a', '\x45', '\x2', '\x2', 
		'\x3BA', '\x3BC', '\a', '\r', '\x2', '\x2', '\x3BB', '\x3BD', '\a', 'q', 
		'\x2', '\x2', '\x3BC', '\x3BB', '\x3', '\x2', '\x2', '\x2', '\x3BC', '\x3BD', 
		'\x3', '\x2', '\x2', '\x2', '\x3BD', '\x3BE', '\x3', '\x2', '\x2', '\x2', 
		'\x3BE', '\x3C7', '\a', '\x45', '\x2', '\x2', '\x3BF', '\x3C7', '\a', 
		'\x45', '\x2', '\x2', '\x3C0', '\x3C1', '\x5', '\xA8', 'U', '\x2', '\x3C1', 
		'\x3C2', '\a', '\x45', '\x2', '\x2', '\x3C2', '\x3C7', '\x3', '\x2', '\x2', 
		'\x2', '\x3C3', '\x3C4', '\a', 'q', '\x2', '\x2', '\x3C4', '\x3C5', '\a', 
		'N', '\x2', '\x2', '\x3C5', '\x3C7', '\x5', '\x8A', '\x46', '\x2', '\x3C6', 
		'\x35E', '\x3', '\x2', '\x2', '\x2', '\x3C6', '\x35F', '\x3', '\x2', '\x2', 
		'\x2', '\x3C6', '\x367', '\x3', '\x2', '\x2', '\x2', '\x3C6', '\x36E', 
		'\x3', '\x2', '\x2', '\x2', '\x3C6', '\x374', '\x3', '\x2', '\x2', '\x2', 
		'\x3C6', '\x378', '\x3', '\x2', '\x2', '\x2', '\x3C6', '\x37E', '\x3', 
		'\x2', '\x2', '\x2', '\x3C6', '\x38B', '\x3', '\x2', '\x2', '\x2', '\x3C6', 
		'\x397', '\x3', '\x2', '\x2', '\x2', '\x3C6', '\x3A8', '\x3', '\x2', '\x2', 
		'\x2', '\x3C6', '\x3AC', '\x3', '\x2', '\x2', '\x2', '\x3C6', '\x3B1', 
		'\x3', '\x2', '\x2', '\x2', '\x3C6', '\x3B5', '\x3', '\x2', '\x2', '\x2', 
		'\x3C6', '\x3BA', '\x3', '\x2', '\x2', '\x2', '\x3C6', '\x3BF', '\x3', 
		'\x2', '\x2', '\x2', '\x3C6', '\x3C0', '\x3', '\x2', '\x2', '\x2', '\x3C6', 
		'\x3C3', '\x3', '\x2', '\x2', '\x2', '\x3C7', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x3C8', '\x3C9', '\a', '\t', '\x2', '\x2', '\x3C9', '\x3CD', '\a', 
		'?', '\x2', '\x2', '\x3CA', '\x3CC', '\x5', '\xE', '\b', '\x2', '\x3CB', 
		'\x3CA', '\x3', '\x2', '\x2', '\x2', '\x3CC', '\x3CF', '\x3', '\x2', '\x2', 
		'\x2', '\x3CD', '\x3CB', '\x3', '\x2', '\x2', '\x2', '\x3CD', '\x3CE', 
		'\x3', '\x2', '\x2', '\x2', '\x3CE', '\x3D0', '\x3', '\x2', '\x2', '\x2', 
		'\x3CF', '\x3CD', '\x3', '\x2', '\x2', '\x2', '\x3D0', '\x3D1', '\x5', 
		'\x8E', 'H', '\x2', '\x3D1', '\x3D2', '\a', 'q', '\x2', '\x2', '\x3D2', 
		'\x3D3', '\a', '@', '\x2', '\x2', '\x3D3', '\x3D4', '\x5', '\x82', '\x42', 
		'\x2', '\x3D4', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x3D5', '\x3DA', 
		'\x5', '^', '\x30', '\x2', '\x3D6', '\x3D7', '\a', '\\', '\x2', '\x2', 
		'\x3D7', '\x3D9', '\x5', '^', '\x30', '\x2', '\x3D8', '\x3D6', '\x3', 
		'\x2', '\x2', '\x2', '\x3D9', '\x3DC', '\x3', '\x2', '\x2', '\x2', '\x3DA', 
		'\x3D8', '\x3', '\x2', '\x2', '\x2', '\x3DA', '\x3DB', '\x3', '\x2', '\x2', 
		'\x2', '\x3DB', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x3DC', '\x3DA', 
		'\x3', '\x2', '\x2', '\x2', '\x3DD', '\x3DE', '\a', '\x15', '\x2', '\x2', 
		'\x3DE', '\x3DF', '\x5', '\x82', '\x42', '\x2', '\x3DF', '\x91', '\x3', 
		'\x2', '\x2', '\x2', '\x3E0', '\x3E1', '\a', '?', '\x2', '\x2', '\x3E1', 
		'\x3E3', '\x5', '\x94', 'K', '\x2', '\x3E2', '\x3E4', '\a', '\x45', '\x2', 
		'\x2', '\x3E3', '\x3E2', '\x3', '\x2', '\x2', '\x2', '\x3E3', '\x3E4', 
		'\x3', '\x2', '\x2', '\x2', '\x3E4', '\x3E5', '\x3', '\x2', '\x2', '\x2', 
		'\x3E5', '\x3E6', '\a', '@', '\x2', '\x2', '\x3E6', '\x93', '\x3', '\x2', 
		'\x2', '\x2', '\x3E7', '\x3EC', '\x5', '\x96', 'L', '\x2', '\x3E8', '\x3E9', 
		'\a', '\x45', '\x2', '\x2', '\x3E9', '\x3EB', '\x5', '\x96', 'L', '\x2', 
		'\x3EA', '\x3E8', '\x3', '\x2', '\x2', '\x2', '\x3EB', '\x3EE', '\x3', 
		'\x2', '\x2', '\x2', '\x3EC', '\x3EA', '\x3', '\x2', '\x2', '\x2', '\x3EC', 
		'\x3ED', '\x3', '\x2', '\x2', '\x2', '\x3ED', '\x95', '\x3', '\x2', '\x2', 
		'\x2', '\x3EE', '\x3EC', '\x3', '\x2', '\x2', '\x2', '\x3EF', '\x3F1', 
		'\x5', '\xE', '\b', '\x2', '\x3F0', '\x3EF', '\x3', '\x2', '\x2', '\x2', 
		'\x3F1', '\x3F4', '\x3', '\x2', '\x2', '\x2', '\x3F2', '\x3F0', '\x3', 
		'\x2', '\x2', '\x2', '\x3F2', '\x3F3', '\x3', '\x2', '\x2', '\x2', '\x3F3', 
		'\x3F5', '\x3', '\x2', '\x2', '\x2', '\x3F4', '\x3F2', '\x3', '\x2', '\x2', 
		'\x2', '\x3F5', '\x3F6', '\x5', 'P', ')', '\x2', '\x3F6', '\x3F7', '\x5', 
		'J', '&', '\x2', '\x3F7', '\x3F8', '\a', 'H', '\x2', '\x2', '\x3F8', '\x3F9', 
		'\x5', '\xA8', 'U', '\x2', '\x3F9', '\x97', '\x3', '\x2', '\x2', '\x2', 
		'\x3FA', '\x3FC', '\x5', '\x9A', 'N', '\x2', '\x3FB', '\x3FA', '\x3', 
		'\x2', '\x2', '\x2', '\x3FC', '\x3FD', '\x3', '\x2', '\x2', '\x2', '\x3FD', 
		'\x3FB', '\x3', '\x2', '\x2', '\x2', '\x3FD', '\x3FE', '\x3', '\x2', '\x2', 
		'\x2', '\x3FE', '\x400', '\x3', '\x2', '\x2', '\x2', '\x3FF', '\x401', 
		'\x5', '\x84', '\x43', '\x2', '\x400', '\x3FF', '\x3', '\x2', '\x2', '\x2', 
		'\x401', '\x402', '\x3', '\x2', '\x2', '\x2', '\x402', '\x400', '\x3', 
		'\x2', '\x2', '\x2', '\x402', '\x403', '\x3', '\x2', '\x2', '\x2', '\x403', 
		'\x99', '\x3', '\x2', '\x2', '\x2', '\x404', '\x407', '\a', '\b', '\x2', 
		'\x2', '\x405', '\x408', '\x5', '\xA8', 'U', '\x2', '\x406', '\x408', 
		'\a', 'q', '\x2', '\x2', '\x407', '\x405', '\x3', '\x2', '\x2', '\x2', 
		'\x407', '\x406', '\x3', '\x2', '\x2', '\x2', '\x408', '\x409', '\x3', 
		'\x2', '\x2', '\x2', '\x409', '\x40D', '\a', 'N', '\x2', '\x2', '\x40A', 
		'\x40B', '\a', '\xE', '\x2', '\x2', '\x40B', '\x40D', '\a', 'N', '\x2', 
		'\x2', '\x40C', '\x404', '\x3', '\x2', '\x2', '\x2', '\x40C', '\x40A', 
		'\x3', '\x2', '\x2', '\x2', '\x40D', '\x9B', '\x3', '\x2', '\x2', '\x2', 
		'\x40E', '\x41B', '\x5', '\xA0', 'Q', '\x2', '\x40F', '\x411', '\x5', 
		'\x9E', 'P', '\x2', '\x410', '\x40F', '\x3', '\x2', '\x2', '\x2', '\x410', 
		'\x411', '\x3', '\x2', '\x2', '\x2', '\x411', '\x412', '\x3', '\x2', '\x2', 
		'\x2', '\x412', '\x414', '\a', '\x45', '\x2', '\x2', '\x413', '\x415', 
		'\x5', '\xA8', 'U', '\x2', '\x414', '\x413', '\x3', '\x2', '\x2', '\x2', 
		'\x414', '\x415', '\x3', '\x2', '\x2', '\x2', '\x415', '\x416', '\x3', 
		'\x2', '\x2', '\x2', '\x416', '\x418', '\a', '\x45', '\x2', '\x2', '\x417', 
		'\x419', '\x5', '\xA4', 'S', '\x2', '\x418', '\x417', '\x3', '\x2', '\x2', 
		'\x2', '\x418', '\x419', '\x3', '\x2', '\x2', '\x2', '\x419', '\x41B', 
		'\x3', '\x2', '\x2', '\x2', '\x41A', '\x40E', '\x3', '\x2', '\x2', '\x2', 
		'\x41A', '\x410', '\x3', '\x2', '\x2', '\x2', '\x41B', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\x41C', '\x41F', '\x5', '\x86', '\x44', '\x2', '\x41D', 
		'\x41F', '\x5', '\xA4', 'S', '\x2', '\x41E', '\x41C', '\x3', '\x2', '\x2', 
		'\x2', '\x41E', '\x41D', '\x3', '\x2', '\x2', '\x2', '\x41F', '\x9F', 
		'\x3', '\x2', '\x2', '\x2', '\x420', '\x422', '\x5', '\xE', '\b', '\x2', 
		'\x421', '\x420', '\x3', '\x2', '\x2', '\x2', '\x422', '\x425', '\x3', 
		'\x2', '\x2', '\x2', '\x423', '\x421', '\x3', '\x2', '\x2', '\x2', '\x423', 
		'\x424', '\x3', '\x2', '\x2', '\x2', '\x424', '\x426', '\x3', '\x2', '\x2', 
		'\x2', '\x425', '\x423', '\x3', '\x2', '\x2', '\x2', '\x426', '\x427', 
		'\x5', '\xC8', '\x65', '\x2', '\x427', '\x428', '\x5', 'J', '&', '\x2', 
		'\x428', '\x429', '\a', 'N', '\x2', '\x2', '\x429', '\x42A', '\x5', '\xA8', 
		'U', '\x2', '\x42A', '\xA1', '\x3', '\x2', '\x2', '\x2', '\x42B', '\x42C', 
		'\a', '?', '\x2', '\x2', '\x42C', '\x42D', '\x5', '\xA8', 'U', '\x2', 
		'\x42D', '\x42E', '\a', '@', '\x2', '\x2', '\x42E', '\xA3', '\x3', '\x2', 
		'\x2', '\x2', '\x42F', '\x434', '\x5', '\xA8', 'U', '\x2', '\x430', '\x431', 
		'\a', '\x46', '\x2', '\x2', '\x431', '\x433', '\x5', '\xA8', 'U', '\x2', 
		'\x432', '\x430', '\x3', '\x2', '\x2', '\x2', '\x433', '\x436', '\x3', 
		'\x2', '\x2', '\x2', '\x434', '\x432', '\x3', '\x2', '\x2', '\x2', '\x434', 
		'\x435', '\x3', '\x2', '\x2', '\x2', '\x435', '\xA5', '\x3', '\x2', '\x2', 
		'\x2', '\x436', '\x434', '\x3', '\x2', '\x2', '\x2', '\x437', '\x438', 
		'\a', 'q', '\x2', '\x2', '\x438', '\x43A', '\a', '?', '\x2', '\x2', '\x439', 
		'\x43B', '\x5', '\xA4', 'S', '\x2', '\x43A', '\x439', '\x3', '\x2', '\x2', 
		'\x2', '\x43A', '\x43B', '\x3', '\x2', '\x2', '\x2', '\x43B', '\x43C', 
		'\x3', '\x2', '\x2', '\x2', '\x43C', '\x44A', '\a', '@', '\x2', '\x2', 
		'\x43D', '\x43E', '\a', '-', '\x2', '\x2', '\x43E', '\x440', '\a', '?', 
		'\x2', '\x2', '\x43F', '\x441', '\x5', '\xA4', 'S', '\x2', '\x440', '\x43F', 
		'\x3', '\x2', '\x2', '\x2', '\x440', '\x441', '\x3', '\x2', '\x2', '\x2', 
		'\x441', '\x442', '\x3', '\x2', '\x2', '\x2', '\x442', '\x44A', '\a', 
		'@', '\x2', '\x2', '\x443', '\x444', '\a', '*', '\x2', '\x2', '\x444', 
		'\x446', '\a', '?', '\x2', '\x2', '\x445', '\x447', '\x5', '\xA4', 'S', 
		'\x2', '\x446', '\x445', '\x3', '\x2', '\x2', '\x2', '\x446', '\x447', 
		'\x3', '\x2', '\x2', '\x2', '\x447', '\x448', '\x3', '\x2', '\x2', '\x2', 
		'\x448', '\x44A', '\a', '@', '\x2', '\x2', '\x449', '\x437', '\x3', '\x2', 
		'\x2', '\x2', '\x449', '\x43D', '\x3', '\x2', '\x2', '\x2', '\x449', '\x443', 
		'\x3', '\x2', '\x2', '\x2', '\x44A', '\xA7', '\x3', '\x2', '\x2', '\x2', 
		'\x44B', '\x44C', '\b', 'U', '\x1', '\x2', '\x44C', '\x471', '\x5', '\xB0', 
		'Y', '\x2', '\x44D', '\x471', '\x5', '\xA6', 'T', '\x2', '\x44E', '\x44F', 
		'\a', '!', '\x2', '\x2', '\x44F', '\x471', '\x5', '\xB4', '[', '\x2', 
		'\x450', '\x454', '\a', '?', '\x2', '\x2', '\x451', '\x453', '\x5', 'h', 
		'\x35', '\x2', '\x452', '\x451', '\x3', '\x2', '\x2', '\x2', '\x453', 
		'\x456', '\x3', '\x2', '\x2', '\x2', '\x454', '\x452', '\x3', '\x2', '\x2', 
		'\x2', '\x454', '\x455', '\x3', '\x2', '\x2', '\x2', '\x455', '\x457', 
		'\x3', '\x2', '\x2', '\x2', '\x456', '\x454', '\x3', '\x2', '\x2', '\x2', 
		'\x457', '\x458', '\x5', '\xC8', '\x65', '\x2', '\x458', '\x459', '\a', 
		'@', '\x2', '\x2', '\x459', '\x45A', '\x5', '\xA8', 'U', '\x17', '\x45A', 
		'\x471', '\x3', '\x2', '\x2', '\x2', '\x45B', '\x45C', '\t', '\x5', '\x2', 
		'\x2', '\x45C', '\x471', '\x5', '\xA8', 'U', '\x15', '\x45D', '\x45E', 
		'\t', '\x6', '\x2', '\x2', '\x45E', '\x471', '\x5', '\xA8', 'U', '\x14', 
		'\x45F', '\x471', '\x5', '\xAA', 'V', '\x2', '\x460', '\x461', '\x5', 
		'\xC8', '\x65', '\x2', '\x461', '\x467', '\a', 'k', '\x2', '\x2', '\x462', 
		'\x464', '\x5', '\xCC', 'g', '\x2', '\x463', '\x462', '\x3', '\x2', '\x2', 
		'\x2', '\x463', '\x464', '\x3', '\x2', '\x2', '\x2', '\x464', '\x465', 
		'\x3', '\x2', '\x2', '\x2', '\x465', '\x468', '\a', 'q', '\x2', '\x2', 
		'\x466', '\x468', '\a', '!', '\x2', '\x2', '\x467', '\x463', '\x3', '\x2', 
		'\x2', '\x2', '\x467', '\x466', '\x3', '\x2', '\x2', '\x2', '\x468', '\x471', 
		'\x3', '\x2', '\x2', '\x2', '\x469', '\x46A', '\x5', '\xB2', 'Z', '\x2', 
		'\x46A', '\x46C', '\a', 'k', '\x2', '\x2', '\x46B', '\x46D', '\x5', '\xCC', 
		'g', '\x2', '\x46C', '\x46B', '\x3', '\x2', '\x2', '\x2', '\x46C', '\x46D', 
		'\x3', '\x2', '\x2', '\x2', '\x46D', '\x46E', '\x3', '\x2', '\x2', '\x2', 
		'\x46E', '\x46F', '\a', '!', '\x2', '\x2', '\x46F', '\x471', '\x3', '\x2', 
		'\x2', '\x2', '\x470', '\x44B', '\x3', '\x2', '\x2', '\x2', '\x470', '\x44D', 
		'\x3', '\x2', '\x2', '\x2', '\x470', '\x44E', '\x3', '\x2', '\x2', '\x2', 
		'\x470', '\x450', '\x3', '\x2', '\x2', '\x2', '\x470', '\x45B', '\x3', 
		'\x2', '\x2', '\x2', '\x470', '\x45D', '\x3', '\x2', '\x2', '\x2', '\x470', 
		'\x45F', '\x3', '\x2', '\x2', '\x2', '\x470', '\x460', '\x3', '\x2', '\x2', 
		'\x2', '\x470', '\x469', '\x3', '\x2', '\x2', '\x2', '\x471', '\x4C2', 
		'\x3', '\x2', '\x2', '\x2', '\x472', '\x473', '\f', '\x13', '\x2', '\x2', 
		'\x473', '\x474', '\t', '\a', '\x2', '\x2', '\x474', '\x4C1', '\x5', '\xA8', 
		'U', '\x14', '\x475', '\x476', '\f', '\x12', '\x2', '\x2', '\x476', '\x477', 
		'\t', '\b', '\x2', '\x2', '\x477', '\x4C1', '\x5', '\xA8', 'U', '\x13', 
		'\x478', '\x480', '\f', '\x11', '\x2', '\x2', '\x479', '\x47A', '\a', 
		'J', '\x2', '\x2', '\x47A', '\x481', '\a', 'J', '\x2', '\x2', '\x47B', 
		'\x47C', '\a', 'I', '\x2', '\x2', '\x47C', '\x47D', '\a', 'I', '\x2', 
		'\x2', '\x47D', '\x481', '\a', 'I', '\x2', '\x2', '\x47E', '\x47F', '\a', 
		'I', '\x2', '\x2', '\x47F', '\x481', '\a', 'I', '\x2', '\x2', '\x480', 
		'\x479', '\x3', '\x2', '\x2', '\x2', '\x480', '\x47B', '\x3', '\x2', '\x2', 
		'\x2', '\x480', '\x47E', '\x3', '\x2', '\x2', '\x2', '\x481', '\x482', 
		'\x3', '\x2', '\x2', '\x2', '\x482', '\x4C1', '\x5', '\xA8', 'U', '\x12', 
		'\x483', '\x484', '\f', '\x10', '\x2', '\x2', '\x484', '\x485', '\t', 
		'\t', '\x2', '\x2', '\x485', '\x4C1', '\x5', '\xA8', 'U', '\x11', '\x486', 
		'\x487', '\f', '\xE', '\x2', '\x2', '\x487', '\x488', '\t', '\n', '\x2', 
		'\x2', '\x488', '\x4C1', '\x5', '\xA8', 'U', '\xF', '\x489', '\x48A', 
		'\f', '\r', '\x2', '\x2', '\x48A', '\x48B', '\a', '[', '\x2', '\x2', '\x48B', 
		'\x4C1', '\x5', '\xA8', 'U', '\xE', '\x48C', '\x48D', '\f', '\f', '\x2', 
		'\x2', '\x48D', '\x48E', '\a', ']', '\x2', '\x2', '\x48E', '\x4C1', '\x5', 
		'\xA8', 'U', '\r', '\x48F', '\x490', '\f', '\v', '\x2', '\x2', '\x490', 
		'\x491', '\a', '\\', '\x2', '\x2', '\x491', '\x4C1', '\x5', '\xA8', 'U', 
		'\f', '\x492', '\x493', '\f', '\n', '\x2', '\x2', '\x493', '\x494', '\a', 
		'S', '\x2', '\x2', '\x494', '\x4C1', '\x5', '\xA8', 'U', '\v', '\x495', 
		'\x496', '\f', '\t', '\x2', '\x2', '\x496', '\x497', '\a', 'T', '\x2', 
		'\x2', '\x497', '\x4C1', '\x5', '\xA8', 'U', '\n', '\x498', '\x499', '\f', 
		'\b', '\x2', '\x2', '\x499', '\x49A', '\a', 'M', '\x2', '\x2', '\x49A', 
		'\x49B', '\x5', '\xA8', 'U', '\x2', '\x49B', '\x49C', '\a', 'N', '\x2', 
		'\x2', '\x49C', '\x49D', '\x5', '\xA8', 'U', '\b', '\x49D', '\x4C1', '\x3', 
		'\x2', '\x2', '\x2', '\x49E', '\x49F', '\f', '\a', '\x2', '\x2', '\x49F', 
		'\x4A0', '\t', '\v', '\x2', '\x2', '\x4A0', '\x4C1', '\x5', '\xA8', 'U', 
		'\a', '\x4A1', '\x4A2', '\f', '\x1B', '\x2', '\x2', '\x4A2', '\x4AE', 
		'\a', 'G', '\x2', '\x2', '\x4A3', '\x4AF', '\a', 'q', '\x2', '\x2', '\x4A4', 
		'\x4AF', '\x5', '\xA6', 'T', '\x2', '\x4A5', '\x4AF', '\a', '-', '\x2', 
		'\x2', '\x4A6', '\x4A8', '\a', '!', '\x2', '\x2', '\x4A7', '\x4A9', '\x5', 
		'\xC4', '\x63', '\x2', '\x4A8', '\x4A7', '\x3', '\x2', '\x2', '\x2', '\x4A8', 
		'\x4A9', '\x3', '\x2', '\x2', '\x2', '\x4A9', '\x4AA', '\x3', '\x2', '\x2', 
		'\x2', '\x4AA', '\x4AF', '\x5', '\xB8', ']', '\x2', '\x4AB', '\x4AC', 
		'\a', '*', '\x2', '\x2', '\x4AC', '\x4AF', '\x5', '\xCE', 'h', '\x2', 
		'\x4AD', '\x4AF', '\x5', '\xBE', '`', '\x2', '\x4AE', '\x4A3', '\x3', 
		'\x2', '\x2', '\x2', '\x4AE', '\x4A4', '\x3', '\x2', '\x2', '\x2', '\x4AE', 
		'\x4A5', '\x3', '\x2', '\x2', '\x2', '\x4AE', '\x4A6', '\x3', '\x2', '\x2', 
		'\x2', '\x4AE', '\x4AB', '\x3', '\x2', '\x2', '\x2', '\x4AE', '\x4AD', 
		'\x3', '\x2', '\x2', '\x2', '\x4AF', '\x4C1', '\x3', '\x2', '\x2', '\x2', 
		'\x4B0', '\x4B1', '\f', '\x1A', '\x2', '\x2', '\x4B1', '\x4B2', '\a', 
		'\x43', '\x2', '\x2', '\x4B2', '\x4B3', '\x5', '\xA8', 'U', '\x2', '\x4B3', 
		'\x4B4', '\a', '\x44', '\x2', '\x2', '\x4B4', '\x4C1', '\x3', '\x2', '\x2', 
		'\x2', '\x4B5', '\x4B6', '\f', '\x16', '\x2', '\x2', '\x4B6', '\x4C1', 
		'\t', '\f', '\x2', '\x2', '\x4B7', '\x4B8', '\f', '\xF', '\x2', '\x2', 
		'\x4B8', '\x4B9', '\a', '\x1C', '\x2', '\x2', '\x4B9', '\x4C1', '\x5', 
		'\xC8', '\x65', '\x2', '\x4BA', '\x4BB', '\f', '\x5', '\x2', '\x2', '\x4BB', 
		'\x4BD', '\a', 'k', '\x2', '\x2', '\x4BC', '\x4BE', '\x5', '\xCC', 'g', 
		'\x2', '\x4BD', '\x4BC', '\x3', '\x2', '\x2', '\x2', '\x4BD', '\x4BE', 
		'\x3', '\x2', '\x2', '\x2', '\x4BE', '\x4BF', '\x3', '\x2', '\x2', '\x2', 
		'\x4BF', '\x4C1', '\a', 'q', '\x2', '\x2', '\x4C0', '\x472', '\x3', '\x2', 
		'\x2', '\x2', '\x4C0', '\x475', '\x3', '\x2', '\x2', '\x2', '\x4C0', '\x478', 
		'\x3', '\x2', '\x2', '\x2', '\x4C0', '\x483', '\x3', '\x2', '\x2', '\x2', 
		'\x4C0', '\x486', '\x3', '\x2', '\x2', '\x2', '\x4C0', '\x489', '\x3', 
		'\x2', '\x2', '\x2', '\x4C0', '\x48C', '\x3', '\x2', '\x2', '\x2', '\x4C0', 
		'\x48F', '\x3', '\x2', '\x2', '\x2', '\x4C0', '\x492', '\x3', '\x2', '\x2', 
		'\x2', '\x4C0', '\x495', '\x3', '\x2', '\x2', '\x2', '\x4C0', '\x498', 
		'\x3', '\x2', '\x2', '\x2', '\x4C0', '\x49E', '\x3', '\x2', '\x2', '\x2', 
		'\x4C0', '\x4A1', '\x3', '\x2', '\x2', '\x2', '\x4C0', '\x4B0', '\x3', 
		'\x2', '\x2', '\x2', '\x4C0', '\x4B5', '\x3', '\x2', '\x2', '\x2', '\x4C0', 
		'\x4B7', '\x3', '\x2', '\x2', '\x2', '\x4C0', '\x4BA', '\x3', '\x2', '\x2', 
		'\x2', '\x4C1', '\x4C4', '\x3', '\x2', '\x2', '\x2', '\x4C2', '\x4C0', 
		'\x3', '\x2', '\x2', '\x2', '\x4C2', '\x4C3', '\x3', '\x2', '\x2', '\x2', 
		'\x4C3', '\xA9', '\x3', '\x2', '\x2', '\x2', '\x4C4', '\x4C2', '\x3', 
		'\x2', '\x2', '\x2', '\x4C5', '\x4C6', '\x5', '\xAC', 'W', '\x2', '\x4C6', 
		'\x4C7', '\a', 'j', '\x2', '\x2', '\x4C7', '\x4C8', '\x5', '\xAE', 'X', 
		'\x2', '\x4C8', '\xAB', '\x3', '\x2', '\x2', '\x2', '\x4C9', '\x4DA', 
		'\a', 'q', '\x2', '\x2', '\x4CA', '\x4CC', '\a', '?', '\x2', '\x2', '\x4CB', 
		'\x4CD', '\x5', 'X', '-', '\x2', '\x4CC', '\x4CB', '\x3', '\x2', '\x2', 
		'\x2', '\x4CC', '\x4CD', '\x3', '\x2', '\x2', '\x2', '\x4CD', '\x4CE', 
		'\x3', '\x2', '\x2', '\x2', '\x4CE', '\x4DA', '\a', '@', '\x2', '\x2', 
		'\x4CF', '\x4D0', '\a', '?', '\x2', '\x2', '\x4D0', '\x4D5', '\a', 'q', 
		'\x2', '\x2', '\x4D1', '\x4D2', '\a', '\x46', '\x2', '\x2', '\x4D2', '\x4D4', 
		'\a', 'q', '\x2', '\x2', '\x4D3', '\x4D1', '\x3', '\x2', '\x2', '\x2', 
		'\x4D4', '\x4D7', '\x3', '\x2', '\x2', '\x2', '\x4D5', '\x4D3', '\x3', 
		'\x2', '\x2', '\x2', '\x4D5', '\x4D6', '\x3', '\x2', '\x2', '\x2', '\x4D6', 
		'\x4D8', '\x3', '\x2', '\x2', '\x2', '\x4D7', '\x4D5', '\x3', '\x2', '\x2', 
		'\x2', '\x4D8', '\x4DA', '\a', '@', '\x2', '\x2', '\x4D9', '\x4C9', '\x3', 
		'\x2', '\x2', '\x2', '\x4D9', '\x4CA', '\x3', '\x2', '\x2', '\x2', '\x4D9', 
		'\x4CF', '\x3', '\x2', '\x2', '\x2', '\x4DA', '\xAD', '\x3', '\x2', '\x2', 
		'\x2', '\x4DB', '\x4DE', '\x5', '\xA8', 'U', '\x2', '\x4DC', '\x4DE', 
		'\x5', '\x82', '\x42', '\x2', '\x4DD', '\x4DB', '\x3', '\x2', '\x2', '\x2', 
		'\x4DD', '\x4DC', '\x3', '\x2', '\x2', '\x2', '\x4DE', '\xAF', '\x3', 
		'\x2', '\x2', '\x2', '\x4DF', '\x4E0', '\a', '?', '\x2', '\x2', '\x4E0', 
		'\x4E1', '\x5', '\xA8', 'U', '\x2', '\x4E1', '\x4E2', '\a', '@', '\x2', 
		'\x2', '\x4E2', '\x4F2', '\x3', '\x2', '\x2', '\x2', '\x4E3', '\x4F2', 
		'\a', '-', '\x2', '\x2', '\x4E4', '\x4F2', '\a', '*', '\x2', '\x2', '\x4E5', 
		'\x4F2', '\x5', '`', '\x31', '\x2', '\x4E6', '\x4F2', '\a', 'q', '\x2', 
		'\x2', '\x4E7', '\x4E8', '\x5', '.', '\x18', '\x2', '\x4E8', '\x4E9', 
		'\a', 'G', '\x2', '\x2', '\x4E9', '\x4EA', '\a', '\v', '\x2', '\x2', '\x4EA', 
		'\x4F2', '\x3', '\x2', '\x2', '\x2', '\x4EB', '\x4EF', '\x5', '\xC4', 
		'\x63', '\x2', '\x4EC', '\x4F0', '\x5', '\xD0', 'i', '\x2', '\x4ED', '\x4EE', 
		'\a', '-', '\x2', '\x2', '\x4EE', '\x4F0', '\x5', '\xD2', 'j', '\x2', 
		'\x4EF', '\x4EC', '\x3', '\x2', '\x2', '\x2', '\x4EF', '\x4ED', '\x3', 
		'\x2', '\x2', '\x2', '\x4F0', '\x4F2', '\x3', '\x2', '\x2', '\x2', '\x4F1', 
		'\x4DF', '\x3', '\x2', '\x2', '\x2', '\x4F1', '\x4E3', '\x3', '\x2', '\x2', 
		'\x2', '\x4F1', '\x4E4', '\x3', '\x2', '\x2', '\x2', '\x4F1', '\x4E5', 
		'\x3', '\x2', '\x2', '\x2', '\x4F1', '\x4E6', '\x3', '\x2', '\x2', '\x2', 
		'\x4F1', '\x4E7', '\x3', '\x2', '\x2', '\x2', '\x4F1', '\x4EB', '\x3', 
		'\x2', '\x2', '\x2', '\x4F2', '\xB1', '\x3', '\x2', '\x2', '\x2', '\x4F3', 
		'\x4F4', '\x5', 'P', ')', '\x2', '\x4F4', '\x4F5', '\a', 'G', '\x2', '\x2', 
		'\x4F5', '\x4F7', '\x3', '\x2', '\x2', '\x2', '\x4F6', '\x4F3', '\x3', 
		'\x2', '\x2', '\x2', '\x4F6', '\x4F7', '\x3', '\x2', '\x2', '\x2', '\x4F7', 
		'\x4FB', '\x3', '\x2', '\x2', '\x2', '\x4F8', '\x4FA', '\x5', 'h', '\x35', 
		'\x2', '\x4F9', '\x4F8', '\x3', '\x2', '\x2', '\x2', '\x4FA', '\x4FD', 
		'\x3', '\x2', '\x2', '\x2', '\x4FB', '\x4F9', '\x3', '\x2', '\x2', '\x2', 
		'\x4FB', '\x4FC', '\x3', '\x2', '\x2', '\x2', '\x4FC', '\x4FE', '\x3', 
		'\x2', '\x2', '\x2', '\x4FD', '\x4FB', '\x3', '\x2', '\x2', '\x2', '\x4FE', 
		'\x500', '\a', 'q', '\x2', '\x2', '\x4FF', '\x501', '\x5', '\xCC', 'g', 
		'\x2', '\x500', '\x4FF', '\x3', '\x2', '\x2', '\x2', '\x500', '\x501', 
		'\x3', '\x2', '\x2', '\x2', '\x501', '\xB3', '\x3', '\x2', '\x2', '\x2', 
		'\x502', '\x503', '\x5', '\xC4', '\x63', '\x2', '\x503', '\x504', '\x5', 
		'\xB6', '\\', '\x2', '\x504', '\x505', '\x5', '\xBC', '_', '\x2', '\x505', 
		'\x50C', '\x3', '\x2', '\x2', '\x2', '\x506', '\x509', '\x5', '\xB6', 
		'\\', '\x2', '\x507', '\x50A', '\x5', '\xBA', '^', '\x2', '\x508', '\x50A', 
		'\x5', '\xBC', '_', '\x2', '\x509', '\x507', '\x3', '\x2', '\x2', '\x2', 
		'\x509', '\x508', '\x3', '\x2', '\x2', '\x2', '\x50A', '\x50C', '\x3', 
		'\x2', '\x2', '\x2', '\x50B', '\x502', '\x3', '\x2', '\x2', '\x2', '\x50B', 
		'\x506', '\x3', '\x2', '\x2', '\x2', '\x50C', '\xB5', '\x3', '\x2', '\x2', 
		'\x2', '\x50D', '\x50F', '\a', 'q', '\x2', '\x2', '\x50E', '\x510', '\x5', 
		'\xC0', '\x61', '\x2', '\x50F', '\x50E', '\x3', '\x2', '\x2', '\x2', '\x50F', 
		'\x510', '\x3', '\x2', '\x2', '\x2', '\x510', '\x518', '\x3', '\x2', '\x2', 
		'\x2', '\x511', '\x512', '\a', 'G', '\x2', '\x2', '\x512', '\x514', '\a', 
		'q', '\x2', '\x2', '\x513', '\x515', '\x5', '\xC0', '\x61', '\x2', '\x514', 
		'\x513', '\x3', '\x2', '\x2', '\x2', '\x514', '\x515', '\x3', '\x2', '\x2', 
		'\x2', '\x515', '\x517', '\x3', '\x2', '\x2', '\x2', '\x516', '\x511', 
		'\x3', '\x2', '\x2', '\x2', '\x517', '\x51A', '\x3', '\x2', '\x2', '\x2', 
		'\x518', '\x516', '\x3', '\x2', '\x2', '\x2', '\x518', '\x519', '\x3', 
		'\x2', '\x2', '\x2', '\x519', '\x51D', '\x3', '\x2', '\x2', '\x2', '\x51A', 
		'\x518', '\x3', '\x2', '\x2', '\x2', '\x51B', '\x51D', '\x5', '\xCA', 
		'\x66', '\x2', '\x51C', '\x50D', '\x3', '\x2', '\x2', '\x2', '\x51C', 
		'\x51B', '\x3', '\x2', '\x2', '\x2', '\x51D', '\xB7', '\x3', '\x2', '\x2', 
		'\x2', '\x51E', '\x520', '\a', 'q', '\x2', '\x2', '\x51F', '\x521', '\x5', 
		'\xC2', '\x62', '\x2', '\x520', '\x51F', '\x3', '\x2', '\x2', '\x2', '\x520', 
		'\x521', '\x3', '\x2', '\x2', '\x2', '\x521', '\x522', '\x3', '\x2', '\x2', 
		'\x2', '\x522', '\x523', '\x5', '\xBC', '_', '\x2', '\x523', '\xB9', '\x3', 
		'\x2', '\x2', '\x2', '\x524', '\x540', '\a', '\x43', '\x2', '\x2', '\x525', 
		'\x52A', '\a', '\x44', '\x2', '\x2', '\x526', '\x527', '\a', '\x43', '\x2', 
		'\x2', '\x527', '\x529', '\a', '\x44', '\x2', '\x2', '\x528', '\x526', 
		'\x3', '\x2', '\x2', '\x2', '\x529', '\x52C', '\x3', '\x2', '\x2', '\x2', 
		'\x52A', '\x528', '\x3', '\x2', '\x2', '\x2', '\x52A', '\x52B', '\x3', 
		'\x2', '\x2', '\x2', '\x52B', '\x52D', '\x3', '\x2', '\x2', '\x2', '\x52C', 
		'\x52A', '\x3', '\x2', '\x2', '\x2', '\x52D', '\x541', '\x5', 'N', '(', 
		'\x2', '\x52E', '\x52F', '\x5', '\xA8', 'U', '\x2', '\x52F', '\x536', 
		'\a', '\x44', '\x2', '\x2', '\x530', '\x531', '\a', '\x43', '\x2', '\x2', 
		'\x531', '\x532', '\x5', '\xA8', 'U', '\x2', '\x532', '\x533', '\a', '\x44', 
		'\x2', '\x2', '\x533', '\x535', '\x3', '\x2', '\x2', '\x2', '\x534', '\x530', 
		'\x3', '\x2', '\x2', '\x2', '\x535', '\x538', '\x3', '\x2', '\x2', '\x2', 
		'\x536', '\x534', '\x3', '\x2', '\x2', '\x2', '\x536', '\x537', '\x3', 
		'\x2', '\x2', '\x2', '\x537', '\x53D', '\x3', '\x2', '\x2', '\x2', '\x538', 
		'\x536', '\x3', '\x2', '\x2', '\x2', '\x539', '\x53A', '\a', '\x43', '\x2', 
		'\x2', '\x53A', '\x53C', '\a', '\x44', '\x2', '\x2', '\x53B', '\x539', 
		'\x3', '\x2', '\x2', '\x2', '\x53C', '\x53F', '\x3', '\x2', '\x2', '\x2', 
		'\x53D', '\x53B', '\x3', '\x2', '\x2', '\x2', '\x53D', '\x53E', '\x3', 
		'\x2', '\x2', '\x2', '\x53E', '\x541', '\x3', '\x2', '\x2', '\x2', '\x53F', 
		'\x53D', '\x3', '\x2', '\x2', '\x2', '\x540', '\x525', '\x3', '\x2', '\x2', 
		'\x2', '\x540', '\x52E', '\x3', '\x2', '\x2', '\x2', '\x541', '\xBB', 
		'\x3', '\x2', '\x2', '\x2', '\x542', '\x544', '\x5', '\xD2', 'j', '\x2', 
		'\x543', '\x545', '\x5', '\"', '\x12', '\x2', '\x544', '\x543', '\x3', 
		'\x2', '\x2', '\x2', '\x544', '\x545', '\x3', '\x2', '\x2', '\x2', '\x545', 
		'\xBD', '\x3', '\x2', '\x2', '\x2', '\x546', '\x547', '\x5', '\xC4', '\x63', 
		'\x2', '\x547', '\x548', '\x5', '\xD0', 'i', '\x2', '\x548', '\xBF', '\x3', 
		'\x2', '\x2', '\x2', '\x549', '\x54A', '\a', 'J', '\x2', '\x2', '\x54A', 
		'\x54D', '\a', 'I', '\x2', '\x2', '\x54B', '\x54D', '\x5', '\xCC', 'g', 
		'\x2', '\x54C', '\x549', '\x3', '\x2', '\x2', '\x2', '\x54C', '\x54B', 
		'\x3', '\x2', '\x2', '\x2', '\x54D', '\xC1', '\x3', '\x2', '\x2', '\x2', 
		'\x54E', '\x54F', '\a', 'J', '\x2', '\x2', '\x54F', '\x552', '\a', 'I', 
		'\x2', '\x2', '\x550', '\x552', '\x5', '\xC4', '\x63', '\x2', '\x551', 
		'\x54E', '\x3', '\x2', '\x2', '\x2', '\x551', '\x550', '\x3', '\x2', '\x2', 
		'\x2', '\x552', '\xC3', '\x3', '\x2', '\x2', '\x2', '\x553', '\x554', 
		'\a', 'J', '\x2', '\x2', '\x554', '\x555', '\x5', '\xC6', '\x64', '\x2', 
		'\x555', '\x556', '\a', 'I', '\x2', '\x2', '\x556', '\xC5', '\x3', '\x2', 
		'\x2', '\x2', '\x557', '\x55C', '\x5', '\xC8', '\x65', '\x2', '\x558', 
		'\x559', '\a', '\x46', '\x2', '\x2', '\x559', '\x55B', '\x5', '\xC8', 
		'\x65', '\x2', '\x55A', '\x558', '\x3', '\x2', '\x2', '\x2', '\x55B', 
		'\x55E', '\x3', '\x2', '\x2', '\x2', '\x55C', '\x55A', '\x3', '\x2', '\x2', 
		'\x2', '\x55C', '\x55D', '\x3', '\x2', '\x2', '\x2', '\x55D', '\xC7', 
		'\x3', '\x2', '\x2', '\x2', '\x55E', '\x55C', '\x3', '\x2', '\x2', '\x2', 
		'\x55F', '\x561', '\x5', 'h', '\x35', '\x2', '\x560', '\x55F', '\x3', 
		'\x2', '\x2', '\x2', '\x561', '\x564', '\x3', '\x2', '\x2', '\x2', '\x562', 
		'\x560', '\x3', '\x2', '\x2', '\x2', '\x562', '\x563', '\x3', '\x2', '\x2', 
		'\x2', '\x563', '\x567', '\x3', '\x2', '\x2', '\x2', '\x564', '\x562', 
		'\x3', '\x2', '\x2', '\x2', '\x565', '\x568', '\x5', 'P', ')', '\x2', 
		'\x566', '\x568', '\x5', '\xCA', '\x66', '\x2', '\x567', '\x565', '\x3', 
		'\x2', '\x2', '\x2', '\x567', '\x566', '\x3', '\x2', '\x2', '\x2', '\x568', 
		'\x573', '\x3', '\x2', '\x2', '\x2', '\x569', '\x56B', '\x5', 'h', '\x35', 
		'\x2', '\x56A', '\x569', '\x3', '\x2', '\x2', '\x2', '\x56B', '\x56E', 
		'\x3', '\x2', '\x2', '\x2', '\x56C', '\x56A', '\x3', '\x2', '\x2', '\x2', 
		'\x56C', '\x56D', '\x3', '\x2', '\x2', '\x2', '\x56D', '\x56F', '\x3', 
		'\x2', '\x2', '\x2', '\x56E', '\x56C', '\x3', '\x2', '\x2', '\x2', '\x56F', 
		'\x570', '\a', '\x43', '\x2', '\x2', '\x570', '\x572', '\a', '\x44', '\x2', 
		'\x2', '\x571', '\x56C', '\x3', '\x2', '\x2', '\x2', '\x572', '\x575', 
		'\x3', '\x2', '\x2', '\x2', '\x573', '\x571', '\x3', '\x2', '\x2', '\x2', 
		'\x573', '\x574', '\x3', '\x2', '\x2', '\x2', '\x574', '\xC9', '\x3', 
		'\x2', '\x2', '\x2', '\x575', '\x573', '\x3', '\x2', '\x2', '\x2', '\x576', 
		'\x577', '\t', '\r', '\x2', '\x2', '\x577', '\xCB', '\x3', '\x2', '\x2', 
		'\x2', '\x578', '\x579', '\a', 'J', '\x2', '\x2', '\x579', '\x57E', '\x5', 
		'R', '*', '\x2', '\x57A', '\x57B', '\a', '\x46', '\x2', '\x2', '\x57B', 
		'\x57D', '\x5', 'R', '*', '\x2', '\x57C', '\x57A', '\x3', '\x2', '\x2', 
		'\x2', '\x57D', '\x580', '\x3', '\x2', '\x2', '\x2', '\x57E', '\x57C', 
		'\x3', '\x2', '\x2', '\x2', '\x57E', '\x57F', '\x3', '\x2', '\x2', '\x2', 
		'\x57F', '\x581', '\x3', '\x2', '\x2', '\x2', '\x580', '\x57E', '\x3', 
		'\x2', '\x2', '\x2', '\x581', '\x582', '\a', 'I', '\x2', '\x2', '\x582', 
		'\xCD', '\x3', '\x2', '\x2', '\x2', '\x583', '\x58A', '\x5', '\xD2', 'j', 
		'\x2', '\x584', '\x585', '\a', 'G', '\x2', '\x2', '\x585', '\x587', '\a', 
		'q', '\x2', '\x2', '\x586', '\x588', '\x5', '\xD2', 'j', '\x2', '\x587', 
		'\x586', '\x3', '\x2', '\x2', '\x2', '\x587', '\x588', '\x3', '\x2', '\x2', 
		'\x2', '\x588', '\x58A', '\x3', '\x2', '\x2', '\x2', '\x589', '\x583', 
		'\x3', '\x2', '\x2', '\x2', '\x589', '\x584', '\x3', '\x2', '\x2', '\x2', 
		'\x58A', '\xCF', '\x3', '\x2', '\x2', '\x2', '\x58B', '\x58C', '\a', '*', 
		'\x2', '\x2', '\x58C', '\x590', '\x5', '\xCE', 'h', '\x2', '\x58D', '\x58E', 
		'\a', 'q', '\x2', '\x2', '\x58E', '\x590', '\x5', '\xD2', 'j', '\x2', 
		'\x58F', '\x58B', '\x3', '\x2', '\x2', '\x2', '\x58F', '\x58D', '\x3', 
		'\x2', '\x2', '\x2', '\x590', '\xD1', '\x3', '\x2', '\x2', '\x2', '\x591', 
		'\x593', '\a', '?', '\x2', '\x2', '\x592', '\x594', '\x5', '\xA4', 'S', 
		'\x2', '\x593', '\x592', '\x3', '\x2', '\x2', '\x2', '\x593', '\x594', 
		'\x3', '\x2', '\x2', '\x2', '\x594', '\x595', '\x3', '\x2', '\x2', '\x2', 
		'\x595', '\x596', '\a', '@', '\x2', '\x2', '\x596', '\xD3', '\x3', '\x2', 
		'\x2', '\x2', '\xB4', '\xD5', '\xDA', '\xE0', '\xE8', '\xF1', '\xF6', 
		'\xFD', '\x104', '\x107', '\x10E', '\x118', '\x11C', '\x121', '\x125', 
		'\x129', '\x133', '\x13B', '\x143', '\x147', '\x14E', '\x155', '\x159', 
		'\x15C', '\x15F', '\x168', '\x16E', '\x173', '\x176', '\x17C', '\x182', 
		'\x186', '\x18E', '\x197', '\x19E', '\x1A4', '\x1A8', '\x1B3', '\x1BC', 
		'\x1C1', '\x1C7', '\x1CB', '\x1D7', '\x1E2', '\x1E7', '\x1F0', '\x1F8', 
		'\x202', '\x20B', '\x213', '\x218', '\x220', '\x225', '\x22F', '\x239', 
		'\x23F', '\x246', '\x24B', '\x253', '\x257', '\x259', '\x25F', '\x264', 
		'\x268', '\x26F', '\x275', '\x277', '\x27E', '\x283', '\x28C', '\x291', 
		'\x294', '\x299', '\x2A2', '\x2A9', '\x2B4', '\x2BD', '\x2C7', '\x2D0', 
		'\x2D5', '\x2D8', '\x2DF', '\x2E9', '\x2F1', '\x2F4', '\x2F7', '\x304', 
		'\x30C', '\x311', '\x319', '\x31D', '\x321', '\x325', '\x327', '\x32B', 
		'\x331', '\x33C', '\x346', '\x34B', '\x354', '\x359', '\x35C', '\x363', 
		'\x36C', '\x383', '\x386', '\x389', '\x391', '\x395', '\x39D', '\x3A3', 
		'\x3AE', '\x3B7', '\x3BC', '\x3C6', '\x3CD', '\x3DA', '\x3E3', '\x3EC', 
		'\x3F2', '\x3FD', '\x402', '\x407', '\x40C', '\x410', '\x414', '\x418', 
		'\x41A', '\x41E', '\x423', '\x434', '\x43A', '\x440', '\x446', '\x449', 
		'\x454', '\x463', '\x467', '\x46C', '\x470', '\x480', '\x4A8', '\x4AE', 
		'\x4BD', '\x4C0', '\x4C2', '\x4CC', '\x4D5', '\x4D9', '\x4DD', '\x4EF', 
		'\x4F1', '\x4F6', '\x4FB', '\x500', '\x509', '\x50B', '\x50F', '\x514', 
		'\x518', '\x51C', '\x520', '\x52A', '\x536', '\x53D', '\x540', '\x544', 
		'\x54C', '\x551', '\x55C', '\x562', '\x567', '\x56C', '\x573', '\x57E', 
		'\x587', '\x589', '\x58F', '\x593',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace UndContain
